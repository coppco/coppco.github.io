<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>coppco的博客</title>
  
  <subtitle>记录iOS和Swift的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-05T09:25:13.658Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>coppco</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter填坑指南</title>
    <link href="http://yoursite.com/2019/05/05/Flutter/Flutter%E5%A1%AB%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2019/05/05/Flutter/Flutter填坑指南/</id>
    <published>2019-05-05T09:02:02.000Z</published>
    <updated>2019-05-05T09:25:13.658Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://47.96.147.179/images/iOS/Flutter.jpeg" alt="hello" style="width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"></p><p><a href="https://flutter.dev/" target="_blank" rel="noopener">Flutter</a>是Google推出的移动UI框架, 可以快速在iOS和Android上构建高质量的原生用户界面。</p><p>本文主要记录相关Flutter遇到的坑!!!</p><a id="more"></a><h1 id="Flutter卡在Running-“flutter-packages-get”-in-project-name…"><a href="#Flutter卡在Running-“flutter-packages-get”-in-project-name…" class="headerlink" title=" Flutter卡在Running “flutter packages get” in project_name… "></a><font color="orange"> Flutter卡在<strong>Running “flutter packages get” in project_name…</strong> </font></h1><p>当创建项目/运行项目时<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Running &quot;flutter packages get&quot; in project_name...</span><br></pre></td></tr></table></figure></p><p><a href="https://flutter.dev/community/china" target="_blank" rel="noopener">官方解决</a>办法</p><blockquote><p>export PUB_HOSTED_URL=<a href="https://pub.flutter-io.cn" target="_blank" rel="noopener">https://pub.flutter-io.cn</a><br>export FLUTTER_STORAGE_BASE_URL=<a href="https://storage.flutter-io.cn" target="_blank" rel="noopener">https://storage.flutter-io.cn</a></p></blockquote><h1 id="Android项目运行时出错"><a href="#Android项目运行时出错" class="headerlink" title=" Android项目运行时出错 "></a><font color="orange"> Android项目运行时出错 </font></h1><h2 id="卡在Initializing-gradle…"><a href="#卡在Initializing-gradle…" class="headerlink" title=" 卡在Initializing gradle… "></a><font color="orange"> 卡在<strong>Initializing gradle…</strong> </font></h2><p>运行时会卡在<code>Initializing gradle...</code>, 此时因为Android项目会用到<code>Gradle</code>, 如果没有FQ,下载速度会非常慢, 此时我们可以在项目中的<code>android/gradle/wrapper/gradle-wrapper.properties</code>中查看<code>gradle</code>版本号以及<a href="http://services.gradle.org/distributions/" target="_blank" rel="noopener">地址</a>, 我们可以手动下载然后解压到<code>~/.gradle/wrapper/dists/</code>中。</p><h2 id="卡在Running-‘gradle-assembleDebug"><a href="#卡在Running-‘gradle-assembleDebug" class="headerlink" title=" 卡在Running ‘gradle assembleDebug "></a><font color="orange"> 卡在<strong>Running ‘gradle assembleDebug</strong> </font></h2><p>运行时会卡在<code>Running &#39;gradle assembleDebug</code>, 因为Gradle的Maven仓库在国外, 可以使用阿里云的镜像地址。</p><pre><code>* 修改项目中`android/build.gradle`文件</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        //修改的地方</span><br><span class="line">        //google()</span><br><span class="line">        //jcenter()</span><br><span class="line">        maven &#123; url &apos;https://maven.aliyun.com/repository/google&apos; &#125;</span><br><span class="line">        maven &#123; url &apos;https://maven.aliyun.com/repository/jcenter&apos; &#125;</span><br><span class="line">        maven &#123; url &apos;http://maven.aliyun.com/nexus/content/groups/public&apos; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:3.2.1&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        //修改的地方</span><br><span class="line">        //google()</span><br><span class="line">        //jcenter()</span><br><span class="line">        maven &#123; url &apos;https://maven.aliyun.com/repository/google&apos; &#125;</span><br><span class="line">        maven &#123; url &apos;https://maven.aliyun.com/repository/jcenter&apos; &#125;</span><br><span class="line">        maven &#123; url &apos;http://maven.aliyun.com/nexus/content/groups/public&apos; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rootProject.buildDir = &apos;../build&apos;</span><br><span class="line">subprojects &#123;</span><br><span class="line">    project.buildDir = &quot;$&#123;rootProject.buildDir&#125;/$&#123;project.name&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">subprojects &#123;</span><br><span class="line">    project.evaluationDependsOn(&apos;:app&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task clean(type: Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>* 修改Flutter的配置文件, 该文件在`Flutter安装目录/packages/flutter_tools/gradle/flutter.gradle`</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        //修改的地方</span><br><span class="line">        //google()</span><br><span class="line">        //jcenter()</span><br><span class="line">        maven &#123; url &apos;https://maven.aliyun.com/repository/google&apos; &#125;</span><br><span class="line">        maven &#123; url &apos;https://maven.aliyun.com/repository/jcenter&apos; &#125;</span><br><span class="line">        maven &#123; url &apos;http://maven.aliyun.com/nexus/content/groups/public&apos; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:3.2.1&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://47.96.147.179/images/iOS/Flutter.jpeg&quot; alt=&quot;hello&quot; style=&quot;width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://flutter.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Flutter&lt;/a&gt;是Google推出的移动UI框架, 可以快速在iOS和Android上构建高质量的原生用户界面。&lt;/p&gt;
&lt;p&gt;本文主要记录相关Flutter遇到的坑!!!&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Flutter" scheme="http://yoursite.com/tags/Flutter/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="资料整理" scheme="http://yoursite.com/tags/%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Flutter之初体验</title>
    <link href="http://yoursite.com/2019/04/25/Flutter/Flutter%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2019/04/25/Flutter/Flutter之初体验/</id>
    <published>2019-04-25T01:34:32.000Z</published>
    <updated>2019-05-05T09:18:21.178Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://47.96.147.179/images/iOS/Flutter.jpeg" alt="hello" style="width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"></p><p><a href="https://flutter.dev/" target="_blank" rel="noopener">Flutter</a>是Google推出的移动UI框架, 可以快速在iOS和Android上构建高质量的原生用户界面。</p><p><a href="/2019/05/05/Flutter/Flutter填坑指南/">Flutter遇到的问题</a></p><a id="more"></a><h1 id="安装Flutter"><a href="#安装Flutter" class="headerlink" title=" 安装Flutter "></a><font color="orange"> 安装Flutter </font></h1><p>Flutter可以安装在<code>Windows</code>、<code>macOS</code>和<code>Linux</code>平台上, 可以参考<a href="https://flutter.dev/docs/get-started/install" target="_blank" rel="noopener">官方安装向导</a>。</p><p>这里我介绍一下在<strong>macOS</strong>上面安装Flutter的步骤, 以及安装Android Studio等。</p><h2 id="系统需求"><a href="#系统需求" class="headerlink" title=" 系统需求 "></a><font color="orange"> 系统需求 </font></h2><ul><li>操作系统: macOS (64-bit)</li><li>磁盘空间: 700 MB (不包含IDE和工具).</li><li>命令: bash、curl、git 2.x、mkdir、rm、unzip、which</li></ul><h2 id="安装FLutterSDK"><a href="#安装FLutterSDK" class="headerlink" title=" 安装FLutterSDK "></a><font color="orange"> 安装FLutterSDK </font></h2><ul><li>1、下载FLutter SDK, 截止目前(2019-04-25), 最新版本是v1.2.1<ul><li><a href="https://flutter.dev/docs/development/tools/sdk/releases?tab=macos" target="_blank" rel="noopener">下载地址</a></li></ul></li><li>2、解压到安装目录, 我一般安装到/usr/local/bin<blockquote><p>cd /usr/local/bin<br>unzip ~/Downloads/flutter_macos_v1.2.1-stable.zip</p></blockquote></li><li>3、修改<code>/etc/porfile</code>文件, 在文件末尾添加<blockquote><p>export PATH=/usr/local/bin/flutter/bin:$PATH</p></blockquote></li><li>4、使修改配置生效<blockquote><p>source /etc/profile</p></blockquote></li><li>5、预下载(可选)<blockquote><p>flutter precache</p></blockquote></li></ul><h2 id="运行Flutter-医生"><a href="#运行Flutter-医生" class="headerlink" title=" 运行Flutter 医生 "></a><font color="orange"> 运行Flutter 医生 </font></h2><p>该命令可以检查当前机器的Flutter环境、Android环境、iOS环境等。</p><blockquote><p>flutter doctor</p></blockquote><p>结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[✓] Flutter (Channel stable, v1.2.1, on Mac OS X 10.14.2 18C54, locale</span><br><span class="line">    zh-Hans-CN)</span><br><span class="line">[!] Android toolchain - develop for Android devices (Android SDK version 28.0.3)</span><br><span class="line">    ! Some Android licenses not accepted.  To resolve this, run: flutter doctor</span><br><span class="line">      --android-licenses</span><br><span class="line">[✓] iOS toolchain - develop for iOS devices (Xcode 10.1)</span><br><span class="line">[!] Android Studio (version 3.4)</span><br><span class="line">    ✗ Flutter plugin not installed; this adds Flutter specific functionality.</span><br><span class="line">    ✗ Dart plugin not installed; this adds Dart specific functionality.</span><br><span class="line">[✓] Connected device (1 available)</span><br><span class="line"></span><br><span class="line">! Doctor found issues in 2 categories.</span><br></pre></td></tr></table></figure></p><p>Flutter默认使用Google 分析工具提交使用报告和崩溃信息等, 在国内由于墙的原因或者不想上传可以关闭。</p><blockquote><p>关闭<br>flutter config –no-analytics<br>开启<br>flutter config –analytics</p></blockquote><h2 id="iOS"><a href="#iOS" class="headerlink" title=" iOS "></a><font color="orange"> iOS </font></h2><h3 id="安装Xcode并配置"><a href="#安装Xcode并配置" class="headerlink" title=" 安装Xcode并配置 "></a><font color="orange"> 安装Xcode并配置 </font></h3><ul><li>1、安装Xcode, 需要9.0以后版本</li><li>2、配置Xcode命令行使用最新安装的Xcode<blockquote><p>sudo xcode-select –switch /Applications/Xcode.app/Contents/Developer</p></blockquote></li><li>3、打开Xcode一次确保Xcode许可协议签署,或者命令行运行:  <blockquote><p>sudo xcodebuild -license</p></blockquote></li></ul><h3 id="iOS-simulator"><a href="#iOS-simulator" class="headerlink" title=" iOS simulator "></a><font color="orange"> iOS simulator </font></h3><p>运行下面命令打开一个iOS模拟器</p><blockquote><p>open -a Simulator</p></blockquote><h3 id="iOS-设备"><a href="#iOS-设备" class="headerlink" title=" iOS 设备 "></a><font color="orange"> iOS 设备 </font></h3><ul><li>1、安装homebrew<blockquote><p>/usr/bin/ruby -e “$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;" target="_blank" rel="noopener">https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</a></p></blockquote></li><li>2、更新homebrew<blockquote><p>brew update</p></blockquote></li><li>3、安装其他工具<blockquote><p>brew install –HEAD usbmuxd<br>brew link usbmuxd<br>brew install –HEAD libimobiledevice<br>brew install ideviceinstaller ios-deploy cocoapods<br>pod setup</p></blockquote></li><li>4、运行Flutter项目中的ios/Runner.xcworkspace, 给项目设置Bundle Identifier、证书和描述文件等</li><li>5、使用数据线连接iPhone到电脑, 并信任电脑</li><li>6、运行<code>flutter run</code></li></ul><h2 id="Android"><a href="#Android" class="headerlink" title=" Android "></a><font color="orange"> Android </font></h2><h3 id="安装Android-Studio"><a href="#安装Android-Studio" class="headerlink" title=" 安装Android Studio "></a><font color="orange"> 安装Android Studio </font></h3><ul><li>1、<a href="https://developer.android.com/studio" target="_blank" rel="noopener">官网</a>下载安装Android Sdudio</li><li>2、打开Android Studio, 然后安装通过<code>Android Studio Setup Wizard</code>页面</li><li>3、Android授权, 运行下面命令<blockquote><p>flutter doctor –android-licenses</p></blockquote></li><li>4、Android Studio安装<code>Flutter</code>和<code>Dark</code>插件, 打开<code>Android Studio</code>—&gt;打开偏好设置<code>Preferences</code>—&gt;插件<code>Plugins</code>—&gt;搜索Flutter—&gt;安装Flutter插件—&gt;重启Android Studio</li></ul><h3 id="Android-emulator"><a href="#Android-emulator" class="headerlink" title=" Android emulator "></a><font color="orange"> Android emulator </font></h3><ul><li>1、开启VM acceleration</li><li>2、打开<code>Android Studio</code>—&gt;<code>Configure</code>—&gt;<code>AVD Manager</code>—&gt;<code>Create Virtual Device</code></li><li>3、选择一个设备然后点击<code>Next</code></li><li>4、首先下载镜像, 然后选择一个或者多个镜像, 点击<code>Next</code></li><li>5、在<code>Verify Configuartion</code>页面中的<code>Graphics</code>选项选择<code>Hardware - GLES 2.0</code>后点击<code>Finish</code></li><li>6、在<code>Android Virtual Device Manager</code>页面启动添加的模拟器</li></ul><h3 id="Android-设备"><a href="#Android-设备" class="headerlink" title=" Android 设备 "></a><font color="orange"> Android 设备 </font></h3><ul><li>1、允许开发者选项和USB调试</li><li>2、如果是Windows, 安装<code>Google USB Driver</code></li><li>3、使用USB线连接电脑, 并信任电脑</li><li>4、在命令行中输入下面的命令并允许, 检测你的设备<blockquote><p>   flutter devices</p></blockquote></li></ul><h1 id="创建Flutter项目"><a href="#创建Flutter项目" class="headerlink" title=" 创建Flutter项目 "></a><font color="orange"> 创建Flutter项目 </font></h1><p>目前创建Flutter项目支持一下几种方式: </p><h2 id="Android-Studio-IntelliJ"><a href="#Android-Studio-IntelliJ" class="headerlink" title=" Android Studio/IntelliJ "></a><font color="orange"> Android Studio/IntelliJ </font></h2><ul><li>1.1、选择<code>New Flutter Project</code></li><li>1.2、选择<code>Flutter application</code></li><li>1.3、确保<code>Flutter SDK Path</code>正确</li><li>1.4、填写项目名称、描述以及项目存储位置</li><li>1.5、点击完成</li></ul><h2 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title=" Visual Studio Code "></a><font color="orange"> Visual Studio Code </font></h2><ul><li>2.1、<code>View</code>—&gt;<code>Command Palette</code></li><li>2.2、Type<code>Flutter</code>, 选择<code>Flutter: New Project</code></li><li>2.3、填写项目名称、描述以及项目存储位置</li><li>2.4、点击完成</li></ul><h2 id="Terminal-amp-editor"><a href="#Terminal-amp-editor" class="headerlink" title=" Terminal &amp; editor "></a><font color="orange"> Terminal &amp; editor </font></h2><ul><li>3.1、进入项目存放目录, 创建项目<blockquote><p>mkdir -p ~/Desktop/Flutter<br>cd ~/Desktop/Flutter<br>flutter create myApp</p></blockquote></li><li>3.2、打开模拟器<blockquote><p>设备<br>flutter devices<br>模拟器<br>flutter emulators<br>flutter emulators –launch emulatorid</p></blockquote></li><li>3.2、运行<blockquote><p>当前只打开一个模拟器时, 直接运行<br>flutter run<br>在所有模拟器运行<br>flutter run -d all<br>指定模拟器运行<br>flutter run -d deviceId</p></blockquote></li></ul><h1 id="运行效果"><a href="#运行效果" class="headerlink" title=" 运行效果 "></a><font color="orange"> 运行效果 </font></h1><center><br><img src="http://47.96.147.179/images/iOS/flutter_demo_app.png" alt="运行效果" style="width: 100%; text-align: center; display: block;"><br></center>    ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://47.96.147.179/images/iOS/Flutter.jpeg&quot; alt=&quot;hello&quot; style=&quot;width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://flutter.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Flutter&lt;/a&gt;是Google推出的移动UI框架, 可以快速在iOS和Android上构建高质量的原生用户界面。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/2019/05/05/Flutter/Flutter填坑指南/&quot;&gt;Flutter遇到的问题&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Flutter" scheme="http://yoursite.com/tags/Flutter/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>iOS之App瘦身实践</title>
    <link href="http://yoursite.com/2019/02/01/iOS/iOS%E4%B9%8BApp%E7%98%A6%E8%BA%AB/"/>
    <id>http://yoursite.com/2019/02/01/iOS/iOS之App瘦身/</id>
    <published>2019-02-01T01:19:34.000Z</published>
    <updated>2019-05-05T02:39:57.708Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://47.96.147.179/images/iOS/iOS_App_thinning.jpeg" alt="hello" style="width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"></p><p>随着时间的推移、项目开发和迭代, App包体积越来越大, App瘦身势在必行!</p><a id="more"></a><h2 id="分析App的组成"><a href="#分析App的组成" class="headerlink" title=" 分析App的组成 "></a><font color="orange"> 分析App的组成 </font></h2><ul><li>资源文件<ul><li>数据库、配置文件、数据文件</li><li>字体文件</li><li>图片</li></ul></li><li>源代码</li></ul><h3 id="生成LinkMap"><a href="#生成LinkMap" class="headerlink" title=" 生成LinkMap"></a><font color="orange"> 生成LinkMap</font></h3><p>通过生成<code>LinkMap</code>文件可以分析生成ipa包的内容组成:<br><code>Xcode</code>—&gt;<code>TARGETS</code>—&gt;<code>Build Settings</code>—&gt;<code>搜索Link Map</code>—&gt;在<code>Write Link Map File</code>中把Debug中的值改为YES, Release中改为NO—&gt;在<code>Path to Link Map File</code>中是生成文件的路径, 一般默认在<code>~/Library/Developer/Xcode/DerivedData/XXX-eumsvrzbvgfofvbfsoqokmjprvuh/Build/Intermediates.noindex/XXX.build/Debug-iphoneos/XXX.build/XXX-LinkMap-normal-arm64.txt</code></p><p>LinkMap会包含每个可执行文件的偏移量及大小，所以可以很方便的知道每个可执行文件的大小。可以通过<a href="https://github.com/huanxsd/LinkMap" target="_blank" rel="noopener">LinkMap分析工具</a>快速分析App内组成。</p><h2 id="图片"><a href="#图片" class="headerlink" title=" 图片 "></a><font color="orange"> 图片 </font></h2><h3 id="图片压缩"><a href="#图片压缩" class="headerlink" title=" 图片压缩 "></a><font color="orange"> 图片压缩 </font></h3><p>图片是相当占用资源的, 对于一些比较大的图片, 我们可以无损压缩一下, 这样可以节约60%的图片大小的空间。</p><ul><li>在线压缩<ul><li><a href="https://tinypng.com/" target="_blank" rel="noopener">tinypng</a></li></ul></li><li>软件工具<ul><li><a href="https://github.com/ImageOptim/ImageOptim" target="_blank" rel="noopener">ImageOptim</a></li></ul></li></ul><h3 id="查找未使用的图片"><a href="#查找未使用的图片" class="headerlink" title=" 查找未使用的图片 "></a><font color="orange"> 查找未使用的图片 </font></h3><p>以下两种方式删除图片时都需要谨慎, 最好删除之前项目中搜索一下。</p><ul><li>方式一: 通过<code>ack</code>命令自己写一个脚本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>判断是否安装了ack命令, 没有则安装</span><br><span class="line">function checkAckAndInstall() &#123;</span><br><span class="line">  if hash ack ; then</span><br><span class="line">    eturn 1</span><br><span class="line">  else</span><br><span class="line">    echo "brew install ack"</span><br><span class="line">    echo "brew install ack" &gt;&gt; $logFile</span><br><span class="line">    `brew install ack`</span><br><span class="line">    if [[ $? = "0" ]]; then</span><br><span class="line">      echo "安装ack失败"</span><br><span class="line">      echo "Install ack failed!" &gt;&gt; $logFile</span><br><span class="line">      return 0</span><br><span class="line">    else</span><br><span class="line">      echo "install ack success"</span><br><span class="line">      echo "Install ack success" &gt;&gt; $logFile</span><br><span class="line">      return 1</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkAckAndInstall</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>安装出错</span><br><span class="line">if [[ $? -eq 0 ]]; then</span><br><span class="line">  echo "ACK命令未安装并且brew install ack失败, 请先安装ack"</span><br><span class="line">  exit</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>查找所有图片</span><br><span class="line">for i in `find . -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif"`; do</span><br><span class="line"><span class="meta">  #</span>图片名</span><br><span class="line">  file=`basename -s .jpg "$i" | xargs basename -s .png | xargs basename -s @2x | xargs basename -s @3x`</span><br><span class="line"><span class="meta">  #</span>查找</span><br><span class="line">  result=`ack -i "$file"`</span><br><span class="line"><span class="meta">  #</span>如果查找结果为空</span><br><span class="line">  if [ -z "$result" ]; then</span><br><span class="line">    echo "发现未使用图片: $i"</span><br><span class="line">  fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>方式二: <a href="https://github.com/tinymind/LSUnusedResources" target="_blank" rel="noopener">LSUnusedResources</a></li></ul><h2 id="字体"><a href="#字体" class="headerlink" title=" 字体 "></a><font color="orange"> 字体 </font></h2><h3 id="系统字体"><a href="#系统字体" class="headerlink" title=" 系统字体 "></a><font color="orange"> 系统字体 </font></h3><p>系统字体, 但不在预装字体列表中, 注意: 退出当前控制器或者App重启后都需要重新下载</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用字体的PostScript名字创建一个Dictionary    NSMutableDictionary *attrs = [NSMutableDictionary dictionaryWithObjectsAndKeys:fontName, kCTFontNameAttribute, nil];</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 创建一个字体描述对象CTFontDescriptorRef</span></span><br><span class="line"><span class="built_in">CTFontDescriptorRef</span> desc = <span class="built_in">CTFontDescriptorCreateWithAttributes</span>((__bridge <span class="built_in">CFDictionaryRef</span>)attrs);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//将字体描述对象放到一个NSMutableArray中</span></span><br><span class="line"><span class="built_in">NSMutableArray</span> *descs = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:<span class="number">0</span>];</span><br><span class="line">[descs addObject:(__bridge <span class="keyword">id</span>)desc];</span><br><span class="line"><span class="built_in">CFRelease</span>(desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配字体</span></span><br><span class="line"><span class="built_in">CTFontDescriptorMatchFontDescriptorsWithProgressHandler</span>((__bridge <span class="built_in">CFArrayRef</span>)descs, <span class="literal">NULL</span>, ^<span class="keyword">bool</span>(<span class="built_in">CTFontDescriptorMatchingState</span> state, <span class="built_in">CFDictionaryRef</span>  _Nonnull progressParameter) &#123;</span><br><span class="line">        </span><br><span class="line">  <span class="keyword">if</span> (state == kCTFontDescriptorMatchingDidBegin) &#123;<span class="comment">//字体已经匹配</span></span><br><span class="line">        </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == kCTFontDescriptorMatchingDidFinish) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!errorDuringDownload) &#123;</span><br><span class="line">      <span class="comment">//下载完成</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">BOOL</span>)<span class="literal">YES</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="自定义字体"><a href="#自定义字体" class="headerlink" title=" 自定义字体 "></a><font color="orange"> 自定义字体 </font></h3><p>字体文件相对来说比较大, 我们可以把字体文件放在服务器, 使用的时候从服务器下载后再使用。可以一次下载多次使用.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下载字体后, 本地沙盒路径</span></span><br><span class="line"><span class="built_in">NSURL</span> *fontUrl = [<span class="built_in">NSURL</span> fileURLWithPath:path];</span><br><span class="line"><span class="built_in">CGDataProviderRef</span> fontDataProvider = <span class="built_in">CGDataProviderCreateWithURL</span>((__bridge <span class="built_in">CFURLRef</span>)fontUrl);    </span><br><span class="line"><span class="built_in">CGFontRef</span> fontRef = <span class="built_in">CGFontCreateWithDataProvider</span>(fontDataProvider);</span><br><span class="line"><span class="built_in">CGDataProviderRelease</span>(fontDataProvider);</span><br><span class="line"><span class="built_in">CTFontManagerRegisterGraphicsFont</span>(fontRef, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//字体名称</span></span><br><span class="line"><span class="built_in">NSString</span> *fontName = <span class="built_in">CFBridgingRelease</span>(<span class="built_in">CGFontCopyPostScriptName</span>(fontRef));</span><br><span class="line"><span class="built_in">CGFontRelease</span>(fontRef);</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title=" 代码 "></a><font color="orange"> 代码 </font></h2><h3 id="第三方库"><a href="#第三方库" class="headerlink" title=" 第三方库 "></a><font color="orange"> 第三方库 </font></h3><p>项目中或多或少的使用一些第三方SDK, 清理一些不使用的SDK, 或者根据需要使用精简版的SDK。</p><h3 id="bitcode"><a href="#bitcode" class="headerlink" title=" bitcode "></a><font color="orange"> bitcode </font></h3><p>Xcode中要使用bitcode要求说有的SDK都必须支持bitcode, 可以在<code>Xcode</code>—&gt;<code>PROJECT</code>—&gt;<code>Build Settings</code>—&gt;搜索<code>bitcode</code>开启。</p><h3 id="未使用的类"><a href="#未使用的类" class="headerlink" title=" 未使用的类 "></a><font color="orange"> 未使用的类 </font></h3><p>注意防止误删!</p><ul><li><a href="https://blog.jetbrains.com/objc/2014/01/appcode-inspections-for-your-code-perfection/" target="_blank" rel="noopener">AppCode</a></li><li><a href="https://github.com/dblock/fui" target="_blank" rel="noopener">Fui</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://47.96.147.179/images/iOS/iOS_App_thinning.jpeg&quot; alt=&quot;hello&quot; style=&quot;width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;&gt;&lt;/p&gt;
&lt;p&gt;随着时间的推移、项目开发和迭代, App包体积越来越大, App瘦身势在必行!&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="资料整理" scheme="http://yoursite.com/tags/%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"/>
    
      <category term="App瘦身" scheme="http://yoursite.com/tags/App%E7%98%A6%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>iOS自动编译打包脚本</title>
    <link href="http://yoursite.com/2018/08/26/iOS/iOS%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2018/08/26/iOS/iOS自动编译打包脚本/</id>
    <published>2018-08-26T05:37:04.000Z</published>
    <updated>2019-05-05T00:56:25.977Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://47.96.147.179/images/iOS/iOS_auto_build_ipa.jpeg" alt="hello" style="width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"></p><p>最近闲暇时间研究了一下Xcode自动编译、打包以及通过脚本更改一个配置文件, 主要涉及的命令如下: </p><ul><li>xcpretty<ul><li>美化xcodebuild的输出日志</li></ul></li><li>xcodebuild<ul><li>苹果发布自动构建的工具</li></ul></li><li>PlistBuddy<ul><li>Mac自带的专门解析plist的小工具</li></ul></li><li>grep<ul><li>文本搜索工具</li></ul></li><li>awk<ul><li>文本分析工具</li></ul></li><li>sed<ul><li>文本编辑工具</li></ul></li></ul><p>这里只是简单介绍了这些命令的几种用法, 需要深入了解的可自行搜索学习。<br><a id="more"></a></p><h2 id="xcpretty"><a href="#xcpretty" class="headerlink" title=" xcpretty "></a><font color="orange"> xcpretty </font></h2><p>xcpretty是一个针对于xcodebuild的快速和灵活的格式化程序, <a href="https://github.com/xcpretty/xcpretty" target="_blank" rel="noopener">github地址</a>。</p><h3 id="安装xcpretty"><a href="#安装xcpretty" class="headerlink" title=" 安装xcpretty "></a><font color="orange"> 安装xcpretty </font></h3><blockquote><p>   sudo gem install</p></blockquote><p>也可以自定义安装目录</p><blockquote><p>   gem install -n /usr/local/bin xcpretty</p></blockquote><h3 id="使用xcpretty"><a href="#使用xcpretty" class="headerlink" title=" 使用xcpretty "></a><font color="orange"> 使用xcpretty </font></h3><blockquote><p>   xcodebuild [flags] | xcpretty</p></blockquote><p>或者在脚本中, 执行失败时退出</p><blockquote><p>   xcodebuild [flags] | xcpretty &amp;&amp; exit ${PIPESTATUS[0]}</p></blockquote><h2 id="grep"><a href="#grep" class="headerlink" title=" grep "></a><font color="orange"> grep </font></h2><p>Linux grep命令用于查找文件里符合条件的字符串。</p><blockquote><p>   查找</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#-m1表示取第一个结果</span><br><span class="line">#-C2表示查找匹配项的下面两行</span><br><span class="line">grep [-e] &quot;要查找的字符串&quot; 文件路径 [-m1] [-C2]</span><br><span class="line">grep -E &quot;正则表达式&quot; 文件路径</span><br></pre></td></tr></table></figure><h2 id="awk"><a href="#awk" class="headerlink" title=" awk "></a><font color="orange"> awk </font></h2><p>AWK是一种处理文本文件的语言，是一个强大的文本分析工具。<br>配合grep命令, 可以查找Xcode项目中的一些关键配置值。</p><blockquote><p>   分割</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#使用,分割然后输出第一个</span><br><span class="line">awk -F, &apos;&#123;print $1&#125;&apos; 文件路径</span><br></pre></td></tr></table></figure><blockquote><p>示例: 在当前目录中查找Xcode project项目名称, 当grep查询有多个时,可以使用-m1取第一个<br><code>$(ls | grep xcodeproj -m1 | awk -F.xcodeproj &#39;{print $1}&#39;)</code></p></blockquote><h2 id="sed"><a href="#sed" class="headerlink" title=" sed "></a><font color="orange"> sed </font></h2><p>sed主要用来自动编辑一个或多个文件<br>此命令可以用来修改Xcode项目中的.h或者.m文件</p><blockquote><p>   打印</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查找匹配打印</span><br><span class="line">sed -n &quot;/匹配项,可以是正则表达式/p&quot; 文件路径</span><br><span class="line">#打印第四行</span><br><span class="line">sed -n 4p 文件路径</span><br></pre></td></tr></table></figure><blockquote><p>   替换行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#字符串替换</span><br><span class="line">sed -i &apos;&apos; -e &quot;s/被替换字符串, 可以是正则表达式/替换字符串/&quot; 文件路径</span><br></pre></td></tr></table></figure><blockquote><p>示例: 查找并替换某一个内容<br>假如有一个xxx.h文件, 目录是~/Desktop/xxx.h, 内容如下:<br><code>#define PUBLISH 1</code><br>我们需要修改为<code>#define PUBLISH 2</code><br>执行<code>sed -i &#39;&#39; -e &quot;s/^#define[ ]*PUBLISH[ ]*[0-9]*[ ]*$/#define PUBLISH 2/&quot; ~/Desktop/xxx.h</code>即可</p></blockquote><h2 id="PlistBuddy"><a href="#PlistBuddy" class="headerlink" title=" PlistBuddy "></a><font color="orange"> PlistBuddy </font></h2><p>此命令可以用来修改Xcode项目中Info.plist文件中的配置。</p><blockquote><p>   打印CFBundleShortVersionString对应的值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/PlistBuddy -c &quot;print CFBundleShortVersionString&quot; plist文件路径</span><br></pre></td></tr></table></figure><blockquote><p>   修改CFBundleShortVersionString对应的值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/PlistBuddy -c &quot;Set :CFBundleShortVersionString 1.1&quot; plist文件路径</span><br></pre></td></tr></table></figure><h2 id="xcodebuild"><a href="#xcodebuild" class="headerlink" title=" xcodebuild "></a><font color="orange"> xcodebuild </font></h2><h3 id="常见命令"><a href="#常见命令" class="headerlink" title=" 常见命令 "></a><font color="orange"> 常见命令 </font></h3><p>这些命令可以单独使用, 无需指定<code>-project</code>、<code>-workspace</code>和<code>-scheme</code></p><blockquote><p>   使用帮助<br>   xcodebuild -help<br>   man xcodebuild</p></blockquote><blockquote><p>   查看当前目录中的Targets、Configurations和Schemes<br>   xcodebuild -list [[-project <projectname>]|[-workspace <workspacename>]] [-json]</workspacename></projectname></p></blockquote><blockquote><p>   查看已安装的SDK<br>   xcodebuild -showsdks</p></blockquote><blockquote><p>   查看版本号<br>   xcodebuild -version</p></blockquote><blockquote><p>   查看简洁用法<br>   xcodebuild -usage</p></blockquote><p>默认第一个target,和默认的configuration<br>对于Xcode workspace, 需要指定<code>-workspace</code>和<code>-scheme</code><br>对于Xcode project,如果有多个project, 你需要指定<code>-project</code></p><blockquote><p>常用格式一<br>xcodebuild [-project name.xcodeproj] [[-target targetname] … | -alltargets] -configuration configurationname] -sdk [sdkfullpath | sdkname]] [action …] [buildsetting=value …] [-userdefault=value …]</p></blockquote><blockquote><p>常用格式二<br>xcodebuild [-project name.xcodeproj] -scheme schemename [[-destination destinationspecifier] …] [-destination-timeout value] -configuration configurationname] -sdk [sdkfullpath | sdkname]] [action …] buildsetting=value …] [-userdefault=value …]</p></blockquote><blockquote><p>常用格式三<br>xcodebuild -workspace name.xcworkspace -scheme schemename [[-destination destinationspecifier] …] [-destination-timeout value] -configuration configurationname] [-sdk [sdkfullpath | sdkname]] [action …] [buildsetting=value …] [-userdefault=value …]</p></blockquote><blockquote><p>常用格式四<br>xcodebuild -exportArchive -archivePath xcarchivepath -exportPath destinationpath -exportOptionsPlist path</p></blockquote><blockquote><p>Xcode project常见使用命令</p><blockquote><p>clean<br>xcodebuild clean -configuration Debug/Release -alltargets -project name.xcodeproj</p></blockquote><blockquote><p>build<br>xcodebuild build -configuration Debug/Release -project name.xcodeproj</p></blockquote><blockquote><p>archive<br>xcodebuild archive -configuration Debug/Release -project name.xcodeproj -archivePath xcarchivepath</p></blockquote><blockquote><p>导出ipa<br>xcodebuild -exportArchive -archivePath xcarchivepath -exportPath destinationpath -exportOptionsPlist path</p></blockquote></blockquote><blockquote><p>Xcode workspace常见使用命令<br>clean</p><blockquote><p>xcodebuild clean -configuration Debug/Release -alltargets -workspace name.xcworkspace -scheme schemename</p></blockquote><blockquote><p>build<br>xcodebuild build -configuration Debug/Release -workspace name.xcworkspace -scheme schemename</p></blockquote><blockquote><p>archive<br>xcodebuild archive -configuration Debug/Release -workspace name.xcworkspace -scheme schemename -archivePath xcarchivepath</p></blockquote><blockquote><p>导出ipa<br>xcodebuild -exportArchive -archivePath xcarchivepath -exportPath destinationpath -exportOptionsPlist path</p></blockquote></blockquote><h3 id="常见action"><a href="#常见action" class="headerlink" title=" 常见action "></a><font color="orange"> 常见action </font></h3><blockquote><p>build<br>编译</p></blockquote><blockquote><p>build-for-testing<br>编译并且运行单元测试</p></blockquote><blockquote><p>analyze<br>分析</p></blockquote><blockquote><p>archive<br>存档</p></blockquote><blockquote><p>test</p></blockquote><blockquote><p>test-without-building</p></blockquote><blockquote><p>install-src<br>复制资源到SRCROOT</p></blockquote><blockquote><p>install<br>安装</p></blockquote><blockquote><p>clean<br>清理</p></blockquote><h3 id="exportOptionsPlist"><a href="#exportOptionsPlist" class="headerlink" title=" exportOptionsPlist "></a><font color="orange"> exportOptionsPlist </font></h3><p>这个文件可以自己生成, 但是推荐使用Xcode打包编译后, 选择相应的App Store、Ad Hoc、Development导出IPA后, 导出目录中会有一个相应的<code>ExportOptions.plist</code>文件, 这样出错的几率小很多。</p><p>Available keys for -exportOptionsPlist:</p><table><thead><tr><th style="text-align:center">Key</th><th style="text-align:center">Value</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">compileBitcode</td><td style="text-align:center">Bool</td><td style="text-align:center">For non-App Store exports, should Xcode re-compile the app from bitcode? Defaults to YES.</td></tr><tr><td style="text-align:center">destination</td><td style="text-align:center">String</td><td style="text-align:center">Determines whether the app is exported locally or uploaded to Apple. Options are export or upload. The available options vary based on the selected distribution method. Defaults to export.</td></tr><tr><td style="text-align:center">embedOnDemandResourcesAssetPacksInBundle</td><td style="text-align:center">Bool</td><td style="text-align:center">For non-App Store exports, if the app uses On Demand Resources and this is YES, asset packs are embedded in the app bundle so that the app can be tested without a server to host asset packs. Defaults to YES unless onDemandResourcesAssetPacksBaseURL is specified.</td></tr><tr><td style="text-align:center">generateAppStoreInformation</td><td style="text-align:center">Bool</td><td style="text-align:center">For App Store exports, should Xcode generate App Store Information for uploading with iTMSTransporter? Defaults to NO.</td></tr><tr><td style="text-align:center">iCloudContainerEnvironment</td><td style="text-align:center">String</td><td style="text-align:center">If the app is using CloudKit, this configures the “com.apple.developer.icloud-container-environment” entitlement. Available options vary depending on the type of provisioning profile used, but may include: Development and Production.</td></tr><tr><td style="text-align:center">installerSigningCertificate</td><td style="text-align:center">String</td><td style="text-align:center">For manual signing only. Provide a certificate name, SHA-1 hash, or automatic selector to use for signing. Automatic selectors allow Xcode to pick the newest installed certificate of a particular type. The available automatic selectors are “Mac Installer Distribution” and “Developer ID Installer”. Defaults to an automatic certificate selector matching the current distribution method.</td></tr><tr><td style="text-align:center">manifest</td><td style="text-align:center">Dictionary</td><td style="text-align:center">non-App Store exports, users can download your app over the web by opening your distribution manifest file in a web browser. To generate a distribution manifest, the value of this key should be a dictionary with three sub-keys: appURL, displayImageURL, fullSizeImageURL. The additional sub-key assetPackManifestURL is required when using on-demand resources.</td></tr><tr><td style="text-align:center">method</td><td style="text-align:center">String</td><td style="text-align:center">Describes how Xcode should export the archive. Available options: app-store, validation, package, ad-hoc, enterprise, development, developer-id, and mac-application. The list of options varies based on the type of archive. Defaults to development.</td></tr><tr><td style="text-align:center">onDemandResourcesAssetPacksBaseURL</td><td style="text-align:center">String</td><td style="text-align:center">non-App Store exports, if the app uses On Demand Resources and embedOnDemandResourcesAssetPacksInBundle isn’t YES, this should be a base URL specifying where asset packs are going to be hosted. This configures the app to download asset packs from the specified URL.</td></tr><tr><td style="text-align:center">provisioningProfiles</td><td style="text-align:center">Dictionary</td><td style="text-align:center">For manual signing only. Specify the provisioning profile to use for each executable in your app. Keys in this dictionary are the bundle identifiers of executables; values are the provisioning profile name or UUID to use.</td></tr><tr><td style="text-align:center">signingCertificate</td><td style="text-align:center">String</td><td style="text-align:center">For manual signing only. Provide a certificate name, SHA-1 hash, or automatic selector to use for signing. Automatic selectors allow Xcode to pick the newest installed certificate of a particular type. The available automatic selectors are “Mac App Distribution”, “iOS Developer”, “iOS Distribution”, “Developer ID Application”, and “Mac Developer”. Defaults to an automatic certificate selector matching the current distribution method.</td></tr><tr><td style="text-align:center">signingStyle</td><td style="text-align:center">String</td><td style="text-align:center">The signing style to use when re-signing the app for distribution. Options are manual or automatic. Apps that were automatically signed when archived can be signed manually or automatically during distribution, and default to automatic. Apps that were manually signed when archived must be manually signed during distribtion, so the value of signingStyle is ignored.</td></tr><tr><td style="text-align:center">stripSwiftSymbols</td><td style="text-align:center">Bool</td><td style="text-align:center">Should symbols be stripped from Swift libraries in your IPA? Defaults to YES.</td></tr><tr><td style="text-align:center">teamID</td><td style="text-align:center">String</td><td style="text-align:center">Developer Portal team to use for this export. Defaults to the team used to build the archive.</td></tr><tr><td style="text-align:center">thinning</td><td style="text-align:center">String</td><td style="text-align:center">non-App Store exports, should Xcode thin the package for one or more device variants? Available options: <none> (Xcode produces a non-thinned universal app), <thin-for-all-variants> (Xcode produces a universal app and all available thinned variants), or a model identifier for a specific device (e.g. “iPhone7,1”). Defaults to <none>.</none></thin-for-all-variants></none></td></tr><tr><td style="text-align:center">uploadBitcode</td><td style="text-align:center">Bool</td><td style="text-align:center">For App Store exports, should the package include bitcode? Defaults to YES.</td></tr><tr><td style="text-align:center">uploadSymbols</td><td style="text-align:center">Bool</td><td style="text-align:center">For App Store exports, should the package include symbols? Defaults to YES.</td></tr></tbody></table><h2 id="自动上传到App-Store或者蒲公英"><a href="#自动上传到App-Store或者蒲公英" class="headerlink" title=" 自动上传到App Store或者蒲公英 "></a><font color="orange"> 自动上传到App Store或者蒲公英 </font></h2><h3 id="自动上传到App-Store"><a href="#自动上传到App-Store" class="headerlink" title=" 自动上传到App Store "></a><font color="orange"> 自动上传到App Store </font></h3><blockquote><p>使用altool上传, 需要ApplID和密码<br>/Applications/Xcode.app/Contents/Applications/Application\ Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool –validate-app -f ipaPath -u AppleID -p password -t ios –output-format xml</p></blockquote><h3 id="自动上传到蒲公英"><a href="#自动上传到蒲公英" class="headerlink" title=" 自动上传到蒲公英 "></a><font color="orange"> 自动上传到蒲公英 </font></h3><blockquote><p>使用Shell脚本<br>curl -F “file=xxx.ipa” -F “uKey=xxx” -F “_api_key=xxx” <a href="https://qiniu-storage.pgyer.com/apiv1/app/upload" target="_blank" rel="noopener">https://qiniu-storage.pgyer.com/apiv1/app/upload</a></p></blockquote><h2 id="结束"><a href="#结束" class="headerlink" title=" 结束 "></a><font color="orange"> 结束 </font></h2><p>这里我就不放脚本了, 自己动手丰衣足食~~~<br>可以根据自己项目的配置, 个性化自己的打包脚本!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://47.96.147.179/images/iOS/iOS_auto_build_ipa.jpeg&quot; alt=&quot;hello&quot; style=&quot;width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近闲暇时间研究了一下Xcode自动编译、打包以及通过脚本更改一个配置文件, 主要涉及的命令如下: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xcpretty&lt;ul&gt;
&lt;li&gt;美化xcodebuild的输出日志&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;xcodebuild&lt;ul&gt;
&lt;li&gt;苹果发布自动构建的工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PlistBuddy&lt;ul&gt;
&lt;li&gt;Mac自带的专门解析plist的小工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;grep&lt;ul&gt;
&lt;li&gt;文本搜索工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;awk&lt;ul&gt;
&lt;li&gt;文本分析工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sed&lt;ul&gt;
&lt;li&gt;文本编辑工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里只是简单介绍了这些命令的几种用法, 需要深入了解的可自行搜索学习。&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="Xcode" scheme="http://yoursite.com/tags/Xcode/"/>
    
      <category term="持续集成" scheme="http://yoursite.com/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7安装SS服务端以及相关客户端</title>
    <link href="http://yoursite.com/2018/04/19/CentOS%207%E5%AE%89%E8%A3%85Shadowsocks%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/04/19/CentOS 7安装Shadowsocks服务端以及相关的客户端使用/</id>
    <published>2018-04-19T06:40:11.000Z</published>
    <updated>2019-04-29T08:39:51.632Z</updated>
    
    <content type="html"><![CDATA[<p>最近入手一个相对便宜的($8.5/年)<a href="https://www.neq3host.com" target="_blank" rel="noopener">VPS服务器</a>, 支持支付宝支付, IP是纽约的, 延时大约300ms, 对于我这种要求不是很高的用户来说足够了, 用途么你懂的^.^</p><a id="more"></a><h2 id="安装CentOS服务端ss程序"><a href="#安装CentOS服务端ss程序" class="headerlink" title="安装CentOS服务端ss程序"></a><font color="orange">安装CentOS服务端ss程序</font></h2><ul><li>安装系统<ul><li>购买好之后VPS之后, 我们安装好操作系统, 选择CentOS 7.</li></ul></li><li><p>安装SS服务</p><ul><li><p>修改系统时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data -s &apos;19/04/2018 14:40:11&apos; //这里改成当前时间</span><br><span class="line">hwclock -w  //将修改后的时间写入硬件</span><br></pre></td></tr></table></figure></li><li><p>安装ss服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks-libev.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev.sh</span><br><span class="line"></span><br><span class="line">chmod +x shadowsocks-libev.sh</span><br><span class="line"></span><br><span class="line">./shadowsocks-libev.sh 2&gt;&amp;1 | tee shadowsocks-libev.log</span><br></pre></td></tr></table></figure><ul><li>安装过程中会提示设置密码、端口和加密方式(加密方式推荐chacha20, 速度快安全).</li></ul></li></ul></li><li>启动、停止、重启和状态命令<ul><li>启动：<code>/etc/init.d/shadowsocks start</code></li><li>停止：<code>/etc/init.d/shadowsocks stop</code></li><li>重启：<code>/etc/init.d/shadowsocks restart</code></li><li>查看状态：<code>/etc/init.d/shadowsocks status</code></li></ul></li></ul><h2 id="安装BBR加速服务"><a href="#安装BBR加速服务" class="headerlink" title="安装BBR加速服务"></a><font color="orange">安装BBR加速服务</font></h2><p>BBR简称TCP-BBR拥塞控制算法，目的是要尽量跑满带宽, 并且尽量不要有排队的情况, 提升VPS网速效果明显。BBR算法出自谷歌.</p><ul><li><p>更新系统&amp;&amp;安装内核</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum update -y</span><br><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br><span class="line">yum --enablerepo=elrepo-kernel install kernel-ml</span><br><span class="line">grub2-set-default 0</span><br></pre></td></tr></table></figure></li><li><p>重启系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure></li><li><p>配置tcp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#编辑配置文件</span><br><span class="line">vi /etc/sysctl.conf</span><br><span class="line">#加入如下两行配置信息</span><br><span class="line">net.core.default_qdisc = fq</span><br><span class="line">net.ipv4.tcp_congestion_control = bbr</span><br></pre></td></tr></table></figure></li><li><p>运行BBR服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#运行BBR服务</span><br><span class="line">sysctl -p</span><br><span class="line">#查看BBR服务是否生效</span><br><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure></li></ul><h2 id="相关客户端"><a href="#相关客户端" class="headerlink" title="相关客户端"></a><font color="orange">相关客户端</font></h2><ul><li>iOS可以使用PP助手下载安装<code>Shadowrocket</code></li><li>Mac和Windows: 使用<code>Shadowsocks客户端</code></li></ul><h3 id="CentOS-7使用ss客户端"><a href="#CentOS-7使用ss客户端" class="headerlink" title="CentOS 7使用ss客户端"></a><font color="orange">CentOS 7使用ss客户端</font></h3><ul><li><p>安装epel源、安装pip包管理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install epel-release</span><br><span class="line">sudo yum -y install python-pip</span><br></pre></td></tr></table></figure></li><li><p>安装Shadowsocks客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install shadowsocks</span><br></pre></td></tr></table></figure></li><li><p>配置Shadowsocks连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    # Shadowsocks服务器地址</span><br><span class="line">    &quot;server&quot;:&quot;x.x.x.x&quot;,</span><br><span class="line">    # Shadowsocks服务器端口</span><br><span class="line">    &quot;server_port&quot;:1035,</span><br><span class="line">    # 本地IP</span><br><span class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    # 本地端口</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    # Shadowsocks连接密码  </span><br><span class="line">    &quot;password&quot;:&quot;password&quot;,</span><br><span class="line">    # 等待超时时间 </span><br><span class="line">    &quot;timeout&quot;:300,  </span><br><span class="line">    # 加密方式</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,  </span><br><span class="line">    # true或false。开启fast_open以降低延迟，但要求Linux内核在3.7+</span><br><span class="line">    &quot;fast_open&quot;: false,  </span><br><span class="line">    #工作线程数 </span><br><span class="line">    &quot;workers&quot;: 1  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置自启动 </p><ul><li><code>vi /etc/systemd/system/shadowsocks.service</code></li><li>添加以下内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks</span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStart=/usr/bin/sslocal -c /etc/shadowsocks/shadowsocks.json</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li></ul></li><li><p>开机启动、启动、重启、停止、状态</p><ul><li>开机启动: <code>systemctl enable shadowsocks.service</code></li><li>启动: <code>systemctl start shadowsocks.service</code></li><li>重启: <code>systemctl restart shadowsocks.service</code></li><li>停止: <code>systemctl stop shadowsocks.service</code></li><li>状态<code>systemctl status shadowsocks.service</code></li></ul></li><li><p>如果加密方式选择的是<code>chacha20</code>, 会启动不成功, 需要编译 libsodium 以支持 chacha20 加密方式</p><ul><li><p>安装相关开发工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall &quot;Development Tools&quot; -y</span><br><span class="line">yum install wget -y</span><br></pre></td></tr></table></figure></li><li><p>下载 libsodium 最新版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#官网地址</span><br><span class="line">wget https://download.libsodium.org/libsodium/releases/LATEST.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xzvf LATEST.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>进入解压文件夹, 生成配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd libsodium*</span><br><span class="line"></span><br><span class="line">./configure</span><br></pre></td></tr></table></figure></li><li><p>编译并安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j8 &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>添加运行库位置并加载运行库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo /usr/local/lib &gt; /etc/ld.so.conf.d/usr_local_lib.conf</span><br><span class="line"></span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure></li></ul></li><li><p>验证Shadowsocks客户端服务是否正常运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#会返回你的Shadowsock服务器IP</span><br><span class="line">curl --socks5 127.0.0.1:1080 http://httpbin.org/ip</span><br></pre></td></tr></table></figure></li><li><p>安装配置privoxy,Shadowsocks使用的socks5协议,而终端很多工具目前只支持http和https等协议，所以我们要用工具把socks5转成http协议。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install privoxy -y</span><br><span class="line">systemctl enable privoxy</span><br><span class="line">systemctl start privoxy</span><br><span class="line">systemctl status privoxy</span><br></pre></td></tr></table></figure></li><li><p>配置privoxy, <code>vi /etc/privoxy/config</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listen-address 127.0.0.1:8118 # 8118 是默认端口，不用改</span><br><span class="line">forward-socks5t / 127.0.0.1:1080 . #转发到本地端口，注意最后有个点, 端口是上面ss安装时的本地端口</span><br></pre></td></tr></table></figure></li><li><p>设置http、https代理, <code>vi /etc/profile</code>在最后添加如下信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PROXY_HOST=127.0.0.1</span><br><span class="line">export http_proxy=http://$PROXY_HOST:8118</span><br><span class="line">export https_proxy=http://$PROXY_HOST:8118</span><br></pre></td></tr></table></figure></li><li><p>重载环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>测试代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -I www.google.com </span><br><span class="line">#查看ip信息</span><br><span class="line">curl ip.cn</span><br></pre></td></tr></table></figure></li><li><p>取消使用代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while read var; do unset $var; done &lt; &lt;(env | grep -i proxy | awk -F= &apos;&#123;print $1&#125;&apos;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近入手一个相对便宜的($8.5/年)&lt;a href=&quot;https://www.neq3host.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VPS服务器&lt;/a&gt;, 支持支付宝支付, IP是纽约的, 延时大约300ms, 对于我这种要求不是很高的用户来说足够了, 用途么你懂的^.^&lt;/p&gt;
    
    </summary>
    
    
      <category term="Shadowsocks" scheme="http://yoursite.com/tags/Shadowsocks/"/>
    
      <category term="VPS" scheme="http://yoursite.com/tags/VPS/"/>
    
      <category term="翻墙" scheme="http://yoursite.com/tags/%E7%BF%BB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>Swift中真机模拟器判断</title>
    <link href="http://yoursite.com/2018/04/16/iOS/Swift%E4%B8%AD%E7%9C%9F%E6%9C%BA%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%88%A4%E6%96%AD/"/>
    <id>http://yoursite.com/2018/04/16/iOS/Swift中真机模拟器判断/</id>
    <published>2018-04-16T02:47:33.000Z</published>
    <updated>2019-04-29T08:39:51.660Z</updated>
    
    <content type="html"><![CDATA[<p>在开发中经常会碰到一些库没有模拟器架构(i386,x86_64), 所以导致无法模拟器运行, 造成开发工作中相当不便。</p><a id="more"></a><h3 id="Objective-C中判断真机模拟器"><a href="#Objective-C中判断真机模拟器" class="headerlink" title="Objective-C中判断真机模拟器"></a><font color="orange">Objective-C中判断真机模拟器</font></h3><p>在Objective-C中, <code>TargetConditionals.h</code>中定义了宏<code>TARGET_OS_SIMULATOR</code>, 在模拟器SDK中值是1, 而真机中值是0.</p><p>所以, 我们可以Objective-C中使用下面的代码进行条件编译</p><blockquote><p>#if TARGET_IPHONE_SIMULATOR<br>//模拟器</p></blockquote><p>#define IS_SIMULATOR true</p><p>#else<br>//真机</p><p>#define IS_SIMULATOR false</p><p>#endif</p><h3 id="Swift中判断真机模拟器"><a href="#Swift中判断真机模拟器" class="headerlink" title="Swift中判断真机模拟器"></a><font color="orange">Swift中判断真机模拟器</font></h3><p>在Swift中<code>TARGET_IPHONE_SIMULATOR</code>已经弃用了, 如果使用下面的代码去判断会失效.</p><blockquote><p>#if !(TARGET_IPHONE_SIMULATOR)<br>//真机</p></blockquote><p>#endif</p><p>实测, 下面的宏是有效的</p><blockquote><p>#if !(arch(i386) || arch(x86_64))<br>//真机</p></blockquote><p>#else<br>//模拟器</p><p>#endif</p><p><font color="red">需要注意的是</font>: </p><blockquote><p>如果Swift项目中需要使用Objective-C代码, 那么在Objective-C代码和桥接文件中还是需要使用宏<code>TARGET_IPHONE_SIMULATOR</code>进行判断</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发中经常会碰到一些库没有模拟器架构(i386,x86_64), 所以导致无法模拟器运行, 造成开发工作中相当不便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot</title>
    <link href="http://yoursite.com/2018/03/20/Java%20Web/Spring%20Boot/"/>
    <id>http://yoursite.com/2018/03/20/Java Web/Spring Boot/</id>
    <published>2018-03-20T02:43:59.000Z</published>
    <updated>2019-04-29T08:39:51.648Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://47.96.147.179/images/java/Spring_Boot_pic.jpg" alt="hello" style="width: 40%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"></p><h2 id="什么是Spring-Boot"><a href="#什么是Spring-Boot" class="headerlink" title="什么是Spring Boot"></a><font color="orange">什么是Spring Boot</font></h2><p>随着动态语言的流行(Ruby、Groovy、Scala、Node.js、Python),Java开发显得格外笨重: 繁多的配置、低下的开发效率、复杂的部署流程.</p><p>Spring Boot应用而生, 它使用”习惯优于配置”的理念可以快速的搭建一个项目.使用Spring Boot很容易创建一个独立运行的(运行jar、内嵌Servlet容器)、基于Spring的项目.</p><p><a href="https://spring.io/projects/spring-boot#learn" target="_blank" rel="noopener">官方文档</a></p><a id="more"></a><h2 id="Spring-Boot核心功能"><a href="#Spring-Boot核心功能" class="headerlink" title="Spring Boot核心功能"></a><font color="orange">Spring Boot核心功能</font></h2><h3 id="独立运行的Spring项目"><a href="#独立运行的Spring项目" class="headerlink" title="独立运行的Spring项目"></a><font color="orange">独立运行的Spring项目</font></h3><p>Spring Boot可以以jar包的形式独立运行, 运行一个Spring Boot项目只需通过<code>java -jar xxx.jar</code>来运行.</p><h3 id="内嵌Servlet容器"><a href="#内嵌Servlet容器" class="headerlink" title="内嵌Servlet容器"></a><font color="orange">内嵌Servlet容器</font></h3><p>Spring Boot可以选择内嵌Tomcat、Jetty或者Undertow, 这样我们无需以war包的形式部署项目.</p><h3 id="提供starter简化Maven配置"><a href="#提供starter简化Maven配置" class="headerlink" title="提供starter简化Maven配置"></a><font color="orange">提供starter简化Maven配置</font></h3><p>Spring提供了一系列的starter pom来简化Maven的依赖加载, 例如, 当你使用了spring-boot-starter-web时会自动加载相关jar包.</p><h3 id="自动配置Spring"><a href="#自动配置Spring" class="headerlink" title="自动配置Spring"></a><font color="orange">自动配置Spring</font></h3><p>Spring Boot会根据在类路径中的jar包、类, 为jar包里面的类自动配置Bean, 我们也可以自定义自动配置.</p><h3 id="准生成的应用监控"><a href="#准生成的应用监控" class="headerlink" title="准生成的应用监控"></a><font color="orange">准生成的应用监控</font></h3><p>Spring Boot提供基于http、ssh、telnet对运行时的项目进行监控.</p><h3 id="无代码生成和xml配置"><a href="#无代码生成和xml配置" class="headerlink" title="无代码生成和xml配置"></a><font color="orange">无代码生成和xml配置</font></h3><p>Spring Boot可以不借助代码来实现, 可以通过条件注解来实现, 这是Spring 4.x提供的新特性.<br>Spring 4.x提倡使用Java配置和注解配置组合, 而Spring Boot不需要任何xml配置即可实现Spring的所有配置.</p><h2 id="Spring-Boot快速开始"><a href="#Spring-Boot快速开始" class="headerlink" title="Spring Boot快速开始"></a><font color="orange">Spring Boot快速开始</font></h2><h3 id="使用网站快速构建项目"><a href="#使用网站快速构建项目" class="headerlink" title="使用网站快速构建项目"></a><font color="orange">使用网站快速构建项目</font></h3><ul><li>1、<a href="http://start.spring.io/" target="_blank" rel="noopener">快速构建网址</a><ul><li>1.1、这里填写项目信息, 选择Maven项目, Java语言, Spring Boot的版本.</li><li>1.2、选择项目所用的技术, 这里每一项技术都是Spring boot的starter pom.</li><li>1.3、Generate Project下载项目</li></ul></li></ul><h3 id="使用开发工具快速构建"><a href="#使用开发工具快速构建" class="headerlink" title="使用开发工具快速构建"></a><font color="orange">使用开发工具快速构建</font></h3><ul><li>Eclipse<ul><li>新建一个项目选择<code>Spring Starter Project</code></li><li>填写项目信息和使用的技术</li></ul></li><li>Intellij IDEA<ul><li>新建一个项目选择<code>Spring Initializr</code></li><li>填写项目信息和使用的技术</li></ul></li></ul><h3 id="手工创建Spring-Boot项目"><a href="#手工创建Spring-Boot项目" class="headerlink" title="手工创建Spring Boot项目"></a><font color="orange">手工创建Spring Boot项目</font></h3><ul><li>首先创建Maven项目</li><li><p>修改pom.xml, 添加Spring Boot的父级依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改pom.xml, 在dependencies添加Web支持的<code>starter pom</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改pom.xml, 添加Spring Boot的编译插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring-Boot-CLI"><a href="#Spring-Boot-CLI" class="headerlink" title="Spring Boot CLI"></a><font color="orange">Spring Boot CLI</font></h2><p>Spring Boot CLI是Spring Boot提供的控制台命令工具.在Spring Boot CLI中可以跑Groovy脚本<br><a href="https://repo.spring.io/milestone/org/springframework/boot/spring-boot-cli" target="_blank" rel="noopener">下载地址</a></p><h3 id="Windows下安装"><a href="#Windows下安装" class="headerlink" title="Windows下安装"></a><font color="orange">Windows下安装</font></h3><p>下载Spring-boot-cli, 设置环境变量和path即可</p><h3 id="Linux下安装"><a href="#Linux下安装" class="headerlink" title="Linux下安装"></a><font color="orange">Linux下安装</font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap pivotal/tap</span><br><span class="line">brew install springboot</span><br></pre></td></tr></table></figure><h3 id="验证安装是否成功"><a href="#验证安装是否成功" class="headerlink" title="验证安装是否成功"></a><font color="orange">验证安装是否成功</font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring --version</span><br></pre></td></tr></table></figure><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a><font color="orange">创建项目</font></h3><ul><li><p>查看现有技术列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring init --list</span><br></pre></td></tr></table></figure></li><li><p>初始化项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring init --build=maven --java-version=1.8 --dependencies=web --packaging=jar --boot-version=2.0.2.RELEASE --groupId=com.coppco --artifactId=springboot</span><br></pre></td></tr></table></figure></li></ul><h3 id="Spring-Boot-CLI发布一个简单服务"><a href="#Spring-Boot-CLI发布一个简单服务" class="headerlink" title="Spring Boot CLI发布一个简单服务"></a><font color="orange">Spring Boot CLI发布一个简单服务</font></h3><ul><li><p>新建<code>hello.groovy</code>文件, 内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/getTeacherInfo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Teacher <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Teacher teacher = <span class="keyword">new</span> Teacher(<span class="string">"张三"</span>, <span class="string">"29"</span>);</span><br><span class="line"><span class="keyword">return</span> teacher;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name, String age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行该脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring run hello.groovy -- --server.port=9000</span><br></pre></td></tr></table></figure></li><li><p>访问对应的url即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/getTeacherInfo</span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring-Boot-详解"><a href="#Spring-Boot-详解" class="headerlink" title="Spring Boot 详解"></a><font color="orange">Spring Boot 详解</font></h2><h3 id="入口类和-SpringBootApplication"><a href="#入口类和-SpringBootApplication" class="headerlink" title="入口类和@SpringBootApplication"></a><font color="orange">入口类和@SpringBootApplication</font></h3><ul><li><p>入口类<br>Spring Boot通常默认有一个名为<code>*Application</code>的入口类(当然也可以更改为其他名称), 入口类有一个main方法, 这个方法其实就是一个标准的Java应用的入口方法. 在main方法中<code>SpringApplication.run(xxx.class, args)</code>启动Spring Boot应用项目.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ImportResource</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Starter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Starter.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@SpringBootApplication<br><code>@SpringBootApplication</code>是一个组合注解, 它组合了<code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code>. 而<code>@SpringBootConfiguration</code>也是一个组合注解: 它组合了<code>@Configuration</code>.<br>若不使用<code>@SpringBootApplication</code>, 则可以使用<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code>和<code>@Configuration</code>代替.<br><font color="red">Spring Boot会自动扫描<code>@SpringBootApplication</code>注解所在类的同级包以及下级包里的Bean. 建议入口类放置在<code>groupId+arctifactId</code>组合的包名下.</font></p><ul><li>@EnableAutoConfiguration<ul><li>让Spring Boot根据类路径中的jar包依赖为当前项目进行自动配置</li><li>例如: 当添加了<code>spring-boot-starter-web</code>依赖, 会自动添加<code>Tomcat</code>、<code>Spring MVC</code>的依赖.</li></ul></li></ul></li><li>@ImportResource<br>虽然Spring 4.x完全可以不使用xml方式来配置相关配置, 但是我们任然希望项目的一些配置使用xml方式来进行配置(如数据库相关的配置), 那么我们可以使用该注解引入配置文件.</li></ul><h3 id="关闭特定的自动配置"><a href="#关闭特定的自动配置" class="headerlink" title="关闭特定的自动配置"></a><font color="orange">关闭特定的自动配置</font></h3><p>使用@SpringBootApplication注解的exclude参数:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关闭数据库默认自动配置</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span>(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="定制Banner"><a href="#定制Banner" class="headerlink" title="定制Banner"></a><font color="orange">定制Banner</font></h3><ul><li>修改Banner<ul><li>在Spring Boot启动时会有一个默认图案</li><li>在<code>src/main/resources</code>下新建一个banner.txt</li><li>通过<a href="http://patorjk.com" target="_blank" rel="noopener">图像生成网站</a>生成字符, 并拷贝到banner.txt中</li><li>再次启动项目</li></ul></li><li>关闭Banner<br>最新版本在main方法中修改: <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1: </span></span><br><span class="line">SpringApplication application = <span class="keyword">new</span> SpringApplication(Starter.class);</span><br><span class="line">        application.setBannerMode(Banner.Mode.OFF);</span><br><span class="line">        application.run(args);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2:</span></span><br><span class="line"><span class="keyword">new</span> SpringApplicationBuilder(Starter.class)</span><br><span class="line">                .bannerMode(Banner.Mode.OFF)</span><br><span class="line">                .run(args);</span><br></pre></td></tr></table></figure></li></ul><p>如果是比较老的版本:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1: </span></span><br><span class="line">SpringApplication application = <span class="keyword">new</span> SpringApplication(Starter.class);</span><br><span class="line">application.setShowBanner(<span class="keyword">false</span>);</span><br><span class="line">application.run(args);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2:</span></span><br><span class="line"><span class="keyword">new</span> SpringApplicationBuilder(Starter.class)</span><br><span class="line">                .showBanner(<span class="keyword">false</span>)</span><br><span class="line">                .run(args);</span><br></pre></td></tr></table></figure></p><h3 id="Spring-Boot的配置文件"><a href="#Spring-Boot的配置文件" class="headerlink" title="Spring Boot的配置文件"></a><font color="orange">Spring Boot的配置文件</font></h3><p>Spring Boot使用一个全局的配置文件<code>application.properties</code>或者<code>application.yml</code>放置在<code>src/main/resources</code>中.</p><p>Spring Boot不仅支持常规的properties配置文件, 还支持yaml语言的配置文件.而Intellij IDEA只对Spring Boot的properties配置提供自动提示功能, 所以推荐使用properties进行配置.</p><h4 id="更改默认配置"><a href="#更改默认配置" class="headerlink" title="更改默认配置"></a><font color="orange">更改默认配置</font></h4><p>如将Tomcat默认端口号8080更改为9090, 并将默认访问路径从<code>/</code>更改为<code>/hello</code>.<br>最新版本的Spring Boot在<code>application.properties</code>中添加:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#端口</span><br><span class="line">server.port=9090</span><br><span class="line">#访问路径</span><br><span class="line">server.servlet.context-path=/hello</span><br></pre></td></tr></table></figure></p><p>其他的很多属性都可以修改.</p><h4 id="Spring-Boot使用xml配置"><a href="#Spring-Boot使用xml配置" class="headerlink" title="Spring Boot使用xml配置"></a><font color="orange">Spring Boot使用xml配置</font></h4><p>以前方式的xml配置也是支持的,  在入口类上使用<code>@ImportResource</code>注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource</span>(<span class="string">"classpath:applicationContext.xml"</span>)</span><br></pre></td></tr></table></figure></p><h3 id="starter-pom"><a href="#starter-pom" class="headerlink" title="starter pom"></a><font color="orange">starter pom</font></h3><p>Spring Boot为我们提供了简化企业级开发绝大多数场景的starter pom, 只要使用了对应的starter pom, Spring Boot就会自动配置Bean.</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">spring-boot-starter</td><td style="text-align:center">SpringBoot核心starter，包含自动配置、日志、yaml配置文件的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-actuator</td><td style="text-align:center">用于使用Spring Boot的Actuator，它提供了production ready功能来帮助你监控和管理应用程序</td></tr><tr><td style="text-align:center">spring-boot-starter-activemq</td><td style="text-align:center">用于使用Apache ActiveMQ实现JMS消息</td></tr><tr><td style="text-align:center">spring-boot-starter-amqp</td><td style="text-align:center">用于使用Spring AMQP和Rabbit MQ</td></tr><tr><td style="text-align:center">spring-boot-starter-aop</td><td style="text-align:center">使用Spring-AOP和AspectJ支持面向切面编程</td></tr><tr><td style="text-align:center">spring-boot-starter-artemis</td><td style="text-align:center">使用Apache Artemis实现JMS消息</td></tr><tr><td style="text-align:center">spring-boot-starter-batch</td><td style="text-align:center">对Spring Batch的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-cache</td><td style="text-align:center">用于使用Spring框架的缓存支持</td></tr><tr><td style="text-align:center">spring-boot-starter-cloud-connectors</td><td style="text-align:center">对云平台（Cloud Foundry、Heroku）提供的服务提供简化的连接方式</td></tr><tr><td style="text-align:center">spring-boot-starter-data-cassandra</td><td style="text-align:center">用于使用分布式数据库 - Cassandra和Spring Data Cassandra</td></tr><tr><td style="text-align:center">spring-boot-starter-data-couchbase</td><td style="text-align:center">用于使用基于文档的数据库Couchbase和Spring Data Couchbase</td></tr><tr><td style="text-align:center">spring-boot-starter-data-elasticsearch</td><td style="text-align:center">通过Spring Data Elasticsearch提供对Elasticsearch的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-data-jpa</td><td style="text-align:center">对JPA的支持，包含Spring-data-jpa、Spring-orm和Hibernate</td></tr><tr><td style="text-align:center">spring-boot-starter-data-ldap</td></tr><tr><td style="text-align:center">spring-boot-starter-data-mongodb</td><td style="text-align:center">用于使用基于文档的数据库MongoDB和Spring Data MongoDB</td></tr><tr><td style="text-align:center">spring-boot-starter-data-neo4j</td><td style="text-align:center">用于使用图数据库Neo4j和Spring Data Neo4j</td></tr><tr><td style="text-align:center">spring-boot-starter-data-redis</td><td style="text-align:center">通过Spring-data-redis提供对Redis的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-data-rest</td><td style="text-align:center">通过Spring-data-rest-webmvc将Spring Data repository暴露为REST形式的服务</td></tr><tr><td style="text-align:center">spring-boot-starter-data-solr</td><td style="text-align:center">通过Spring-data-solr提供对Apache Solr的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-freemarker</td><td style="text-align:center">对freemarker模板引擎的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-groovy-templates</td><td style="text-align:center">对groovy模板引擎的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-hateoas</td><td style="text-align:center">用于使用Spring MVC和Spring HATEOAS实现基于超媒体的RESTful web应用</td></tr><tr><td style="text-align:center">spring-boot-starter-integration</td><td style="text-align:center">对系统集成框架Spinrg-integration的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-jdbc</td><td style="text-align:center">对JDBC数据库的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-jersey</td><td style="text-align:center">用于使用JAX-RS和Jersey构建RESTful web应用，可使用spring-boot-starter-web替代</td></tr><tr><td style="text-align:center">spring-boot-starter-jooq</td><td style="text-align:center">用于使用JOOQ访问SQL数据库，可使用springboot-starter-data-jpa或spring-boot-starter-jdbc替代</td></tr><tr><td style="text-align:center">spring-boot-starter-jta-atomikos</td><td style="text-align:center">通过atomikos对分布式事务的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-jta-bitronix</td><td style="text-align:center">通过bitronix对分布式事务的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-jta-narayana</td><td style="text-align:center">Spring Boot Narayana JTA Starter</td></tr><tr><td style="text-align:center">spring-boot-starter-log4j2</td><td style="text-align:center">支持使用Log4J日志框架</td></tr><tr><td style="text-align:center">spring-boot-starter-logging</td><td style="text-align:center">用于使用Logback记录日志，默认的日志starter</td></tr><tr><td style="text-align:center">spring-boot-starter-mail</td><td style="text-align:center">用于使用Java Mail和Spring框架email发送支持</td></tr><tr><td style="text-align:center">spring-boot-starter-mobile</td><td style="text-align:center">对Spring mobile的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-mustache</td><td style="text-align:center">对mustache模板引擎的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-security</td><td style="text-align:center">对Spring sercurity的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-social-facebook</td><td style="text-align:center">通过Spring-social-facebook提供对Facebook的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-social-linkin</td><td style="text-align:center">通过Spring-social-linkin提供对Linkin的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-social-twitter</td><td style="text-align:center">通过Spring-social-twitter提供对Twitter的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-test</td><td style="text-align:center">对常用的测试框架JUnit、Hamcrest和Mockito的支持，包含Spring-tests模块</td></tr><tr><td style="text-align:center">spring-boot-starter-thymeleaf</td><td style="text-align:center">对thymeleaf引擎的支持，包含于Spring整合的配置</td></tr><tr><td style="text-align:center">spring-boot-starter-tomcat</td><td style="text-align:center">SpringBoot默认的Servlet容器</td></tr><tr><td style="text-align:center">spring-boot-starter-jetty</td><td style="text-align:center">使用Jetty作为Servlet容器</td></tr><tr><td style="text-align:center">spring-boot-starter-undertow</td><td style="text-align:center">使用Undertow作为Servlet容器</td></tr><tr><td style="text-align:center">spring-bootstarter-remote-shell</td><td style="text-align:center">用于通过SSH，使用CRaSH远程shell监控，管理你的应用</td></tr><tr><td style="text-align:center">spring-boot-starter-validation</td><td style="text-align:center">用于使用Hibernate Validator实现Java Bean校验</td></tr><tr><td style="text-align:center">spring-boot-starter-web</td><td style="text-align:center">用于使用Spring MVC构建web应用，包括RESTful。Tomcat是默认的内嵌容器</td></tr><tr><td style="text-align:center">spring-boot-starter-web-services</td><td style="text-align:center">对Spring Web Services的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-websocket</td><td style="text-align:center">对websocket开发的支持</td></tr></tbody></table><h3 id="外部配置"><a href="#外部配置" class="headerlink" title="外部配置"></a><font color="orange">外部配置</font></h3><h4 id="命令行参数配置"><a href="#命令行参数配置" class="headerlink" title="命令行参数配置"></a><font color="orange">命令行参数配置</font></h4><p>Spring Boot可以是基于jar包运行的, 打成jar包运行的可以修改端口等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xx.jar --service.port=9090</span><br></pre></td></tr></table></figure></p><h4 id="常规属性配置"><a href="#常规属性配置" class="headerlink" title="常规属性配置"></a><font color="orange">常规属性配置</font></h4><h5 id="Spring-Boot导入资源文件方式1"><a href="#Spring-Boot导入资源文件方式1" class="headerlink" title="Spring Boot导入资源文件方式1"></a><font color="orange">Spring Boot导入资源文件方式1</font></h5><p>直接在<code>application.properties</code>中添加字段即可, 然后使用<code>@Value(&quot;${key}&quot;)</code>取即可</p><h5 id="Spring-Boot导入资源文件方式2"><a href="#Spring-Boot导入资源文件方式2" class="headerlink" title="Spring Boot导入资源文件方式2"></a><font color="orange">Spring Boot导入资源文件方式2</font></h5><p>新建xxx.properties, 使用<code>@PropertySource</code>注解导入, 然后再使用<code>@Value(&quot;${key}&quot;)</code>取即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:xxx.properties"</span>)</span><br></pre></td></tr></table></figure></p><h4 id="类型安全的配置"><a href="#类型安全的配置" class="headerlink" title="类型安全的配置"></a><font color="orange">类型安全的配置</font></h4><p>除了<code>@Value(&quot;${key}&quot;)</code>注解注入每个值外, Spring Boot还提供使用<code>@ConfigurationProperties</code>将properties中的属性和一个Bean及其属性关联.</p><ul><li><p>首先在入口类添加哪个类进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;Teacher.class&#125;)</span><br></pre></td></tr></table></figure></li><li><p>如果入口类没有添加<code>@EnableConfigurationProperties</code>需要在Bean类那边添加<code>@Configuration</code>或者<code>@Component</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"teacher"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在Bean类上边添加<code>@ConfigurationProperties</code>并指定前缀</p></li><li><p>有时候会出现中文编码问题</p><ul><li><p>在<code>application.properties</code>中添加相关配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#设置spring-boot 编码格式</span><br><span class="line">banner.charset=UTF-8</span><br><span class="line">server.tomcat.uri-encoding=UTF-8</span><br><span class="line">spring.http.encoding.charset=UTF-8</span><br><span class="line">spring.http.encoding.enabled=true</span><br><span class="line">spring.http.encoding.force=true</span><br><span class="line">spring.messages.encoding=UTF-8</span><br></pre></td></tr></table></figure></li><li><p>修改properties的文件编码类型为utf-8</p></li><li>Intellij IDEA依次打开<code>File</code> -&gt; <code>Settings</code> -&gt; <code>Editor</code> -&gt; <code>File Encodings</code>, 将<code>Properties Files (*.properties)</code>下的<code>Default encoding for properties files</code>设置为<code>UTF-8</code>，将<code>Transparent native-to-ascii conversion</code>前的勾选上。</li><li>重启Intellij IDEA即可.</li></ul></li></ul><h3 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a><font color="orange">日志配置</font></h3><p>Spring Boot支持Java Util Logging、Log4J、Log4J2和Logback作为日志框架, 默认情况下, Spring Boot使用Logback作为日志框架.<br>在<code>application.properties</code>中修改相关配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#日志级别</span><br><span class="line">logging.level.org.springframework.web=DEBUG</span><br><span class="line">#日志文件</span><br><span class="line">logging.file=log.txt</span><br></pre></td></tr></table></figure></p><h3 id="Profile配置"><a href="#Profile配置" class="headerlink" title="Profile配置"></a><font color="orange">Profile配置</font></h3><p>Profile是Spring 用来针对不同的环境对不同的配置提供支持的, 全局Profile配置使用<code>application-{profile}.properties</code>(如application-dev.properties和application-product.properties), 通过在<code>application.properties</code>中设置来激活对应的环境.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#激活</span><br><span class="line">spring.profiles.active=dev</span><br><span class="line">#spring.profiles.active=product</span><br></pre></td></tr></table></figure></p><h2 id="Spring-Boot的Web开发"><a href="#Spring-Boot的Web开发" class="headerlink" title="Spring Boot的Web开发"></a><font color="orange">Spring Boot的Web开发</font></h2><p>Spring Boot提供了spring-boot-starter-web为Web开发予以支持, 它为我们提供了嵌入的Tomcat以及Spring MVC的依赖. 而Web相关的自动配置在<code>spring-boot-autoconfigure</code>的<code>org.springframework.boot.autoconfigure.web</code>下</p><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a><font color="orange">模板引擎</font></h3><p>Spring Boot提供了大量模板引擎, 包含FreeMarker、Groovy、Thymeleaf、Velocity和Mustache. Spring Boot推荐使用Thymeleaf作为模板引擎, 因为Thymeleaf提供了完美的Spring MVC支持.</p><h4 id="Thymeleaf基础知识"><a href="#Thymeleaf基础知识" class="headerlink" title="Thymeleaf基础知识"></a><font color="orange">Thymeleaf基础知识</font></h4><ul><li><p>首先添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>通过<code>xmlns:th=http://wwww.thymeleaf.org</code>命名空间, 将静态页面转为动态页面, 需要进行动态处理的元素将使用<code>th:</code>为前缀.</p></li><li>引用Web静态资源: <code>@{jquery-1.10.2.min.js}</code></li><li>访问model中的属性: 通过<code>${name}</code></li><li>迭代: 使用<code>th:each=&quot;person:${people}&quot;</code></li><li>判断: <code>${not #lists.isEmpty(people)}</code>判断perple是否为空, 还支持<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>等</li><li>JavaScript中访问model: <code>[[${name}]]</code></li></ul><h4 id="与SpringMVC的整合"><a href="#与SpringMVC的整合" class="headerlink" title="与SpringMVC的整合"></a><font color="orange">与SpringMVC的整合</font></h4><ul><li><p>xml配置方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"templateResolver"</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.templateresolver.ServletContextTemplateResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"servletContext"</span> <span class="attr">ref</span>=<span class="string">"servletContext"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".html"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateMode"</span> <span class="attr">value</span>=<span class="string">"HTML5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"engine"</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.SpringTemplateEngine"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateResolver"</span> <span class="attr">ref</span>=<span class="string">"templateResolver"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.thymeleaf.spring4.view.ThymeleafViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateEngine"</span> <span class="attr">ref</span>=<span class="string">"engine"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Java配置方式, 在配置类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ServletContext servletContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletContextTemplateResolver <span class="title">templateResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ServletContextTemplateResolver servletContextTemplateResolver = <span class="keyword">new</span> ServletContextTemplateResolver(servletContext);</span><br><span class="line">    servletContextTemplateResolver.setPrefix(<span class="string">"/WEB-INF/"</span>);</span><br><span class="line">    servletContextTemplateResolver.setSuffix(<span class="string">".html"</span>);</span><br><span class="line">    servletContextTemplateResolver.setTemplateMode(<span class="string">"HTML5"</span>);</span><br><span class="line">    <span class="keyword">return</span> servletContextTemplateResolver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SpringTemplateEngine <span class="title">templateEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SpringTemplateEngine engine = <span class="keyword">new</span> SpringTemplateEngine();</span><br><span class="line">    engine.setTemplateResolver(templateResolver());</span><br><span class="line">    <span class="keyword">return</span> engine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ThymeleafViewResolver <span class="title">thymeleafViewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ThymeleafViewResolver resolver = <span class="keyword">new</span> ThymeleafViewResolver();</span><br><span class="line">    resolver.setTemplateEngine(templateEngine());</span><br><span class="line">    <span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="与Spring-Boot的整合"><a href="#与Spring-Boot的整合" class="headerlink" title="与Spring Boot的整合"></a><font color="orange">与Spring Boot的整合</font></h4><p>Spring Boot和Thymeleaf整合很简单, Spring Boot会通过<code>org.springframework.autoconfigure.thymeleaf</code>包对Thymeleaf进行自动配置, 通过ThymeleafProperties源码我们可以看出, 在<code>application.properties</code>中可以通过<code>spring.thymeleaf</code>开头进行配置, 没有时会有默认值.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"spring.thymeleaf"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = StandardCharsets.UTF_8;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Web相关配置"><a href="#Web相关配置" class="headerlink" title="Web相关配置"></a><font color="orange">Web相关配置</font></h3><h4 id="Spring-Boot相关的自动配置"><a href="#Spring-Boot相关的自动配置" class="headerlink" title="Spring Boot相关的自动配置"></a><font color="orange">Spring Boot相关的自动配置</font></h4><ul><li>自动配置的ViewResolver<ul><li>ContentNegotiatingViewResolver: 代理给不同的ViewResolver来处理不同的view</li><li>BeanNameViewResolver: 会根据返回的字符串找对应的Bean的视图进行渲染</li><li>InternalResourceViewResolver: 很常用的ViewResolver, 通过设置前缀、后缀等得到实际页面</li></ul></li><li>自动配置的静态资源, 在自动配置类的<code>addResourceHandlers</code>方法中定义了如下自动配置<ul><li>类路径文件: <code>/static</code>、<code>/public</code>、<code>/resources</code>和<code>/META-INF/resources</code>文件夹下的静态文件直接映射为<code>/**</code>, 可以通过<code>http:/localhost:8080/**</code>访问.</li><li>webjar: webjar就是将常用的脚本框架封装在jar包中的jar包, 把<code>/META-INF/resources/webjars/</code>下的静态文件映射为<code>/webjar/**</code>, 可以通过<code>http:/localhost:8080/webjar/**</code>访问.</li></ul></li><li>自动配置的Formatter和Converter<ul><li>只要我们定义了Converter、GenericConverter和Formatter接口的实现类的Bean, 这些Bean会自动注册到Spring MVC中.</li></ul></li><li><p>自动配置的HTTPMessageConverters</p><ul><li>默认会加载<code>ByteArrayHttpMessageConverter</code>、<code>StringHttpMessageConverter</code>、<code>ResourceHttpMessageConverter</code>、<code>SourceHTTPMessageConverter</code>、<code>AllEncompassingFormHTTPMessageConverter</code>以及如果jackson的jar存在<code>MappingJackson2HTTPMessageConverter</code>和<code>MappingJackson2XmlHTTPMessageConverter</code>、gson的jar存在<code>GsonHTTPMessageConverter</code></li><li>自己新增时, 在配置类上<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HttpMessageConverter <span class="title">fastJsonHttpMessageConverters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.需要定义一个Convert转换消息的对象</span></span><br><span class="line">    FastJsonHttpMessageConverter fastConverter = <span class="keyword">new</span> FastJsonHttpMessageConverter();</span><br><span class="line">    <span class="comment">//2.添加fastjson的配置信息，比如是否要格式化返回的json数据</span></span><br><span class="line">    FastJsonConfig fastJsonConfig = <span class="keyword">new</span> FastJsonConfig();</span><br><span class="line">    fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);</span><br><span class="line">    <span class="comment">//3.在convert中添加配置信息</span></span><br><span class="line">    fastConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line">    <span class="keyword">return</span> fastConverter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.extendMessageConverters(converters);</span><br><span class="line">    converters.add(fastJsonHttpMessageConverters());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>静态首页的支持, 将静态index.html放在如下目录时, 会自定映射</p><ul><li><code>classpath:/META-INF/resources/index.html</code></li><li><code>classpath:/resources/index.html</code></li><li><code>classpath:/static/index.html</code></li><li><code>classpath:/public/index.html</code></li><li>其他目录可以在配置类中<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addViewController(<span class="string">"/index"</span>).setViewName(<span class="string">"index"</span>);</span><br><span class="line">    registry.addViewController(<span class="string">"/upload"</span>).setViewName(<span class="string">"upload"</span>);</span><br><span class="line">    registry.addViewController(<span class="string">"/async"</span>).setViewName(<span class="string">"async"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Spring-Boot自定义配置"><a href="#Spring-Boot自定义配置" class="headerlink" title="Spring Boot自定义配置"></a><font color="orange">Spring Boot自定义配置</font></h4><p>如果Spring Boot自动配置不满足我们的需求, 那么我们可以自己定义MVC的配置.</p><ul><li>使用<code>@Configuration</code>注解和<code>@EnableWebMvc</code>注解</li><li>定义配置类继承<code>WebMvcConfigurerAdapter</code>重新相关方法(新版本实现<code>WebMvcConfigurer</code>接口), 无需<code>@EnableWebMvc</code>注解</li></ul><h4 id="注册Servlet、Filter、Listener"><a href="#注册Servlet、Filter、Listener" class="headerlink" title="注册Servlet、Filter、Listener"></a><font color="orange">注册Servlet、Filter、Listener</font></h4><ul><li><p>方式1、当时使用嵌入式Servlet容器时, 通过声明Spring Boot自动注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">pulic xxServlet <span class="title">xxServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> xxSevlet();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">pulic xxFilter <span class="title">xxFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> xxFilter();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式2、注册ServletRegistrationBean、FilterRegistrationBean、ServletListenerRegistrationBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">servletRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> XXServlet(), <span class="string">"/xx/*"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FilterRegistrationBean fileterBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    fileterBean.setFilter(<span class="keyword">new</span> XXFilter());</span><br><span class="line">    fileterBean.setOrder(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> fileterBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring-Boot容器配置"><a href="#Spring-Boot容器配置" class="headerlink" title="Spring Boot容器配置"></a><font color="orange">Spring Boot容器配置</font></h2><p>Spring Boot默认容器是Tomcat, 当然也可以使用Jetty、Undertow等, 配置属性在<code>org.springframework.boot.autoconfigure.web.ServerProperties</code>中做了定义, 我们只需要在<code>application.properties</code>中做配置即可, 通用的配置是以<code>server</code>作为前缀, 而Tomcat配置是以<code>server.tomcat</code>作为前缀.</p><h3 id="application-properties配置文件"><a href="#application-properties配置文件" class="headerlink" title="application.properties配置文件"></a><font color="orange"><code>application.properties</code>配置文件</font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.port=8080 #配置程序端口, 默认8080</span><br><span class="line">server.session-timeout= #用户session过期时间, 秒为单位</span><br><span class="line">server.context-path=/ #访问路径, 默认/</span><br><span class="line">server.tomcat.uri-encoding=UTF-8 #配置Tomcat编码</span><br></pre></td></tr></table></figure><h3 id="代码配置"><a href="#代码配置" class="headerlink" title="代码配置"></a><font color="orange">代码配置</font></h3><p>通用的配置类可以实现<code>EmbeddedServletContainerCustomizer</code>接口的类, 若要直接配置Tomcat、Jetty、Undertow则可以直接定义<code>TomcatEmbeddedServletContainerFactory</code>、<code>JettyEmbeddedServletContainerFactory</code>、<code>UndertowEmbeddedServletContainerFactory</code>的Bean.</p><ul><li><p>新建类(如果该类在配置类中, 注意需要添加<code>static</code>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomServletContainer</span> <span class="keyword">implements</span> <span class="title">EmbeddedServletContainerCustomizer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableEmbeddedServletContainer container)</span> </span>&#123;</span><br><span class="line">        containner.setPort(<span class="number">8090</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用特定的Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainerFactory <span class="title">servletContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TomcatEmbeddedServletContainerFactory factory = <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory;</span><br><span class="line">    factory.setPort(<span class="number">8090</span>);</span><br><span class="line">    <span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="内置Tomcat不支持JSP"><a href="#内置Tomcat不支持JSP" class="headerlink" title="内置Tomcat不支持JSP"></a><font color="orange">内置Tomcat不支持JSP</font></h3><p>内置容器是Tomcat不支持JSP页面, 需要添加额外的包才能支持:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h3 id="替换Tomcat"><a href="#替换Tomcat" class="headerlink" title="替换Tomcat"></a><font color="orange">替换Tomcat</font></h3><p>Spring Boot默认使用Tomcat作为内嵌Servlet容器, 如果需要替换其他容器, 那么可以在<code>pom.xml</code>移除Tomcat的依赖并添加其他容器的依赖.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="配置证书SSL"><a href="#配置证书SSL" class="headerlink" title="配置证书SSL"></a><font color="orange">配置证书SSL</font></h3><ul><li>生成证书<ul><li>自签名证书(浏览器会显示未认证): 使用JDK工具生成<code>keytool -genkey -alias tomcat -keyalg RSA</code></li><li>认证的SSL证书(推荐): <a href="https://common-buy.aliyun.com/?spm=5176.7968328.911106.btn1.16a41232t0DJYw&amp;commodityCode=cas#/buy" target="_blank" rel="noopener">阿里云</a>、腾讯云都可以免费生成.</li></ul></li><li><p>Spring Boot配置SSL</p><ul><li>将生成<code>.keystore</code>拷贝到项目目录中</li><li>在<code>application.properties</code>中添加SSL配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server.prot=8443</span><br><span class="line">server.ssl.key-store=classpath:.keystore</span><br><span class="line">server.ssl.key-store-password=xxxxx</span><br><span class="line">server.ssl.keyStoreType=JKS</span><br><span class="line">server.ssl.keyAlias:tomcat</span><br></pre></td></tr></table></figure></li></ul></li><li><p>http转向https<br>在入口类中添加: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Starter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是spring boot 1.5.X以下版本的 添加了这个，下一个就不用添加了</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmbeddedServletContainerFactory <span class="title">servletContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TomcatEmbeddedServletContainerFactory tomcat = <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">                SecurityConstraint securityConstraint = <span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">                securityConstraint.setUserConstraint(<span class="string">"CONFIDENTIAL"</span>);</span><br><span class="line">                SecurityCollection collection = <span class="keyword">new</span> SecurityCollection();</span><br><span class="line">                collection.addPattern(<span class="string">"/*"</span>);</span><br><span class="line">                securityConstraint.addCollection(collection);</span><br><span class="line">                context.addConstraint(securityConstraint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        tomcat.addAdditionalTomcatConnectors(httpConnector()); <span class="comment">// 添加http</span></span><br><span class="line">        <span class="keyword">return</span> tomcat;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这是spring boot 2.0.X版本的 添加这个，上一个就不用添加了</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletWebServerFactory <span class="title">servletContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TomcatServletWebServerFactory factory = <span class="keyword">new</span> TomcatServletWebServerFactory()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">                SecurityConstraint securityConstraint = <span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">                securityConstraint.setUserConstraint(<span class="string">"CONFIDENTIAL"</span>);</span><br><span class="line">                SecurityCollection collection = <span class="keyword">new</span> SecurityCollection();</span><br><span class="line">                collection.addPattern(<span class="string">"/*"</span>);</span><br><span class="line">                securityConstraint.addCollection(collection);</span><br><span class="line">                context.addConstraint(securityConstraint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        factory.addAdditionalTomcatConnectors(httpConnector());</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置http</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Connector <span class="title">httpConnector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connector connector = <span class="keyword">new</span> Connector(<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>);</span><br><span class="line">        Http11NioProtocol http11NioProtocol = (Http11NioProtocol) connector.getProtocolHandler();</span><br><span class="line">        connector.setScheme(<span class="string">"http"</span>);</span><br><span class="line">        connector.setPort(<span class="number">8080</span>);</span><br><span class="line">        connector.setSecure(<span class="keyword">false</span>);</span><br><span class="line">        connector.setRedirectPort(<span class="number">8443</span>);</span><br><span class="line">        <span class="comment">//设置最大线程数</span></span><br><span class="line">        http11NioProtocol.setMaxThreads(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//设置初始线程数  最小空闲线程数</span></span><br><span class="line">        http11NioProtocol.setMinSpareThreads(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//设置超时</span></span><br><span class="line">        http11NioProtocol.setConnectionTimeout(<span class="number">5000</span>);</span><br><span class="line">        <span class="keyword">return</span> connector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Favicon配置"><a href="#Favicon配置" class="headerlink" title="Favicon配置"></a><font color="orange">Favicon配置</font></h3><p>Spring Boot提供了一个默认的Favicon.</p><h4 id="关闭Favicon"><a href="#关闭Favicon" class="headerlink" title="关闭Favicon"></a><font color="orange">关闭Favicon</font></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.favicon.enabled=false</span><br></pre></td></tr></table></figure><h4 id="自定义Favicon"><a href="#自定义Favicon" class="headerlink" title="自定义Favicon"></a><font color="orange">自定义Favicon</font></h4><p>只需要把自己的<code>favicon.ico</code>(文件名不能更改)文件放在<code>类路径根目录</code>、<code>类路径META-INF/resources/</code>、<code>类路径resources/</code>、<code>类路径static/</code>或者<code>类路径public/</code>下即可.</p><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a><font color="orange">WebSocket</font></h3><p>请移步<a href>这里</a>, 关于WebSocket的服务器端以及iOS连接Websocket的实现.</p><h2 id="Spring-Boot中的事务"><a href="#Spring-Boot中的事务" class="headerlink" title="Spring Boot中的事务"></a><font color="orange">Spring Boot中的事务</font></h2><h3 id="Spring中的事务"><a href="#Spring中的事务" class="headerlink" title="Spring中的事务"></a><font color="orange">Spring中的事务</font></h3><ul><li>编程式事务(不推荐)</li><li>基于TransactionProxyFactoryBean的事务(不推荐)</li><li><p>基于AspectJ的声明式事务</p><ul><li><p>使用<code>xml配置文件</code>方式</p><ul><li><p>配置事务管理器Bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置事务通知(事务的增强)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class="line">    &lt;tx:attributes&gt;</span><br><span class="line">        &lt;tx:method name=&quot;save*&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;insert*&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;find*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;select*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;get*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置切面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--切面--&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut=&quot;execution(* com.coppco.service.*.*(..))&quot;/&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用<code>注解</code>方式</p><ul><li><p>配置事务管理器Bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>开启注解事务</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启注解事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在需要使用事务的类上添加注解<code>@Transactional</code>即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">@Service</span><br><span class="line">public class AccountService &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="Spring-Boot中的事务-1"><a href="#Spring-Boot中的事务-1" class="headerlink" title="Spring Boot中的事务"></a><font color="orange">Spring Boot中的事务</font></h3><p>使用<code>@EnableTransactionManagement</code>注解在配置类上来开启声明式事务的支持, Spring容器会自动扫描注解了<code>@Transactional</code>的方法和类.</p><ul><li>注解在类上: 所有public方法都开启事务</li><li>注解在方法上: 该方法开启注解</li><li>同时类上和方法上都存在: 类级别的注解会重载方法级别的注解</li></ul><h2 id="Spring-Boot开发部署"><a href="#Spring-Boot开发部署" class="headerlink" title="Spring Boot开发部署"></a><font color="orange">Spring Boot开发部署</font></h2><h3 id="Spring-Boot热部署"><a href="#Spring-Boot热部署" class="headerlink" title="Spring Boot热部署"></a><font color="orange">Spring Boot热部署</font></h3><p>当我们修改了类或者配置文件时, 需要生效会重新运行, 会很麻烦.<br>Spring Boot1.3版本以后可以使用热部署方便很多.</p><h4 id="模板热部署"><a href="#模板热部署" class="headerlink" title="模板热部署"></a><font color="orange">模板热部署</font></h4><p>Spring Boot模板引擎默认都是开启缓存的, 可以在<code>application.properties</code>中关闭缓存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#thymeleaf缓存</span><br><span class="line">spring.thymeleaf.cache=false</span><br><span class="line">#FreeMarker缓存</span><br><span class="line">spring.freemarker.cache=false</span><br><span class="line">#Groovy缓存</span><br><span class="line">spring.groovy.template.cache=false</span><br><span class="line">#Velocity缓存</span><br><span class="line">spring.velocity.cache=false</span><br></pre></td></tr></table></figure></p><h4 id="Java类和配置文件"><a href="#Java类和配置文件" class="headerlink" title="Java类和配置文件"></a><font color="orange">Java类和配置文件</font></h4><ul><li><p>1、pom.xml添加Maven依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 热部署 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>2、pom.xml中插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;fork&gt;true&lt;/fork&gt;//该配置必须</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure></li><li><p>3、开启Intellij IDEA自动Build功能 </p><ul><li><code>setting</code> – <code>Build, Execution, Deployment</code> – <code>Compiler</code> – <code>Build project automatically</code>勾选上</li></ul></li><li>4、<code>command + option + shift + /</code> – <code>Registry</code> – <code>compiler.automake.allow.when.app.running</code> – 勾选即可.</li><li>5、重新编译后, 在修改后保存时会重新加载.</li></ul><h3 id="Spring-Boot常规部署"><a href="#Spring-Boot常规部署" class="headerlink" title="Spring Boot常规部署"></a><font color="orange">Spring Boot常规部署</font></h3><h4 id="jar包形式"><a href="#jar包形式" class="headerlink" title="jar包形式"></a><font color="orange">jar包形式</font></h4><ul><li><p>打包: 当我们新建Spring Boot项目的时候, 选择打包方式是<code>jar</code>, 只需使用maven插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure></li><li><p>运行: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xx.jar</span><br></pre></td></tr></table></figure></li><li><p>Linux下运行软件通常把它注册为服务, 需要修改<code>pom.xml</code>后重新打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;fork&gt;true&lt;/fork&gt;</span><br><span class="line">                &lt;executable&gt;true&lt;/executable&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure></li><li><p>Linux下部署</p><ul><li><p>安装JDK</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh jdk-8u51-linux-x64.rpm</span><br></pre></td></tr></table></figure></li><li><p>参考<a href="https://docs.spring.io/spring-boot/docs/2.0.0.M7/reference/htmlsingle/#deployment-service" target="_blank" rel="noopener">官方文档设置</a></p></li><li><p>基于<code>init.d</code>(CentOS 6.6)注册服务</p><ul><li><p>注册服务, springbootDemo就是服务名, 项目日志在<code>/home/log/springbootDemo.log</code>下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /home/apps/springbootDemo-0.0.1-SNAPSHOT.jar /etc/init.d/springbootDemo</span><br></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#启动服务</span><br><span class="line">service springbootDemo start</span><br><span class="line">#停止服务</span><br><span class="line">service springbootDemo stop</span><br><span class="line">#服务状态</span><br><span class="line">service springbootDemo status</span><br><span class="line">#开机启动</span><br><span class="line">chkconfig springbootDemo on</span><br></pre></td></tr></table></figure></li></ul></li><li><p>基于<code>systemd(CnetOS 7)</code>注册服务</p><ul><li><p>注册服务, 在<code>/etc/systemd/system/</code>目录下新建<code>springbootDemo.service</code>, 实际中需要修改Description和ExexStart</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=springbootDemo </span><br><span class="line">After=syslog.target</span><br><span class="line"></span><br><span class="line">[service]</span><br><span class="line">User=root</span><br><span class="line">ExexStart=/home/apps/springbootDemo-0.0.1-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li><p>相关命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#启动服务</span><br><span class="line">systemctl start springbootDemo.service</span><br><span class="line">#停止服务</span><br><span class="line">systemctl stop springbootDemo.service</span><br><span class="line">#服务状态</span><br><span class="line">systemctl status springbootDemo.service</span><br><span class="line">#开机启动</span><br><span class="line">systemctl enable springbootDemo.service</span><br><span class="line">#日志</span><br><span class="line">journalctl -u pringbootDemo.service</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="war包形式"><a href="#war包形式" class="headerlink" title="war包形式"></a><font color="orange">war包形式</font></h4><ul><li><p>如果<code>pom.xml</code>文件打包方式为<code>war</code>, 可以直接使用Maven插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure></li><li><p>如果<code>pom.xml</code>文件打包方式为<code>jar</code></p><ul><li><p>首先修改<code>pom.xml</code>, 把打包方式改为war</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;war&lt;/packaging&gt;</span><br></pre></td></tr></table></figure></li><li><p>覆盖默认的容器依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>新增ServletInitializer类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class ServletInitializer extends SpringBootServletInitializer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) &#123;</span><br><span class="line">        return application.sources(xxx.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Spring-Boot整合Mybatis"><a href="#Spring-Boot整合Mybatis" class="headerlink" title="Spring Boot整合Mybatis"></a><font color="orange">Spring Boot整合Mybatis</font></h2><h3 id="首先导入相关依赖以及Mybatis-generator插件"><a href="#首先导入相关依赖以及Mybatis-generator插件" class="headerlink" title="首先导入相关依赖以及Mybatis-generator插件"></a><font color="orange">首先导入相关依赖以及Mybatis-generator插件</font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;JustChat&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.coppco&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;artifactId&gt;JustChat-dao&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.coppco&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;JustChat-common&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">             &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--druid--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.1.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 分页插件 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.5&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- 热部署 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.3.5&lt;/version&gt;</span><br><span class="line">                &lt;dependencies&gt;</span><br><span class="line">                    &lt;dependency&gt;</span><br><span class="line">                        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">                        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">                        &lt;version&gt;5.1.39&lt;/version&gt;</span><br><span class="line">                    &lt;/dependency&gt;</span><br><span class="line">                    &lt;dependency&gt;</span><br><span class="line">                        &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">                        &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;</span><br><span class="line">                        &lt;version&gt;1.3.5&lt;/version&gt;</span><br><span class="line">                    &lt;/dependency&gt;</span><br><span class="line">                &lt;/dependencies&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;Generate MyBatis Artifacts&lt;/id&gt;</span><br><span class="line">                        &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;generate&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;!--允许移动生成的文件 --&gt;</span><br><span class="line">                    &lt;verbose&gt;true&lt;/verbose&gt;</span><br><span class="line">                    &lt;!-- 是否覆盖 --&gt;</span><br><span class="line">                    &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">                    &lt;!-- 自动生成的配置 --&gt;</span><br><span class="line">                    &lt;configurationFile&gt;src/main/resources/generatorConfig.xml&lt;/configurationFile&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;fork&gt;true&lt;/fork&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="在src-main-resources-中新建配置文件generatorConfig-xml"><a href="#在src-main-resources-中新建配置文件generatorConfig-xml" class="headerlink" title="在src/main/resources/中新建配置文件generatorConfig.xml"></a><font color="orange">在<code>src/main/resources/</code>中新建配置文件<code>generatorConfig.xml</code></font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--导入properties文件--&gt;</span><br><span class="line">    &lt;!--&lt;properties  resource=&quot;schemeone/properties/mysql/mysql.properties&quot;/&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context id=&quot;localTable&quot; targetRuntime=&quot;MyBatis3&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--生成的Bean会实现Serializable接口--&gt;</span><br><span class="line">        &lt;plugin type=&quot;org.mybatis.generator.plugins.SerializablePlugin&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br><span class="line">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">                        connectionURL=&quot;jdbc:mysql://localhost:3306/justchat&quot; userId=&quot;root&quot;</span><br><span class="line">                        password=&quot;123456&quot;&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- &lt;jdbcConnection driverClass=&quot;oracle.jdbc.OracleDriver&quot;</span><br><span class="line">            connectionURL=&quot;jdbc:oracle:thin:@127.0.0.1:1521:yycg&quot;</span><br><span class="line">            userId=&quot;yycg&quot;</span><br><span class="line">            password=&quot;yycg&quot;&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和</span><br><span class="line">            NUMERIC 类型解析为java.math.BigDecimal --&gt;</span><br><span class="line">        &lt;javaTypeResolver&gt;</span><br><span class="line">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/javaTypeResolver&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- targetProject:生成PO类的位置, targetProject: 存放生成文件的目录  --&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage=&quot;com.coppco.common.pojo&quot;</span><br><span class="line">                            targetProject=&quot;../JustChat-common/src/main/java&quot;&gt;</span><br><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">            &lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span><br><span class="line">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/javaModelGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- targetProject:mapper映射文件生成的位置 --&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage=&quot;mapper&quot;</span><br><span class="line">                         targetProject=&quot;src/main/resources&quot;&gt;</span><br><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/sqlMapGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- targetPackage：mapper接口生成的位置 --&gt;</span><br><span class="line">        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot;</span><br><span class="line">                             targetPackage=&quot;com.coppco.mapper&quot;</span><br><span class="line">                             targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/javaClientGenerator&gt;</span><br><span class="line">        &lt;!-- 指定数据库表 --&gt;</span><br><span class="line">        &lt;table schema=&quot;&quot; tableName=&quot;user&quot;&gt;</span><br><span class="line">            &lt;!--重新命名--&gt;</span><br><span class="line">            &lt;!--&lt;columnOverride column=&quot;create_time&quot; property=&quot;createTime&quot; /&gt;--&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;table schema=&quot;&quot; tableName=&quot;userToken&quot;&gt;&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;table schema=&quot;&quot; tableName=&quot;userLogs&quot;&gt;&lt;/table&gt;</span><br><span class="line">        &lt;!-- 有些表的字段需要指定java类型</span><br><span class="line">         &lt;table schema=&quot;&quot; tableName=&quot;&quot;&gt;</span><br><span class="line">            &lt;columnOverride column=&quot;&quot; javaType=&quot;&quot; /&gt;</span><br><span class="line">        &lt;/table&gt; --&gt;</span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><h3 id="在application-properties中添加数据源等相关配置"><a href="#在application-properties中添加数据源等相关配置" class="headerlink" title="在application.properties中添加数据源等相关配置"></a><font color="orange">在<code>application.properties</code>中添加数据源等相关配置</font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#####   datasource  #####</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/justchat</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123456</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">#使用druid数据源</span><br><span class="line">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line"></span><br><span class="line">################               MyBatis               ################</span><br><span class="line">#配置模型包路径</span><br><span class="line">mybatis.type-aliases-package=com.coppco.common.pojo</span><br><span class="line">#配置.xml文件路径</span><br><span class="line">mybatis.mapper-locations=classpath:mapper/*.xml</span><br><span class="line">#配置自定义类型处理</span><br><span class="line">mybatis.type-handlers-package=com.coppco.common.messageHandle</span><br></pre></td></tr></table></figure><h3 id="在Spring-Boot入口类添加Mapper扫描"><a href="#在Spring-Boot入口类添加Mapper扫描" class="headerlink" title="在Spring Boot入口类添加Mapper扫描"></a><font color="orange">在Spring Boot入口类添加Mapper扫描</font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@MapperScan(&quot;com.coppco.mapper&quot;)</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class JustChatServiceApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(JustChatServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MyBatis类型处理器"><a href="#MyBatis类型处理器" class="headerlink" title="MyBatis类型处理器"></a><font color="orange">MyBatis类型处理器</font></h3><p>有时候, 我们希望从数据库里面读取数据时, 如性别等一些类型自动转成枚举, 此时我们可以使用MyBatis自带的类型处理器.</p><ul><li><code>org.apache.ibatis.type.EnumTypeHandler&lt;E&gt;</code><ul><li>直接存储枚举的name值</li></ul></li><li><code>org.apache.ibatis.type.EnumOrdinalTypeHandler&lt;E&gt;</code> <ul><li>直接存储枚举的顺序值</li></ul></li><li>自定义类型处理器继承<code>BaseTypeHandler&lt;E&gt;</code><ul><li>自定义存储值类型</li></ul></li></ul><h4 id="MyBatis提供的枚举类型处理器"><a href="#MyBatis提供的枚举类型处理器" class="headerlink" title="MyBatis提供的枚举类型处理器"></a><font color="orange">MyBatis提供的枚举类型处理器</font></h4><p>当使用系统提供的类型处理器时, 需要我们在<code>XXXMapper.xml</code>中对应的类型添加<code>typeHandler</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;insertUser&quot; parameterType=&quot;User&quot;&gt;</span><br><span class="line">    insert into user(id,userName,status)</span><br><span class="line">    values(#&#123;id&#125;,  #&#123;userName&#125;,#&#123;status, typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line">或者</span><br><span class="line">&lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;User&quot;&gt;</span><br><span class="line">    &lt;id column=&quot;id&quot; property=&quot;userId&quot; jdbcType=&quot;INTEGER&quot; /&gt;</span><br><span class="line">    &lt;result column=&quot;status&quot; property=&quot;status&quot; typeHandler=&quot;org.apache.ibatis.type.EnumOrdinalTypeHandler&quot;/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure></p><h4 id="自定义类型处理器"><a href="#自定义类型处理器" class="headerlink" title="自定义类型处理器"></a><font color="orange">自定义类型处理器</font></h4><h5 id="定义枚举"><a href="#定义枚举" class="headerlink" title="定义枚举"></a><font color="orange">定义枚举</font></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.common.enums.message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聊天消息类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Jackson中 枚举和json相互转换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@JsonFormat</span>(shape = JsonFormat.Shape.OBJECT)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ChatMessageType &#123;</span><br><span class="line"></span><br><span class="line">    text(<span class="string">"01"</span>, <span class="string">"文本"</span>),</span><br><span class="line">    image(<span class="string">"02"</span>, <span class="string">"图片"</span>),</span><br><span class="line">    location(<span class="string">"03"</span>, <span class="string">"定位"</span>),</span><br><span class="line">    audio(<span class="string">"04"</span>, <span class="string">"音频"</span>),</span><br><span class="line">    video(<span class="string">"05"</span>, <span class="string">"视频"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String messageType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ChatMessageType</span><span class="params">(String messageType, String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messageType = messageType;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@JsonValue</span>注释在枚举的属性上, 会转成该值, 注释在枚举的实例上, 会把该枚举属性值全部转换</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JsonValue</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessageType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> messageType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessageType</span><span class="params">(String messageType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messageType = messageType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解决MyBatis和枚举直接转换</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, ChatMessageType&gt; map = <span class="keyword">new</span> HashMap&lt;String, ChatMessageType&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (ChatMessageType accountStatus : ChatMessageType.values()) &#123;</span><br><span class="line">            map.put(accountStatus.getMessageType(), accountStatus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ChatMessageType <span class="title">getEnumByValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="定义枚举处理类"><a href="#定义枚举处理类" class="headerlink" title="定义枚举处理类"></a><font color="orange">定义枚举处理类</font></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.common.messageHandle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coppco.common.enums.message.ChatMessageType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyBatis 枚举处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatMessageTypeHandle</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">ChatMessageType</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="keyword">int</span> i, ChatMessageType chatMessageType, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        preparedStatement.setString(i, chatMessageType.getMessageType());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChatMessageType <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, String s)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String value = resultSet.getString(s);</span><br><span class="line"></span><br><span class="line">        ChatMessageType type = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!resultSet.wasNull()) &#123;</span><br><span class="line">            type = ChatMessageType.getEnumByValue(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChatMessageType <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String value = resultSet.getString(i);</span><br><span class="line"></span><br><span class="line">        ChatMessageType type = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!resultSet.wasNull()) &#123;</span><br><span class="line">            type = ChatMessageType.getEnumByValue(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChatMessageType <span class="title">getNullableResult</span><span class="params">(CallableStatement callableStatement, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String value = callableStatement.getString(i);</span><br><span class="line"></span><br><span class="line">        ChatMessageType type = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!callableStatement.wasNull()) &#123;</span><br><span class="line">            type = ChatMessageType.getEnumByValue(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注册自定义类型处理器"><a href="#注册自定义类型处理器" class="headerlink" title="注册自定义类型处理器"></a><font color="orange">注册自定义类型处理器</font></h5><ul><li><p>Spring MVC: 配置文件中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 注册自定义类型处理器 --&gt;</span><br><span class="line">&lt;typeHandlers&gt;</span><br><span class="line">    &lt;typeHandler handler=&quot;twm.mybatisdemo.type.CityTestTypeHandler&quot; /&gt;</span><br><span class="line">&lt;/typeHandlers&gt;</span><br></pre></td></tr></table></figure></li><li><p>Spring Boot: <code>application.properties</code>中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#配置自定义类型处理</span><br><span class="line">mybatis.type-handlers-package=com.coppco.common.messageHandle</span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring-Boot整合Dubbo"><a href="#Spring-Boot整合Dubbo" class="headerlink" title="Spring Boot整合Dubbo"></a><font color="orange">Spring Boot整合Dubbo</font></h2><p>目前Dubbo已经加入Apache开源组织, 现在处于孵化期.参考<a href="http://dubbo.apache.org" target="_blank" rel="noopener">官方文档</a></p><h3 id="provider和consumer相关依赖"><a href="#provider和consumer相关依赖" class="headerlink" title=" provider和consumer相关依赖"></a><font color="orange"> provider和consumer相关依赖</font></h3><table><thead><tr><th style="text-align:center">版本</th><th style="text-align:center">Java版本</th><th style="text-align:center">Spring Boot版本</th><th style="text-align:center">Dubbo版本</th></tr></thead><tbody><tr><td style="text-align:center">versions</td><td style="text-align:center">Java</td><td style="text-align:center">Spring Boot</td><td style="text-align:center">Dubbo</td></tr><tr><td style="text-align:center">0.2.0</td><td style="text-align:center">1.8+</td><td style="text-align:center">2.0.x</td><td style="text-align:center">2.6.2 +</td></tr><tr><td style="text-align:center">0.1.1</td><td style="text-align:center">1.7+</td><td style="text-align:center">1.5.x</td><td style="text-align:center">2.6.2 +</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--dubbo-springBoot依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="provider服务提供者配置"><a href="#provider服务提供者配置" class="headerlink" title=" provider服务提供者配置 "></a><font color="orange"> provider服务提供者配置 </font></h3><h4 id="provider中application-properties配置"><a href="#provider中application-properties配置" class="headerlink" title=" provider中application.properties配置"></a><font color="orange"> provider中<code>application.properties</code>配置</font></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 扫描Dubbo注解的包(@Service、@ Reference等)</span><br><span class="line">dubbo.scan.basePackages  = com.alibaba.boot.dubbo.demo.provider.service</span><br><span class="line"></span><br><span class="line">## 应用程序名称以及ID配置</span><br><span class="line">dubbo.application.id = provider</span><br><span class="line">dubbo.application.name = provider</span><br><span class="line"></span><br><span class="line">## 协议配置</span><br><span class="line">dubbo.protocol.id = dubbo</span><br><span class="line">dubbo.protocol.name = dubbo</span><br><span class="line">dubbo.protocol.port = 12345</span><br><span class="line"></span><br><span class="line">## 注册中心配置</span><br><span class="line">dubbo.registry.id = my-registry</span><br><span class="line">dubbo.registry.address = xxx.xxx.xxx.xxx</span><br><span class="line"></span><br><span class="line">##如果dubbo使用的注册中心是zookeeper, 上面注册中心的配置改成这样</span><br><span class="line">#dubbo.registry.id = zookeeper</span><br><span class="line">#dubbo.registry.address = xxx.xxx.xxx.xxx</span><br><span class="line">#dubbo.registry.port=2181</span><br><span class="line">#dubbo.registry.protocol=zookeeper</span><br></pre></td></tr></table></figure><h4 id="使用Dubbo注解标注发布的服务"><a href="#使用Dubbo注解标注发布的服务" class="headerlink" title=" 使用Dubbo注解标注发布的服务 "></a><font color="orange"> 使用Dubbo注解标注发布的服务 </font></h4><ul><li><p>新建interface</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 用户相关接口</span><br><span class="line"> */</span><br><span class="line">public interface UserService &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 用户登录</span><br><span class="line">     * @param user</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public Result login(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现接口(<font color="red">注意这里的@Service不是Spring中的注解, 而是Dubbo中的注解</font>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"></span><br><span class="line">@Service(</span><br><span class="line">        version = &quot;1.0.0&quot;,</span><br><span class="line">        application = &quot;$&#123;dubbo.application.id&#125;&quot;,</span><br><span class="line">        protocol = &quot;$&#123;dubbo.protocol.id&#125;&quot;,</span><br><span class="line">        registry = &quot;$&#123;dubbo.registry.id&#125;&quot;</span><br><span class="line">)</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Result login(User user) &#123;</span><br><span class="line">        //code</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="consumer服务消费者配置"><a href="#consumer服务消费者配置" class="headerlink" title=" consumer服务消费者配置 "></a><font color="orange"> consumer服务消费者配置 </font></h3><h4 id="consumer中application-properties配置"><a href="#consumer中application-properties配置" class="headerlink" title=" consumer中application.properties配置"></a><font color="orange"> consumer中<code>application.properties</code>配置</font></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">#dubbo配置 ----  服务消费者</span><br><span class="line">## 应用程序配置</span><br><span class="line">dubbo.application.id = consumer</span><br><span class="line">dubbo.application.name = consumer</span><br><span class="line"></span><br><span class="line">## 协议配置</span><br><span class="line">dubbo.protocol.id = dubbo</span><br><span class="line">dubbo.protocol.name = dubbo</span><br><span class="line">dubbo.protocol.port = 12345</span><br><span class="line"></span><br><span class="line">##如果使用zookeeper作为注册中心, 需要添加下面配置</span><br><span class="line">#dubbo.registry.id = zookeeper</span><br><span class="line">#dubbo.registry.address = xxx.xxx.xxx.xxx</span><br><span class="line">#dubbo.registry.port = 2181</span><br><span class="line">#dubbo.registry.protocol = zookeeper</span><br></pre></td></tr></table></figure><h4 id="使用服务"><a href="#使用服务" class="headerlink" title=" 使用服务 "></a><font color="orange"> 使用服务 </font></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    #使用zookeeper时, 需要去掉`url=xxxxx`</span><br><span class="line">    @Reference(version = &quot;1.0.0&quot;,</span><br><span class="line">            application = &quot;$&#123;dubbo.application.id&#125;&quot;,</span><br><span class="line">            url = &quot;dubbo://127.0.0.1:12345&quot;)</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/login&quot;)</span><br><span class="line">    public Result login(@RequestBody @Validated(value = &#123;UserValidRegistGroup.class, UserValidLoginGroup.class&#125;) User user) &#123;</span><br><span class="line">        return userService.login(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Boot整合Redis"><a href="#Spring-Boot整合Redis" class="headerlink" title="Spring Boot整合Redis"></a><font color="orange">Spring Boot整合Redis</font></h2><h3 id="添加相关依赖"><a href="#添加相关依赖" class="headerlink" title="添加相关依赖"></a><font color="orange">添加相关依赖</font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;!--Spring Boot 1.4以前版本--&gt;  </span><br><span class="line">    &lt;!--&lt;artifactId&gt;spring-boot-starter-redis&lt;/artifactId&gt;--&gt;</span><br><span class="line">    &lt;!--Spring Boot 1.4以后版本--&gt;  </span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="Reids相关的配置文件"><a href="#Reids相关的配置文件" class="headerlink" title="Reids相关的配置文件"></a><font color="orange">Reids相关的配置文件</font></h3><p>在<code>application.properties</code>中添加redis相关配置, 以<code>spring.redis</code>开头<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Redis数据库索引（默认为0 redis有16个库）</span><br><span class="line">spring.redis.database=0</span><br><span class="line"># Redis服务器地址</span><br><span class="line">spring.redis.host=127.0.0.1</span><br><span class="line"># Redis服务器连接端口</span><br><span class="line">spring.redis.port=6379</span><br><span class="line"># Redis服务器连接密码（默认为空）</span><br><span class="line">spring.redis.password=</span><br><span class="line"># 连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-active=8</span><br><span class="line"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-wait=-1 </span><br><span class="line"># 连接池中的最大空闲连接</span><br><span class="line">spring.redis.pool.max-idle=8 </span><br><span class="line"># 连接池中的最小空闲连接</span><br><span class="line">spring.redis.pool.min-idle=0  </span><br><span class="line"># 连接超时时间（毫秒）</span><br><span class="line">spring.redis.timeout=2000</span><br></pre></td></tr></table></figure></p><h3 id="配置Redis"><a href="#配置Redis" class="headerlink" title="配置Redis"></a><font color="orange">配置Redis</font></h3><h3 id="Spring-Boot中Redis的自动配置"><a href="#Spring-Boot中Redis的自动配置" class="headerlink" title="Spring Boot中Redis的自动配置"></a><font color="orange">Spring Boot中Redis的自动配置</font></h3><p>Spring Boot默认使用<code>RedisAutoConfiguration</code>类加载<code>application.properties</code>中前缀为<code>spring.redis</code>的属性配置, 并提供了<code>RedisTemplate&lt;Object,Object&gt;</code>和<code>StringRedisTemplate</code>这种Bean.</p><ul><li>RedisTemplate&lt;Object,Object&gt;<ul><li>可以对Redis中key和value都为object类型的数据进行操作,默认会将对象使用JdkSerializationRedisSerializer进行序列化</li></ul></li><li>StringRedisTemplate<ul><li>可以对Redis中key和value都是String类型的数据进行操作</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://47.96.147.179/images/java/Spring_Boot_pic.jpg&quot; alt=&quot;hello&quot; style=&quot;width: 40%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是Spring-Boot&quot;&gt;&lt;a href=&quot;#什么是Spring-Boot&quot; class=&quot;headerlink&quot; title=&quot;什么是Spring Boot&quot;&gt;&lt;/a&gt;&lt;font color=&quot;orange&quot;&gt;什么是Spring Boot&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;随着动态语言的流行(Ruby、Groovy、Scala、Node.js、Python),Java开发显得格外笨重: 繁多的配置、低下的开发效率、复杂的部署流程.&lt;/p&gt;
&lt;p&gt;Spring Boot应用而生, 它使用”习惯优于配置”的理念可以快速的搭建一个项目.使用Spring Boot很容易创建一个独立运行的(运行jar、内嵌Servlet容器)、基于Spring的项目.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot#learn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>WebScoket的使用</title>
    <link href="http://yoursite.com/2018/03/15/iOS/WebScoket%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/03/15/iOS/WebScoket的使用/</id>
    <published>2018-03-15T01:49:12.000Z</published>
    <updated>2019-04-29T08:39:51.662Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://47.96.147.179/images/java/moxie_WebSocket.jpg" alt="hello" style="width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"></p><p>以往在Web项目中, 如果要实现和服务器实时通讯可以通过轮询、长轮询来实现, 此时即浪费带宽又消耗服务器资源.但是使用WebSocket可以很好的解决该问题, 如果你担心不同浏览器不支持WebSocket, 那么<a href="https://socket.io" target="_blank" rel="noopener">socketio</a>是一个不错的选择, 它封装了WebSocket、轮询和其他一些实时通讯方式.<br><a id="more"></a></p><h2 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a><font color="orange">OSI参考模型</font></h2><p>七层模型，亦称OSI（Open System Interconnection）参考模型，是国际标准化组织（ISO）制定的一个用于计算机或通信系统间互联的标准体系。<br>它是一个七层的、抽象的模型体，不仅包括一系列抽象的术语或概念，也包括具体的协议。从上到下分别是应用层、表示层、会话层、传输层、网络层、数据链路层和物理层.<br>具体的网络通讯协议图, 请参考<a href="http://www.colasoft.com.cn/download/protocols_map.php" target="_blank" rel="noopener">科来</a></p><h3 id="TCP-IP协议簇常见协议"><a href="#TCP-IP协议簇常见协议" class="headerlink" title="TCP/IP协议簇常见协议"></a><font color="orange">TCP/IP协议簇常见协议</font></h3><ul><li>应用层<ul><li>DHCP、FTP、HTTP、POP3、SMTP、TELNET、XMPP、SOAP、MSN、WebSocket</li></ul></li><li>表示层</li><li>会话层<ul><li>TLS、SSL、RPC</li></ul></li><li>传输层<ul><li>TCP、UDP</li></ul></li><li>网络层<ul><li>DNS、IP</li></ul></li><li>数据链路层<ul><li>ARP</li></ul></li><li>物理层</li></ul><h3 id="WebSocket、HTTP和TCP"><a href="#WebSocket、HTTP和TCP" class="headerlink" title="WebSocket、HTTP和TCP"></a><font color="orange">WebSocket、HTTP和TCP</font></h3><p>HTTP和WebSocket是应用层协议, 都是基于TCP协议来传输数据的, 只不过WebSocket必须依赖HTTP协议进行一次握手, 成功之后数据直接从TCP通道传输了.<br>HTTP是单向通讯, 而WebSocket是双向通讯.</p><h3 id="WebSocket和Socket"><a href="#WebSocket和Socket" class="headerlink" title="WebSocket和Socket"></a><font color="orange">WebSocket和Socket</font></h3><p>Socket(套接字)并不是一个协议, 它工作在OSI模型中的会话层. Socket实际上是一个编程接口(API), 是对TCP/IP的封装, 方便我们通过网络层传输数据, 通过Socket可以实现双向通讯.</p><p>WebSocket是一个应用层协议, 也可以实现双向通讯.</p><h3 id="WebSocket和HTML5"><a href="#WebSocket和HTML5" class="headerlink" title="WebSocket和HTML5"></a><font color="orange">WebSocket和HTML5</font></h3><p>WebSocket API 是 HTML5 标准的一部分， 但这并不代表 WebSocket 一定要用在 HTML 中，或者只能在基于浏览器的应用程序中使用。</p><ul><li>基于C的<a href="https://libwebsockets.org/git/libwebsockets" target="_blank" rel="noopener">libwebsocket.org</a></li><li>基于Node.js的<a href="http://socket.io/" target="_blank" rel="noopener">Socket.io</a></li><li>Java中Nett实现的<a href="https://github.com/mrniko/netty-socketio" target="_blank" rel="noopener">netty-socketio</a></li><li>基于Python的<a href="https://github.com/Lawouach/WebSocket-for-Python" target="_blank" rel="noopener">ws4py</a></li><li>基于C++的<a href="http://www.zaphoyd.com/websocketpp" target="_blank" rel="noopener">WebSocket++</a></li><li>iOS实现的<a href="https://github.com/facebook/SocketRocket" target="_blank" rel="noopener">SocketRocket</a>, <a href="https://link.jianshu.com/?t=https://github.com/tidwall/SwiftWebSocket" target="_blank" rel="noopener">SwiftWebSocket</a></li><li>Tomcat7.0.47以上版本支持WebSocket</li><li>Spring4.x提供了以<code>STOMP</code>协议为基础的websocket通信实现, 对于不支持的浏览器, 使用<a href="https://github.com/sockjs/sockjs-client" target="_blank" rel="noopener">sockjs</a>模拟websocket对象的办法来实现兼容.</li><li>Apache 对 WebSocket 的支持： <a href="http://httpd.apache.org/docs/2.4/mod/mod_proxy_wstunnel.html" target="_blank" rel="noopener">Apache Module mod_proxy_wstunnel</a></li><li>Nginx 对 WebSockets 的支持： <a href="http://nginx.com/blog/websocket-nginx/" target="_blank" rel="noopener">NGINX as a WebSockets Proxy</a> 、 <a href="NGINX Announces Support for WebSocket Protocol">NGINX Announces Support for WebSocket Protocol</a> 、<a href="http://nginx.org/en/docs/http/websocket.html" target="_blank" rel="noopener">WebSocket proxying</a></li></ul><h2 id="Java实现WebSocket"><a href="#Java实现WebSocket" class="headerlink" title="Java实现WebSocket"></a><font color="orange">Java实现WebSocket</font></h2><h3 id="使用Tomcat实现WebSocket"><a href="#使用Tomcat实现WebSocket" class="headerlink" title="使用Tomcat实现WebSocket"></a><font color="orange">使用Tomcat实现WebSocket</font></h3><h4 id="Maven项目使用Tomcat实现WebSocket"><a href="#Maven项目使用Tomcat实现WebSocket" class="headerlink" title="Maven项目使用Tomcat实现WebSocket"></a><font color="orange">Maven项目使用Tomcat实现WebSocket</font></h4><ul><li><p>新建Maven项目, 需要添加Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.coppco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Maven_Tomcat_WebSocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaee-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--只在编译和测试时使用, 部署到Tomcat时, Tomcat已经包含该包--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>Maven_Tomcat_WebSocket<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 资源文件拷贝插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置Tomcat插件 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写消息处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.websocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.*;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该注解用来指定一个URI，客户端可以通过这个URI来连接到WebSocket。类似Servlet的注解mapping。无需在web.xml中配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/websocket/&#123;username&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态变量，用来记录当前在线连接数。应该把它设计成线程安全的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> onlineCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现服务端与单一客户端通信的话，可以使用Map来存放，其中Key可以为用户标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, WebSocket&gt; clients = <span class="keyword">new</span> ConcurrentHashMap&lt;String, WebSocket&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 与某个客户端的连接会话，需要通过它来给客户端发送数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接建立成功调用的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session session为与某个客户端的连接会话，需要通过它来给客户端发送数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(@PathParam(<span class="string">"username"</span>)</span> String username, Session session) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line"></span><br><span class="line">        addOnlineCount();</span><br><span class="line">        clients.put(username, <span class="keyword">this</span>);</span><br><span class="line">        System.out.println(<span class="string">"已连接"</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接关闭调用的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        clients.remove(username);</span><br><span class="line">        System.out.println(<span class="string">"已断开"</span> + username);</span><br><span class="line">        subOnlineCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到客户端消息后调用的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//这里可以根据业务逻辑决定群发或者单发</span></span><br><span class="line">        sendMessageAll(message);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发生错误时调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable error)</span> </span>&#123;</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单发消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> To</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageTo</span><span class="params">(String message, String To)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// session.getBasicRemote().sendText(message);</span></span><br><span class="line">        <span class="comment">//session.getAsyncRemote().sendText(message);</span></span><br><span class="line">        <span class="keyword">for</span> (WebSocket item : clients.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.username.equals(To) )</span><br><span class="line">                item.session.getAsyncRemote().sendText(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 群发消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageAll</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (WebSocket item : clients.values()) &#123;</span><br><span class="line">            item.session.getAsyncRemote().sendText(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> onlineCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebSocket.onlineCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">subOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebSocket.onlineCount--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Map&lt;String, WebSocket&gt; <span class="title">getClients</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clients;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Web客户端</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Java后端WebSocket的Tomcat实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Welcome<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"text"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"send()"</span>&gt;</span>发送消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"closeWebSocket()"</span>&gt;</span>关闭WebSocket连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> websocket = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//判断当前浏览器是否支持WebSocket</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="string">'WebSocket'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span></span><br><span class="line"><span class="javascript">        websocket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:8080/websocket/"</span> + <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">10</span>+<span class="number">1</span>));</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'当前浏览器 Not support websocket'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//连接发生错误的回调方法</span></span></span><br><span class="line"><span class="javascript">    websocket.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        setMessageInnerHTML(<span class="string">"WebSocket连接发生错误"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//连接成功建立的回调方法</span></span></span><br><span class="line"><span class="javascript">    websocket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        setMessageInnerHTML(<span class="string">"WebSocket连接成功"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//接收到消息的回调方法</span></span></span><br><span class="line"><span class="javascript">    websocket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        setMessageInnerHTML(event.data);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//连接关闭的回调方法</span></span></span><br><span class="line"><span class="javascript">    websocket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        setMessageInnerHTML(<span class="string">"WebSocket连接关闭"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        closeWebSocket();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//将消息显示在网页上</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">setMessageInnerHTML</span>(<span class="params">innerHTML</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>).innerHTML += innerHTML + <span class="string">'&lt;br/&gt;'</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//关闭WebSocket连接</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">closeWebSocket</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        websocket.close();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//发送消息</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> message = <span class="built_in">document</span>.getElementById(<span class="string">'text'</span>).value;</span></span><br><span class="line"><span class="undefined">        websocket.send(message);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Spring-Boot使用Tomcat实现WebSocket"><a href="#Spring-Boot使用Tomcat实现WebSocket" class="headerlink" title="Spring Boot使用Tomcat实现WebSocket"></a><font color="orange">Spring Boot使用Tomcat实现WebSocket</font></h4><p>使用Spring Boot项目配置稍微有点不一样, </p><ul><li><p>首先需要添加依赖<code>spring-boot-starter-websocket</code>, 如果是打成war部署在外部Tomcat时需要添加<code>javaee-api</code>的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.coppco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcatwebsocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>tomcatwebsocket<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注意如果打成war部署在外部Tomcat时需要添加这个--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;groupId&gt;javax&lt;/groupId&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;artifactId&gt;javaee-api&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;version&gt;7.0&lt;/version&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;scope&gt;provided&lt;/scope&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 热部署 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>如果使用内置Tomcat时, 需要在<code>xxApplication中注入Bean</code>, 使用外部Tomcat时不需要添加.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TomcatwebsocketApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TomcatwebsocketApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用内置Tomcat时需要注入ServerEndpointExporter的Bean, 它会自动注册使用了<span class="doctag">@ServerEndpoint</span>注解声明的Websocket endpoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写消息处理类, 需要在处理类上添加<code>@Component</code>注解, 其他代码同上</p></li><li>Web客户端, 代码同上</li></ul><h3 id="Spring4-x实现WebSocket"><a href="#Spring4-x实现WebSocket" class="headerlink" title="Spring4.x实现WebSocket"></a><font color="orange">Spring4.x实现WebSocket</font></h3><ul><li><p>首先需要添加依赖<code>spring-boot-starter-websocket</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.coppco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springbootwebsocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springbootwebsocket<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 热部署 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>xxxApplication</code>类上添加注解、实现接口、注入Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coppco.interceptor.UsernameInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.coppco.messageHandle.WebSocketMessageHandle;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocket;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现WebSocketConfigurer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span> <span class="comment">//允许WebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootwebsocketApplication</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootwebsocketApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一个addHandler是对正常连接的配置，第二个是如果浏览器不支持websocket，使用socketjs模拟websocket的连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketHandlerRegistry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry webSocketHandlerRegistry)</span> </span>&#123;</span><br><span class="line">        webSocketHandlerRegistry.addHandler(webSocketMessageHandle(), <span class="string">"/websocket"</span>).addInterceptors(<span class="keyword">new</span> UsernameInterceptor());</span><br><span class="line">        webSocketHandlerRegistry.addHandler(webSocketMessageHandle(), <span class="string">"/sockjs/webSocket"</span>).addInterceptors(<span class="keyword">new</span> UsernameInterceptor());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息处理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebSocketMessageHandle <span class="title">webSocketMessageHandle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebSocketMessageHandle();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消息处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.messageHandle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.handler.TextWebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketMessageHandle</span> <span class="keyword">extends</span> <span class="title">TextWebSocketHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态变量，用来记录当前在线连接数。应该把它设计成线程安全的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> onlineCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现服务端与单一客户端通信的话，可以使用Map来存放，其中Key可以为用户标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, WebSocketSession&gt; clients = <span class="keyword">new</span> ConcurrentHashMap&lt;String, WebSocketSession&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接成功时候，会触发UI上onopen方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String username = (String) session.getAttributes().get(<span class="string">"username"</span>);</span><br><span class="line">        addOnlineCount();</span><br><span class="line">        System.out.println(<span class="string">"已连接:  "</span> + username + <span class="string">"session: "</span> + <span class="keyword">this</span>);</span><br><span class="line">        clients.put((String) session.getAttributes().get(<span class="string">"username"</span>), session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到文本消息时，会调用该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">handleTextMessage</span><span class="params">(WebSocketSession session, TextMessage message)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String send = (String) session.getAttributes().get(<span class="string">"username"</span>);</span><br><span class="line">        sendMessageAll(send, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出现错误时，会调用该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleTransportError</span><span class="params">(WebSocketSession session, Throwable exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.handleTransportError(session, exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接时，会调用该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionClosed</span><span class="params">(WebSocketSession session, CloseStatus status)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String username = (String) session.getAttributes().get(<span class="string">"username"</span>);</span><br><span class="line">        clients.remove(username);</span><br><span class="line">        System.out.println(<span class="string">"已断开: "</span> + username);</span><br><span class="line">        subOnlineCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单发消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> To</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageTo</span><span class="params">(TextMessage message, String To)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, WebSocketSession&gt; entry : clients.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.getKey().equals(To)) &#123;</span><br><span class="line">                entry.getValue().sendMessage(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 群发消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageAll</span><span class="params">(String send, TextMessage message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String key: clients.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!key.equals(send)) &#123;</span><br><span class="line">                clients.get(key).sendMessage(message);</span><br><span class="line">                System.out.println(<span class="string">""</span> + send + <span class="string">"发送消息给------&gt;"</span> + key + <span class="string">" : 内容  "</span> + message.getPayload());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsPartialMessages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.supportsPartialMessages();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> onlineCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebSocketMessageHandle.onlineCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">subOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebSocketMessageHandle.onlineCount--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Map&lt;String, WebSocketSession&gt; <span class="title">getClients</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clients;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>拦截器, 添加用户名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.HandshakeInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.rmi.CORBA.Util;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsernameInterceptor</span> <span class="keyword">implements</span> <span class="title">HandshakeInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">beforeHandshake</span><span class="params">(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Map&lt;String, Object&gt; map)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String username = (String) map.get(<span class="string">"username"</span>);</span><br><span class="line">        <span class="keyword">if</span> (username == <span class="keyword">null</span>) &#123;</span><br><span class="line">            map.put(<span class="string">"username"</span>, <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>) + <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterHandshake</span><span class="params">(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, @Nullable Exception e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Web客户端, 注意使用SockJS时地址是<code>http</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Java后端WebSocket的Tomcat实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Welcome<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"text"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"send()"</span>&gt;</span>发送消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"closeWebSocket()"</span>&gt;</span>关闭WebSocket连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/sockjs-0.3.min.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> websocket = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//判断当前浏览器是否支持WebSocket</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="string">'WebSocket'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span></span><br><span class="line"><span class="javascript">        websocket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:8080/websocket"</span>);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'MozWebSocket'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span></span><br><span class="line"><span class="javascript">        websocket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:8080/websocket"</span>);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        websocket = <span class="keyword">new</span> SockJS(<span class="string">"http://localhost:8080/sockjs/websocket"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//连接发生错误的回调方法</span></span></span><br><span class="line"><span class="javascript">    websocket.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        setMessageInnerHTML(<span class="string">"WebSocket连接发生错误"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//连接成功建立的回调方法</span></span></span><br><span class="line"><span class="javascript">    websocket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        setMessageInnerHTML(<span class="string">"WebSocket连接成功"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//接收到消息的回调方法</span></span></span><br><span class="line"><span class="javascript">    websocket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        setMessageInnerHTML(event.data);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//连接关闭的回调方法</span></span></span><br><span class="line"><span class="javascript">    websocket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        setMessageInnerHTML(<span class="string">"WebSocket连接关闭"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        closeWebSocket();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//将消息显示在网页上</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">setMessageInnerHTML</span>(<span class="params">innerHTML</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>).innerHTML += innerHTML + <span class="string">'&lt;br/&gt;'</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//关闭WebSocket连接</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">closeWebSocket</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        websocket.close();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//发送消息</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> message = <span class="built_in">document</span>.getElementById(<span class="string">'text'</span>).value;</span></span><br><span class="line"><span class="undefined">        websocket.send(message);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="iOS使用SocketRocket实现WebSocket连接"><a href="#iOS使用SocketRocket实现WebSocket连接" class="headerlink" title="iOS使用SocketRocket实现WebSocket连接"></a><font color="orange">iOS使用SocketRocket实现WebSocket连接</font></h2><p>这里我使用的是<a href="https://github.com/facebook/SocketRocket" target="_blank" rel="noopener">facebook/SocketRocket</a></p><ul><li><p>首先使用Cocoapods导入相关库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;SocketRocket&apos;</span><br></pre></td></tr></table></figure></li><li><p>简单的示例</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ViewController.m</span></span><br><span class="line"><span class="comment">//  iOS-WebScoket</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by apple on 2018/6/16.</span></span><br><span class="line"><span class="comment">//  Copyright © 2018年 apple. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;SocketRocket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">SRWebSocketDelegate</span>, <span class="title">UITableViewDelegate</span>, <span class="title">UITableViewDataSource</span>&gt;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> webSocket</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>)SRWebSocket *webSocket;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 显示消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>)<span class="built_in">UITableView</span> *tableView;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>)<span class="built_in">NSMutableArray</span> *messages;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 发送消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>)<span class="built_in">UITextField</span> *messageTF;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    <span class="keyword">self</span>.navigationItem.title = <span class="string">@"使用SocketRocket"</span>;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.tableView];</span><br><span class="line">    [<span class="keyword">self</span>.webSocket open];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (SRWebSocket *)webSocket &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_webSocket) &#123;</span><br><span class="line">        _webSocket = (&#123;</span><br><span class="line">            SRWebSocket *object = [[SRWebSocket alloc] initWithURLRequest:[<span class="built_in">NSURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@"ws://localhost:8080/websocket"</span>]]];</span><br><span class="line">            object.delegate = <span class="keyword">self</span>;</span><br><span class="line">            object;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _webSocket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UITableView</span> *)tableView &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_tableView) &#123;</span><br><span class="line">        _tableView = (&#123;</span><br><span class="line">            <span class="built_in">UITableView</span> *object = [[<span class="built_in">UITableView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.bounds style:(<span class="built_in">UITableViewStylePlain</span>)];</span><br><span class="line">            [object registerClass:[<span class="built_in">UITableViewCell</span> <span class="keyword">class</span>] forCellReuseIdentifier:<span class="string">@"cell"</span>];</span><br><span class="line">            object.tableFooterView = [<span class="built_in">UIView</span> new];</span><br><span class="line">            object.delegate = <span class="keyword">self</span>;</span><br><span class="line">            object.dataSource = <span class="keyword">self</span>;</span><br><span class="line">            object;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _tableView;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">NSMutableArray</span> *)messages &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_messages) &#123;</span><br><span class="line">        _messages = (&#123;</span><br><span class="line">            <span class="built_in">NSMutableArray</span> *object = [[<span class="built_in">NSMutableArray</span> alloc] init];</span><br><span class="line">            object;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _messages;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UITextField</span> *)messageTF &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_messageTF) &#123;</span><br><span class="line">        _messageTF = (&#123;</span><br><span class="line">            <span class="built_in">UITextField</span> *object = [[<span class="built_in">UITextField</span> alloc] init];</span><br><span class="line">            object.tintColor = [<span class="built_in">UIColor</span> blueColor];</span><br><span class="line">            object.borderStyle = <span class="built_in">UITextBorderStyleRoundedRect</span>;</span><br><span class="line">            object.placeholder = <span class="string">@"请输入发送内容"</span>;</span><br><span class="line">            object.textColor = [<span class="built_in">UIColor</span> blackColor];</span><br><span class="line">            object.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">16</span>];</span><br><span class="line">            <span class="built_in">UIButton</span> *rightView = [<span class="built_in">UIButton</span> buttonWithType:(<span class="built_in">UIButtonTypeCustom</span>)];</span><br><span class="line">            [rightView addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(sendMessage) forControlEvents:(<span class="built_in">UIControlEventTouchUpInside</span>)];</span><br><span class="line">            [rightView setTitle:<span class="string">@"   发送   "</span> forState:(<span class="built_in">UIControlStateNormal</span>)];</span><br><span class="line">            [rightView setTitleColor:[<span class="built_in">UIColor</span> orangeColor] forState:(<span class="built_in">UIControlStateNormal</span>)];</span><br><span class="line">            [rightView sizeToFit];</span><br><span class="line">            object.rightView = rightView;</span><br><span class="line">            object.rightViewMode = <span class="built_in">UITextFieldViewModeAlways</span>;</span><br><span class="line">            object;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _messageTF;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)sendMessage &#123;</span><br><span class="line">    [<span class="keyword">self</span>.webSocket send:<span class="keyword">self</span>.messageTF.text ? : <span class="string">@"iOS"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma - mark UITableViewDelegate, UITableViewDataSource</span></span><br><span class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForHeaderInSection:(<span class="built_in">NSInteger</span>)section &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">40</span>;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">UIView</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView viewForHeaderInSection:(<span class="built_in">NSInteger</span>)section &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.messageTF;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    <span class="built_in">UITableViewCell</span> *cell = [tableView dequeueReusableCellWithIdentifier:<span class="string">@"cell"</span> forIndexPath:indexPath];</span><br><span class="line">    cell.textLabel.text = <span class="keyword">self</span>.messages[indexPath.row];</span><br><span class="line">    <span class="keyword">return</span> cell;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSInteger</span>)numberOfSectionsInTableView:(<span class="built_in">UITableView</span> *)tableView &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.messages.count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma - mark SRWebSocketDelegate</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 接收到消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)webSocket:(SRWebSocket *)webSocket didReceiveMessage:(<span class="built_in">NSString</span> *)message &#123;</span><br><span class="line">    [<span class="keyword">self</span>.messages addObject:message];</span><br><span class="line">    [<span class="keyword">self</span> reload];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 连接时</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)webSocketDidOpen:(SRWebSocket *)webSocket &#123;</span><br><span class="line">    [<span class="keyword">self</span>.messages addObject:<span class="string">@"连接WebSocket成功"</span>];</span><br><span class="line">    [<span class="keyword">self</span> reload];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 连接失败时</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)webSocket:(SRWebSocket *)webSocket didFailWithError:(<span class="built_in">NSError</span> *)error &#123;</span><br><span class="line">    [<span class="keyword">self</span>.messages addObject:<span class="string">@"连接WebSocket失败"</span>];</span><br><span class="line">    [<span class="keyword">self</span> reload];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 关闭时</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)webSocket:(SRWebSocket *)webSocket didCloseWithCode:(<span class="built_in">NSInteger</span>)code reason:(<span class="built_in">NSString</span> *)reason wasClean:(<span class="built_in">BOOL</span>)wasClean &#123;</span><br><span class="line">    [<span class="keyword">self</span>.messages addObject:<span class="string">@"关闭WebSocket连接"</span>];</span><br><span class="line">    [<span class="keyword">self</span> reload];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 接收到服务器的Pong时调用, 一般用作心跳</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)webSocket:(SRWebSocket *)webSocket didReceivePong:(<span class="built_in">NSData</span> *)pongPayload &#123;</span><br><span class="line">    [<span class="keyword">self</span>.messages addObject:<span class="string">@"收到心跳包"</span>];</span><br><span class="line">    [<span class="keyword">self</span> reload];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 是否把 NSData 转成 NSString, 默认YES</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)webSocketShouldConvertTextFrameToString:(SRWebSocket *)webSocket &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)reload &#123;</span><br><span class="line">    [<span class="keyword">self</span>.tableView reloadData];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring-Boot中使用netty-socketio"><a href="#Spring-Boot中使用netty-socketio" class="headerlink" title="Spring Boot中使用netty-socketio"></a><font color="orange">Spring Boot中使用netty-socketio</font></h2><p><a href="https://github.com/mrniko/netty-socketio" target="_blank" rel="noopener">netty-socketio</a>是基于netty的<a href="https://github.com/socketio/socket.io" target="_blank" rel="noopener">socket.io</a>服务实现，相对于javaee的原生websocket支持（@serverEndpoint）和spring-boot的MessageBroker(@messageMapping)，netty-socketio完整的实现了socket.io提供的监听前台事件、向指定客户端发送事件、将指定客户端加入指定房间、向指定房间广播事件、客户端从指定房间退出等操作。</p><h3 id="netty-socketio依赖"><a href="#netty-socketio依赖" class="headerlink" title="netty-socketio依赖"></a><font color="orange">netty-socketio依赖</font></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.corundumstudio.socketio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-socketio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="简单的例子"><a href="#简单的例子" class="headerlink" title=" 简单的例子 "></a><font color="orange"> 简单的例子 </font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.chat.runner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.*;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.listener.ConnectListener;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.listener.DataListener;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.listener.DisconnectListener;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用CommandLineRunner, 在Application启动之后回调启动Socket.io</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@org</span>.springframework.context.annotation.Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(ChatRunner.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SocketIOServer server;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * ip</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        configuration.setHostname(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 端口</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        configuration.setPort(<span class="number">9090</span>);</span><br><span class="line"></span><br><span class="line">        configuration.setPingInterval(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        configuration.setPingTimeout(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置最大每帧处理数据的长度，防止他人利用大数据来攻击服务器</span></span><br><span class="line">        <span class="comment">//configuration.setMaxFramePayloadLength(1024 * 1024);</span></span><br><span class="line">        <span class="comment">//设置http交互最大内容长度</span></span><br><span class="line">        <span class="comment">//configuration.setMaxHttpContentLength(1024 * 1024);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 身份验证</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        configuration.setAuthorizationListener(<span class="keyword">new</span> AuthorizationListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAuthorized</span><span class="params">(HandshakeData handshakeData)</span> </span>&#123;</span><br><span class="line">                logger.info(<span class="string">"授权成功"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        server = <span class="keyword">new</span> SocketIOServer(configuration);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//事件监听, ChatObject是前端和后端发送的数据类型</span></span><br><span class="line">        server.addEventListener(<span class="string">"chatevent"</span>, ChatObject.class, <span class="keyword">new</span> DataListener&lt;ChatObject&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onData</span><span class="params">(SocketIOClient socketIOClient, ChatObject object, AckRequest ackRequest)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">//广播</span></span><br><span class="line">                server.getBroadcastOperations().sendEvent(<span class="string">"chatevent"</span>, object);</span><br><span class="line">                logger.info(JSONUtils.toJSON(object));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接</span></span><br><span class="line">        server.addConnectListener(<span class="keyword">new</span> ConnectListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConnect</span><span class="params">(SocketIOClient socketIOClient)</span> </span>&#123;</span><br><span class="line">                HandshakeData data = socketIOClient.getHandshakeData();</span><br><span class="line">                logger.info(JSONUtils.toJSON(data) + <span class="string">"上线了"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//失去连接</span></span><br><span class="line">        server.addDisconnectListener(<span class="keyword">new</span> DisconnectListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDisconnect</span><span class="params">(SocketIOClient socketIOClient)</span> </span>&#123;</span><br><span class="line">                HandshakeData data = socketIOClient.getHandshakeData();</span><br><span class="line">                logger.info(JSONUtils.toJSON(data) + <span class="string">"下线了"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        server.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a><font color="orange">实际使用</font></h3><h4 id="创建一个Configuration类"><a href="#创建一个Configuration类" class="headerlink" title="创建一个Configuration类"></a><font color="orange">创建一个Configuration类</font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.socketio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.coppco.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.*;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.annotation.SpringAnnotationScanner;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * netty-socket.io的相关配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@org</span>.springframework.context.annotation.Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JCConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;justChat.service.hostname&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String hostname;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;justChat.service.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span>(version = <span class="string">"$&#123;consumer.version&#125;"</span>,</span><br><span class="line">            application = <span class="string">"$&#123;dubbo.application.id&#125;"</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(JCConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SocketIOServer <span class="title">socketIOServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Configuration config = <span class="keyword">new</span> Configuration();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置服务器ip以及端口</span></span><br><span class="line">        config.setHostname(hostname);</span><br><span class="line">        config.setPort(port);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置ping间隔以及超时时间</span></span><br><span class="line">        config.setPingInterval(<span class="number">5000</span>);</span><br><span class="line">        config.setPingTimeout(<span class="number">3000</span>);</span><br><span class="line">        config.setWorkerThreads(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置</span></span><br><span class="line">        SocketConfig socketConfig = <span class="keyword">new</span> SocketConfig();</span><br><span class="line">        socketConfig.setReuseAddress(<span class="keyword">true</span>);</span><br><span class="line">        config.setSocketConfig(socketConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置最大每帧处理数据的长度，防止他人利用大数据来攻击服务器</span></span><br><span class="line">        config.setMaxFramePayloadLength(<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line">        <span class="comment">//设置http交互最大内容长度</span></span><br><span class="line">        config.setMaxHttpContentLength(<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//授权</span></span><br><span class="line">        config.setAuthorizationListener(<span class="keyword">new</span> AuthorizationListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAuthorized</span><span class="params">(HandshakeData data)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//获取userId和token</span></span><br><span class="line">                <span class="comment">//String userIdString = data.getSingleUrlParam("userId");</span></span><br><span class="line">                <span class="comment">//String token = data.getSingleUrlParam("token");</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> SocketIOServer server = <span class="keyword">new</span> SocketIOServer(config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用netty-socket.io中的注解扫描</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> socketServer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringAnnotationScanner <span class="title">springAnnotationScanner</span><span class="params">(SocketIOServer socketServer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SpringAnnotationScanner(socketServer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建一个Runner在Application启动时开启Server"><a href="#创建一个Runner在Application启动时开启Server" class="headerlink" title="创建一个Runner在Application启动时开启Server"></a><font color="orange">创建一个Runner在Application启动时开启Server</font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.socketio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.SocketIOServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Socket.io执行类, 利用CommandLineRunner接口在Application启动之后的回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JCRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SocketIOServer server;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.server.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息处理类"><a href="#消息处理类" class="headerlink" title="消息处理类"></a><font color="orange">消息处理类</font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.socketio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.coppco.common.pojo.Message;</span><br><span class="line"><span class="keyword">import</span> com.coppco.common.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.coppco.service.MessageService;</span><br><span class="line"><span class="keyword">import</span> com.coppco.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.coppco.socketio.utils.SocketClientUtils;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.AckCallback;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.AckRequest;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.SocketIOClient;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.SocketIOServer;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.annotation.OnConnect;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.annotation.OnDisconnect;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.annotation.OnEvent;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息和事件处理中心</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JCMessageEventHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(JCMessageEventHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SocketIOServer server;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span>(version = <span class="string">"$&#123;consumer.version&#125;"</span>,</span><br><span class="line">            application = <span class="string">"$&#123;dubbo.application.id&#125;"</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span>(version = <span class="string">"$&#123;consumer.version&#125;"</span>,</span><br><span class="line">            application = <span class="string">"$&#123;dubbo.application.id&#125;"</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">private</span> MessageService messageService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String sessionKey = <span class="string">"user"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接成功时</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnConnect</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConnect</span><span class="params">(SocketIOClient client)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取用户id和token</span></span><br><span class="line">        String userId = client.getHandshakeData().getSingleUrlParam(<span class="string">"userId"</span>);</span><br><span class="line"></span><br><span class="line">        String token = client.getHandshakeData().getSingleUrlParam(<span class="string">"token"</span>);</span><br><span class="line"></span><br><span class="line">        User user = userService.findUserById(Long.parseLong(userId));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//保存已连接的用户</span></span><br><span class="line">            SocketClientUtils.put(userId, client.getSessionId());</span><br><span class="line"></span><br><span class="line">            client.set(sessionKey, user);</span><br><span class="line"></span><br><span class="line">            logger.info(user.getMobile() + <span class="string">": 连接成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            client.disconnect();</span><br><span class="line"></span><br><span class="line">            logger.error(user.getMobile() + <span class="string">": 获取信息失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 断开连接时</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnDisconnect</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disConnect</span><span class="params">(SocketIOClient client)</span> </span>&#123;</span><br><span class="line">        User user = client.get(sessionKey);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != user) &#123;</span><br><span class="line">            SocketClientUtils.remove(user.getId() + <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">            logger.info(user.getMobile() + <span class="string">": 断开连接"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 聊天</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ackRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnEvent</span>(value = <span class="string">"chat"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eventChat</span><span class="params">(SocketIOClient client, AckRequest ackRequest, Message message)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ack数据: 在TCP/IP协议中，如果接收方成功的接收到数据，那么会回复一个ACK数据。通常ACK信号有自己固定的格式,长度大小,由接收方回复给发送方。</span></span><br><span class="line">        <span class="keyword">if</span> (ackRequest.isAckRequested()) &#123;</span><br><span class="line">            ackRequest.sendAckData(<span class="string">"服务器已经收到消息"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        messageService.saveMessage(message);</span><br><span class="line"></span><br><span class="line">        Boolean isGroupChat = message.getChatType().equalsIgnoreCase(<span class="string">"group"</span>);</span><br><span class="line"></span><br><span class="line">        Long to_userId = message.getRecipientUserId();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isGroupChat) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//在线</span></span><br><span class="line">            <span class="keyword">if</span> (SocketClientUtils.containsKey(to_userId + <span class="string">""</span>)) &#123;</span><br><span class="line">                SocketIOClient targetClient = server.getClient(SocketClientUtils.get(to_userId + <span class="string">""</span>));</span><br><span class="line"></span><br><span class="line">                targetClient.sendEvent(<span class="string">"chat"</span>, <span class="keyword">new</span> AckCallback&lt;String&gt;(String.class) &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">                        logger.info(to_userId + <span class="string">"已收到消息 ， ack 回复 ： "</span> + result);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        logger.info(to_userId + <span class="string">"接受超时"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a><font color="orange">后记</font></h2><p>这里只是很简单的使用了一下WebSocket, 实际开发中不可能这么简单, 复杂的逻辑, 心跳机制、断线重连等问题, 以及图片、语音和视频的传输.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://47.96.147.179/images/java/moxie_WebSocket.jpg&quot; alt=&quot;hello&quot; style=&quot;width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;&gt;&lt;/p&gt;
&lt;p&gt;以往在Web项目中, 如果要实现和服务器实时通讯可以通过轮询、长轮询来实现, 此时即浪费带宽又消耗服务器资源.但是使用WebSocket可以很好的解决该问题, 如果你担心不同浏览器不支持WebSocket, 那么&lt;a href=&quot;https://socket.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;socketio&lt;/a&gt;是一个不错的选择, 它封装了WebSocket、轮询和其他一些实时通讯方式.&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="WebSocket" scheme="http://yoursite.com/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>iTunes Connect构建版本不显示</title>
    <link href="http://yoursite.com/2018/01/02/iOS/iTunes%20Connect%20%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E4%B8%8D%E6%98%BE%E7%A4%BA/"/>
    <id>http://yoursite.com/2018/01/02/iOS/iTunes Connect 构建版本不显示/</id>
    <published>2018-01-02T00:53:57.000Z</published>
    <updated>2019-04-29T08:39:51.668Z</updated>
    
    <content type="html"><![CDATA[<p>最近稍微空闲了, 整理一下上传ipa到iTunes Connect时, 上传成功但是构建版本一直不显示的问题.</p><a id="more"></a><h2 id="问题说明"><a href="#问题说明" class="headerlink" title=" 问题说明 "></a><font color="orange"> 问题说明 </font></h2><p>公司的主项目上App Store时间的较早, 大约在2015年上传的, 之后一直都是迭代迭代, 老项目上传iTunes Connect没有出现上传成功但是不显示的问题.</p><p>最近公司新项目需要上传, 申请邓白氏编码、Apple开发者账户、证书、在iTunes Connect上面新建App都没有问题.但是在Xcode打包上传到App Store后,在iTunes Connect构建版本中居然找不到构建版本~~~</p><p>这里注意的是使用Xcode或者Application Loader上传时, 上传结果明明是Successfull, 但是iTunes Connect中构建版本却没有构建版本.此时说明你上传了无效的ipa包.</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title=" 解决方法 "></a><font color="orange"> 解决方法 </font></h2><p>大致原因主要有: </p><ul><li>苹果服务器经常性抽风, 多上传几次构建版本会出来</li><li>苹果关于App的政策发生变化, 导致上传无效的ipa包.</li></ul><p>第二种情况下, 使用Application Loader或其他途径上传iTunes Connect成功后, 如果是无效的ipa, 苹果可能会给你的开发者账号邮箱发送邮件, 可能由于<font color="red">使用了私有API</font>或者其他问题, 如<font color="red">从iOS10开始,苹果更加注重对用于隐私的保护,App 里边如果需要访问用户隐私,必须要做描述,所以要在 plist 文件中添加描述, 麦克风权限、相机权限和相册权限是必须添加的, 即使的你App没有用到这些功能</font>~~~~.</p><ul><li>私有API<ul><li>检查自己的代码, 发现有使用私有API的去掉</li><li>检查使用的第三方SDK, 咨询相关客服有没有使用私有API</li></ul></li><li><p>iOS 10以后权限</p><ul><li><p>在<code>Info.plist</code>中必须添加麦克风、相机和相册权限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 麦克风 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSMicrophoneUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问麦克风<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 相机 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSCameraUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问相机<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 相册 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSPhotoLibraryUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问相册<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>其他权限视情况添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 位置 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSLocationUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问位置<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 在使用期间访问位置 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSLocationWhenInUseUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要在使用期间访问位置<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 始终访问位置 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSLocationAlwaysUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要始终访问位置<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 日历 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSCalendarsUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问日历<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 提醒事项 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSRemindersUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问提醒事项<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 运动与健身 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSMotionUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> <span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问运动与健身<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 健康更新 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSHealthUpdateUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问健康更新 <span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 健康分享 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSHealthShareUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问健康分享<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 蓝牙 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSBluetoothPeripheralUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问蓝牙<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 媒体资料库 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSXXXleMusicUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问媒体资料库<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title=" 其他 "></a><font color="orange"> 其他 </font></h2><p>通过Application Loader上传ipa过慢, 解决方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~      </span><br><span class="line">mv .itmstransporter/ .old_itmstransporter/      </span><br><span class="line">&quot;/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/itms/bin/iTMSTransporter&quot;</span><br></pre></td></tr></table></figure></p><p>上传ipa包, 除了使用Application Loader和Xcode, 还可以使用 Appuploader和fastlane等.</p><h2 id="后记"><a href="#后记" class="headerlink" title=" 后记 "></a><font color="orange"> 后记 </font></h2><p>在添加完麦克风、相机和相册的权限信息之后, 重新打包上传成功后果然在iTunes Connect中出现了构建版本, 心中一万个草泥马路过…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近稍微空闲了, 整理一下上传ipa到iTunes Connect时, 上传成功但是构建版本一直不显示的问题.&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="资料整理" scheme="http://yoursite.com/tags/%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="坑点" scheme="http://yoursite.com/tags/%E5%9D%91%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>使用Gitlab-CI实现iOS的可持续集成</title>
    <link href="http://yoursite.com/2017/11/29/iOS/%E4%BD%BF%E7%94%A8Gitlab-CI%E5%AE%9E%E7%8E%B0iOS%E7%9A%84%E5%8F%AF%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    <id>http://yoursite.com/2017/11/29/iOS/使用Gitlab-CI实现iOS的可持续集成/</id>
    <published>2017-11-29T07:51:46.000Z</published>
    <updated>2019-04-29T08:39:51.669Z</updated>
    
    <content type="html"><![CDATA[<p>持续集成(Continuous Integration)是一种软件开发实践，即团队开发成员经常集成他们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p><p><img src="http://47.96.147.179/images/iOS/gitlab-ci-iOS.jpg" alt="hello" style="width: 50%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"></p><a id="more"></a><h1 id="常见持续集成框架"><a href="#常见持续集成框架" class="headerlink" title=" 常见持续集成框架 "></a><font color="orange"> 常见持续集成框架 </font></h1><ul><li><font color="red">Jenkins</font>: 基于Java语言开发的持续构建/部署开源免费的持续集成框架, 目前使用最多的持续集成框架.</li><li><font color="red">Buildbot</font>: 基于Python开发而成的项目.</li><li><font color="red">Travis CI</font>: 开源项目免费使用, 使用Travis Pro需要付费.</li><li><font color="red">Gitlab-CI</font>: 是Gitlab提供的一个持续集成套件, 在8.x以后版本已经集成进Gitlab中, 使用时配置Gitlab-runner即可.</li></ul><h1 id="Gitlab-CI"><a href="#Gitlab-CI" class="headerlink" title=" Gitlab-CI "></a><font color="orange"> Gitlab-CI </font></h1><h2 id="安装Gitalb"><a href="#安装Gitalb" class="headerlink" title=" 安装Gitalb "></a><font color="orange"> 安装Gitalb </font></h2><h3 id="安装"><a href="#安装" class="headerlink" title=" 安装 "></a><font color="green"> 安装 </font></h3><p>使用Gitlab-CI需要首先需要使用<a href="https://www.gitlab.com" target="_blank" rel="noopener">Gitlab</a>或者自己<a href="/2017/07/07/Java Web/CentOS 7搭建GitLab/index.html">安装Gitlab</a>到自己的服务器, 从8.0版本开始, Gitlab默认已经集成Gitlab-CI.</p><h3 id="汉化"><a href="#汉化" class="headerlink" title=" 汉化 "></a><font color="green"> 汉化 </font></h3><ul><li>Gitlab v8.8以及之前的版本汉化<ul><li><a href="https://gitlab.com/larryli/gitlab.git" target="_blank" rel="noopener">https://gitlab.com/larryli/gitlab.git</a></li></ul></li><li>Gitlab v8.8之后的汉化<ul><li><a href="https://gitlab.com/xhang/gitlab.git" target="_blank" rel="noopener">https://gitlab.com/xhang/gitlab.git</a></li><li>该项目延续了larryli的汉化.</li></ul></li></ul><h2 id="配置Gitlab-runner"><a href="#配置Gitlab-runner" class="headerlink" title=" 配置Gitlab-runner "></a><font color="orange"> 配置Gitlab-runner </font></h2><h3 id="Gitlab-CI和Gitlab-runner的区别"><a href="#Gitlab-CI和Gitlab-runner的区别" class="headerlink" title=" Gitlab-CI和Gitlab-runner的区别 "></a><font color="green"> Gitlab-CI和Gitlab-runner的区别 </font></h3><ul><li>Gitlab-CI<ul><li>它安装在Gitlab服务器</li><li>用来管理各个项目的各个runner</li></ul></li><li>Gitlab-runner<ul><li>它可安装在不同的操作系统</li><li>基于不同IDE、编译环境</li></ul></li></ul><h3 id="安装Gitlab-runner"><a href="#安装Gitlab-runner" class="headerlink" title=" 安装Gitlab-runner "></a><font color="green"> 安装Gitlab-runner </font></h3><font color="red">从Gitlab-runner 10.0开始, <code>gitlab-ci-multi-runner</code>重新命名为<code>gitlab-runner</code>, 安装时需要注意!</font><h5 id="GitLab-Runner和Gitlab版本支持情况"><a href="#GitLab-Runner和Gitlab版本支持情况" class="headerlink" title=" GitLab Runner和Gitlab版本支持情况 "></a><font color="green"> GitLab Runner和Gitlab版本支持情况 </font></h5><table><thead><tr><th style="text-align:center">GitLab Runner / GitLab</th><th style="text-align:center">9.0.x (03.2017)</th><th style="text-align:center">9.1.x (04.2017)</th><th style="text-align:center">9.2.x (05.2017)</th><th style="text-align:center">9.3.x (06.2017)</th><th style="text-align:center">9.4.x (07.2017)</th><th style="text-align:center">9.5.x (08.2017)</th><th style="text-align:center">10.0.x (09.2017)</th></tr></thead><tbody><tr><td style="text-align:center">v1.10.x</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✗</td></tr><tr><td style="text-align:center">v1.11.x</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✗</td></tr><tr><td style="text-align:center">v9.0.x</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">v9.1.x</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">v9.2.x</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">v9.3.x</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">v9.4.x</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">v9.5.x</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">v10.0.x</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td></tr></tbody></table><h5 id="不同系统安装gitlab-runner"><a href="#不同系统安装gitlab-runner" class="headerlink" title=" 不同系统安装gitlab-runner "></a><font color="green"> 不同系统安装gitlab-runner </font></h5><ul><li><a href="https://docs.gitlab.com/runner/install/linux-repository.html" target="_blank" rel="noopener">Install using GitLab’s repository for Debian/Ubuntu/CentOS/RedHat (preferred)</a></li><li><a href="https://docs.gitlab.com/runner/install/linux-manually.html" target="_blank" rel="noopener">Install on GNU/Linux manually (advanced) </a></li><li><a href="https://docs.gitlab.com/runner/install/osx.html" target="_blank" rel="noopener">Install on macOS (preferred) </a></li><li><a href="https://docs.gitlab.com/runner/install/windows.html" target="_blank" rel="noopener">Install on Windows (preferred) </a></li><li><a href="https://docs.gitlab.com/runner/install/docker.html" target="_blank" rel="noopener">Install as a Docker Service </a></li><li><a href="https://docs.gitlab.com/runner/install/autoscaling.html" target="_blank" rel="noopener">Install in Auto-scaling mode using Docker machine </a></li><li><a href="https://docs.gitlab.com/runner/install/freebsd.html" target="_blank" rel="noopener">Install on FreeBSD </a></li><li><a href="https://docs.gitlab.com/runner/install/kubernetes.html" target="_blank" rel="noopener">Install on Kubernetes </a></li><li><a href="https://docs.gitlab.com/runner/install/bleeding-edge.html" target="_blank" rel="noopener">Install the nightly binary manually (development) </a></li></ul><h5 id="Mac下安装gitlab-runner"><a href="#Mac下安装gitlab-runner" class="headerlink" title=" Mac下安装gitlab-runner "></a><font color="green"> Mac下安装gitlab-runner </font></h5><p>以下是官网10.0以后版本安装步骤:</p><ul><li>下载可执行文件: <code>sudo curl --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-darwin-amd64</code><ul><li>(由于墙的原因安装速度比较慢), 也可以下载该文件然后拷贝到<code>/usr/local/bin</code>目录中, 并且重命名为: <code>gitlab-runner</code>或者<code>gitlab-ci-multi-runner</code></li></ul></li><li>更改权限: <code>sudo chmod +x /usr/local/bin/gitlab-runner</code></li></ul><h5 id="Linux下安装gitlab-runner"><a href="#Linux下安装gitlab-runner" class="headerlink" title=" Linux下安装gitlab-runner "></a><font color="green"> Linux下安装gitlab-runner </font></h5><p>由于墙的原因下载很慢, 对于<code>ubuntu</code>、<code>debian</code>和<code>centOS</code>等Linux系统可以使用<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ci-multi-runner/" target="_blank" rel="noopener">清华大学开源软件镜像站</a>来进行安装, 它里面现在更新到了9.x版本的gitlab-runner.</p><p>如CentOS下使用yum安装:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#1、创建`gitlab-ci-multi-runner.repo`</span><br><span class="line">vi /etc/yum.repos.d/gitlab-ci-multi-runner.repo</span><br><span class="line"></span><br><span class="line">#2、将下面的内容写入并保存</span><br><span class="line">[gitlab-ci-multi-runner]</span><br><span class="line">name=gitlab-ci-multi-runner</span><br><span class="line">baseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ci-multi-runner/yum/el7</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packages.gitlab.com/gpg.key</span><br><span class="line"></span><br><span class="line">#3、运行命令</span><br><span class="line">sudo yum makecache</span><br><span class="line">sudo yum install gitlab-ci-multi-runner</span><br></pre></td></tr></table></figure></p><h4 id="注册Gitlab-runner"><a href="#注册Gitlab-runner" class="headerlink" title=" 注册Gitlab-runner "></a><font color="green"> 注册Gitlab-runner </font></h4><p>安装好gitlab-runner以后, 可以根据操作系统来注册runner(注意gitlab-runner版本不同, 命令也不同): </p><ul><li>Linux和Mac在终端中运行命令: <code>sudo gitlab-runner register</code></li><li><p>Windows需要<code>以管理员身份</code>打开cmd然后运行: <code>./gitlab-runner.exe register</code> </p></li><li><p>第一步输入Gitlab CI地址: 例如: 可以在<code>Gitlab管理区域中Runners中</code>查看url或者在<code>单个项目中的Runners中</code>查看url.</p></li><li>第二步输入项目CI或者共享Token: 决定该Runner是Shared Runner还是针对单个项目的Specific Runner, 可以在<code>Gitlab管理区域中Runners中</code>查看Token或者在<code>单个项目中的Runners中</code>查看Token. </li><li>第三步输入runner描述: runner的描述.</li><li>第四部输入runner标签: 可以有多个,使用逗号隔开</li><li>v10.0及以后版本才有配置(是否在没有tag时执行任务): 可以在Gitlab UI界面中更改. </li><li>v10.0及以后版本配置(是否锁定当前runner, 当当前项目执行该runner时): 可以在Gitlab UI界面中更改. </li><li>第五步输入runner的执行语言: 可以是<code>ssh</code>, <code>docker+machine</code>, <code>docker-ssh+machine</code>, <code>kubernetes</code>, <code>docker</code>, <code>parallels</code>, <code>virtualbox</code>, <code>docker-ssh</code>, <code>shell</code>.</li><li>最后在Gitlab中就会有一个runner. </li><li>查看当前机器的runner状态: <code>sudo gitlab-ci-multi-runner list</code></li></ul><h4 id="安装服务并启动gitlab-runner"><a href="#安装服务并启动gitlab-runner" class="headerlink" title=" 安装服务并启动gitlab-runner "></a><font color="green"> 安装服务并启动gitlab-runner </font></h4><ul><li><p>Windows</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-runner install</span><br><span class="line">gitlab-runner start</span><br></pre></td></tr></table></figure></li><li><p>Linux和Mac</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">gitlab-runner install</span><br><span class="line">gitlab-runner start</span><br></pre></td></tr></table></figure></li></ul><h3 id="在项目根目录配置-gitlab-ci-yml"><a href="#在项目根目录配置-gitlab-ci-yml" class="headerlink" title=" 在项目根目录配置.gitlab-ci.yml "></a><font color="orange"> 在项目根目录配置<code>.gitlab-ci.yml</code> </font></h3><p>当安装好Gitlab、Gitlab-CI以及注册好Gitlab-runner之后, 我们要做的事情就是在项目根目录中添加 <code>.gitlab-ci.yml</code> 文件配置构建任务。当我们添加了 <code>.gitlab-ci.yml</code> 了之后，每次提交代码或者合并 master 都会自动运行构建任务了。它使用<code>YAML</code>文件进行配置, 缩进时使用空格, 不要使用<code>tab</code>键.</p><ul><li><p><a href="https://docs.gitlab.com/ee/ci/yaml/README.html#configuration-of-your-jobs-with-gitlab-ci-yml" target="_blank" rel="noopener">英文文档</a></p></li><li><p>Stages: 阶段<br><code>.gitlab-ci.yml</code>中可以包含很多阶段: 安装依赖、运行测试、编译、部署测试服务器、部署生产服务器等流程。使用<code>stages</code>来定义,如下定义了<code>build</code>和<code>test</code>两个阶段: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stages:</span><br><span class="line">  - build</span><br><span class="line">  - test</span><br></pre></td></tr></table></figure><ul><li>特点<ul><li>所有Stages会按照顺序运行，即当一个Stage完成后，下一个Stage才会开始</li><li>只有当所有Stages完成后，该构建任务才会成功</li><li>如果任何一个Stage失败，那么后面的Stages不会执行，该构建任务失败</li></ul></li></ul></li><li><p>Job: 工作(工作名唯一, 并且不能为关键字)<br>Jobs 表示构建工作，表示某个Stage里面执行的工作。我们可以在Stages里面定义多个Jobs.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">build_project:</span><br><span class="line">  stage: build</span><br><span class="line">  script:</span><br><span class="line">    - xcodebuild clean -project ProjectName.xcodeproj -scheme SchemeName | xcpretty</span><br><span class="line">    - xcodebuild test -project ProjectName.xcodeproj -scheme SchemeName -destination &apos;platform=iOS Simulator,name=iPhone 6s,OS=9.2&apos; | xcpretty -s</span><br><span class="line">  tags:</span><br><span class="line">    - ios_9-2</span><br><span class="line">    - xcode_7-2</span><br><span class="line">    - osx_10-11</span><br><span class="line"></span><br><span class="line">archive_project:</span><br><span class="line">  stage: archive</span><br><span class="line">  script:</span><br><span class="line">    - xcodebuild clean archive -archivePath build/ProjectName -scheme SchemeName</span><br><span class="line">    - xcodebuild -exportArchive -exportFormat ipa -archivePath &quot;build/ProjectName.xcarchive&quot; -exportPath &quot;build/ProjectName.ipa&quot; -exportProvisioningProfile &quot;ProvisioningProfileName&quot;</span><br><span class="line">  only:</span><br><span class="line">    - master</span><br><span class="line">  artifacts:</span><br><span class="line">    paths:</span><br><span class="line">      - build/ProjectName.ipa</span><br><span class="line">  tags:</span><br><span class="line">    - ios_9-2</span><br><span class="line">    - xcode_7-2</span><br><span class="line">    - osx_10-11</span><br></pre></td></tr></table></figure><ul><li>Job中的<code>stage</code>: 表示所属的阶段</li><li>Job中的<code>script</code>: 定义由Runner执行的脚本</li><li>Job中的<code>only</code>: 表示只在 <code>分支/标签/触发器</code> 才会执行job</li><li>Job中的<code>except</code>: 表示除了<code>分支/标签/触发器</code>才会执行job</li><li>Job中的<code>tag</code>: 定义用于选择Runner的标签列表</li><li>Job中的<code>artifacts</code>: 定义Job中生成的附件</li><li>特点<ul><li>相同Stage中的Jobs会并行执行</li><li>相同Stage中的Jobs都执行成功时，该Stage才会成功</li><li>如果任何一个Job失败，那么该Stage失败，即该构建任务失败</li></ul></li></ul></li></ul><h2 id="iOS相关编译、打包命令"><a href="#iOS相关编译、打包命令" class="headerlink" title=" iOS相关编译、打包命令 "></a><font color="orange"> iOS相关编译、打包命令 </font></h2><p>持续集成无论是使用Gitlab-CI还是Jenkins, 对于iOS来说都需要知道底层的打包、编译、上传App Store、蒲公英的一些底层命令.</p><h3 id="xcodebuild命令"><a href="#xcodebuild命令" class="headerlink" title=" xcodebuild命令 "></a><font color="orange"> xcodebuild命令 </font></h3><p>xcodebuild 是苹果提供的打包项目或者工程的命令，了解该命令最好的方式就是终端使用<code>man xcodebuild</code>命令查看, <a href="https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html" target="_blank" rel="noopener">官方文档</a>.</p><h5 id="使用注意"><a href="#使用注意" class="headerlink" title=" 使用注意 "></a><font color="green"> 使用注意 </font></h5><ul><li>需要在包含<code>*.xcodeproj</code>的目录中执行<code>xcodebuild</code>目录, 如果该目录下有多个 projects，那么需要使用<code>-project</code>指定需要编译的项目。</li><li>不指定编译的target时, 默认会编译项目下第一个target.</li><li>当编译worspace时需要同时指定<code>-workspace</code>和<code>-scheme</code>参数, scheme参数决定哪个targets会被编译以及编译方式.</li><li><code>-list</code>、<code>-showBuildSetting</code>和<code>-showsdks</code>可以查看项目或者工程的信息.</li></ul><h5 id="常用xcodebuild命令"><a href="#常用xcodebuild命令" class="headerlink" title=" 常用xcodebuild命令 "></a><font color="green"> 常用xcodebuild命令 </font></h5><ul><li>查看Xcode所有可用的SDKs: <blockquote><p>   xcodebuild -showsdks</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">iOS SDKs:</span><br><span class="line">iOS 11.0                      -sdk iphoneos11.0</span><br><span class="line"></span><br><span class="line">iOS Simulator SDKs:</span><br><span class="line">Simulator - iOS 11.0          -sdk iphonesimulator11.0</span><br><span class="line"></span><br><span class="line">macOS SDKs:</span><br><span class="line">macOS 10.13                   -sdk macosx10.13</span><br><span class="line"></span><br><span class="line">tvOS SDKs:</span><br><span class="line">tvOS 11.0                     -sdk appletvos11.0</span><br><span class="line"></span><br><span class="line">tvOS Simulator SDKs:</span><br><span class="line">Simulator - tvOS 11.0         -sdk appletvsimulator11.0</span><br><span class="line"></span><br><span class="line">watchOS SDKs:</span><br><span class="line">watchOS 4.0                   -sdk watchos4.0</span><br><span class="line"></span><br><span class="line">watchOS Simulator SDKs:</span><br><span class="line">Simulator - watchOS 4.0       -sdk watchsimulator4.0</span><br></pre></td></tr></table></figure><ul><li><p>查看当前工程或项目build setting配置参数: </p><blockquote><p>   xcodebuild -showBuildSettings [-project xxx.xcodeproj | [-workspace xxx.xcworkspace -scheme schemename]]</p></blockquote></li><li><p>查看当前工程或项目的target、configurations或workspace中的schemes:</p><blockquote><p>   xcodebuild -list [-project xxx.xcodeproj | -workspace xxx.xcworkspace]</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Information about project &quot;HelloWorld&quot;:</span><br><span class="line">    Targets:</span><br><span class="line">        HelloWorld</span><br><span class="line">        HelloWorldTests</span><br><span class="line">        HelloWorldUITests</span><br><span class="line"></span><br><span class="line">    Build Configurations:</span><br><span class="line">        Debug</span><br><span class="line">        Release</span><br><span class="line"></span><br><span class="line">    If no build configuration is specified and -scheme is not passed then &quot;Release&quot; is used.</span><br><span class="line"></span><br><span class="line">    Schemes:</span><br><span class="line">        HelloWorld</span><br></pre></td></tr></table></figure><ul><li><p>编译、测试、分析、archive等: </p><ul><li><p>使用Cocoapods管理项目, 会生成xcworkspace文件, 使用该方式: </p><blockquote><p>   xcodebuild -workspace name.xcworkspace -scheme schemename [[-destination destinationspecifier] …] [-destination-timeout value] [-configuration configurationname] [-sdk [sdkfullpath | sdkname]] [action …] [buildsetting=value …] [-userdefault=value …]</p></blockquote></li><li><p>对于使用<code>xxx.xcodeproj</code>的项目, 使用该方式: </p><blockquote><p>   xcodebuild [-project name.xcodeproj] [[-target targetname] … | -alltargets] [-configuration configurationname] [-sdk [sdkfullpath | sdkname]] [action …] [buildsetting=value …] [-userdefault=value …]</p></blockquote></li><li>其中<code>action</code>对应的有(如果没有指定, 默认值是build): <ul><li><code>build</code>: 编译</li><li><code>analyze</code>: 分析</li><li><code>archive</code>: archive路径<ul><li>还需要配置<ul><li><code>-archivePath</code>: archive包存储路径</li><li><code>CODE_SIGN_IDENTITY</code>: 证书名称(Xcode8可以不配置,自动选择, 在钥匙串-证书中查看(类似: <code>Phone Distribution: Company name Co. Ltd (xxxxxxxx)</code>))</li><li><code>PROVISIONING_PROFILE</code>: 描述文件UUID(Xcode8可以不配置, 自动选择)</li></ul></li></ul></li><li><code>test</code>: 测试</li><li><code>installsrc</code>: </li><li><code>install</code>: 安装</li><li><code>clean</code>: 清理</li></ul></li><li>其中<code>-configuration</code>对应的值有(如果没有指定, 默认是Release): <ul><li><code>Debug</code>: 开发环境</li><li><code>Release</code>: 生产环境</li></ul></li><li>其中<code>-sdk</code>可以通过<code>xcodebuild -showsdks</code>获取</li><li>其中<code>-configuration</code>和<code>-target</code>可以通过<code>xcodebuild -list</code>获取</li></ul></li><li><p>打ipa包</p><ul><li>xcodebuild + xcrun的<code>PackageApplication</code>打包已经被废弃了, 不推荐使用</li><li><p>可以使用xcodebuild的方式</p><blockquote><p>   xcodebuild -exportArchive -archivePath xcarchivepath -exportPath destinationpath -exportOptionsPlist path</p></blockquote><ul><li><code>exportOptionsPlist</code>参数: 是一个plist文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">    &lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class="line">  &lt;dict&gt;</span><br><span class="line">    &lt;key&gt;teamID&lt;/key&gt;</span><br><span class="line">      &lt;string&gt;xxxxxxxx&lt;/string&gt; //TeamID</span><br><span class="line">    &lt;key&gt;method&lt;/key&gt;</span><br><span class="line">      &lt;string&gt;ad-hoc&lt;/string&gt; //ad-hoc打包</span><br><span class="line">    &lt;key&gt;compileBitcode&lt;/key&gt; //是否编译bitcode</span><br><span class="line">      &lt;false/&gt;</span><br><span class="line">  &lt;/dict&gt;</span><br><span class="line">&lt;/plist&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;持续集成(Continuous Integration)是一种软件开发实践，即团队开发成员经常集成他们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://47.96.147.179/images/iOS/gitlab-ci-iOS.jpg&quot; alt=&quot;hello&quot; style=&quot;width: 50%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="Xcode" scheme="http://yoursite.com/tags/Xcode/"/>
    
      <category term="持续集成" scheme="http://yoursite.com/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
      <category term="Gitlab" scheme="http://yoursite.com/tags/Gitlab/"/>
    
  </entry>
  
  <entry>
    <title>JS跨域问题</title>
    <link href="http://yoursite.com/2017/10/19/Java%20Web/JS%E8%B7%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2017/10/19/Java Web/JS跨域/</id>
    <published>2017-10-19T02:14:16.000Z</published>
    <updated>2019-04-29T08:39:51.633Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript不能再不同的主机名、端口和协议之间进行数据传输或者通讯, 此时称为JS跨域, 解决方法有很多, 这里介绍下使用Jsonp的方式.</p><a id="more"></a><h2 id="跨域解决方法"><a href="#跨域解决方法" class="headerlink" title=" 跨域解决方法 "></a><font color="orange"> 跨域解决方法 </font></h2><h3 id="Jsonp"><a href="#Jsonp" class="headerlink" title=" Jsonp "></a><font color="orange"> Jsonp </font></h3><p>JavaScript不能跨域访问, 但是可以引入不同域上面的js文件, Jsonp正是利用此特性来实现的.Jsonp返回的是一个JS文件, 返回的JS文件的时候会立即执行回调函数, 并且会把数据作为函数参数.</p><p>Jsonp需要前后端进行配合.</p><p>例如:<br>xxx.html中跨域请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#普通写法</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function hangler(jsondata) &#123;</span><br><span class="line">        //code</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;http://example.com/login/callback=handler&quot; /&gt;</span><br><span class="line"></span><br><span class="line">#JQuery其他写法, 默认参数名称callback</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url : &quot;http://example.com/login&quot;,</span><br><span class="line">    dataType : &quot;jsonp&quot;,</span><br><span class="line">    type : &quot;GET&quot;,</span><br><span class="line">    success : function(data)&#123;</span><br><span class="line">        //code</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>callback是回调的参数名, 也可以是其他的名称, handle是回调的函数名, 当请求完成时回执行该方法, 使用jQuery时<code>$.getJSON</code>方法会自动判断是否跨域，不跨域的话，就调用普通的ajax方法；跨域的话，则会以异步加载js文件的形式来调用jsonp的回调函数。</p><p>后台:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//指定请求路径、方法以及返回值类型</span><br><span class="line">@RequestMapping(value = &quot;/token/&#123;token&#125;&quot;, method = RequestMethod.GET,produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line">//返回JSON</span><br><span class="line">@ResponseBody</span><br><span class="line">//@PathVariable从请求地址中绑定数据</span><br><span class="line">//callback为Jsonp请求时的函数名</span><br><span class="line">public String getUserByToken(@PathVariable String token, String callback) &#123;</span><br><span class="line">    Result result = userService.getUserByToken(token);</span><br><span class="line">    //Jsonp请求返回js文件</span><br><span class="line">    if (StringUtils.isNoneBlank(callback)) &#123;</span><br><span class="line">        return callback + &quot;(&quot; + JsonUtils.objectToJson(result) + &quot;)&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return JsonUtils.objectToJson(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Spring4.1版本以后还可以:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/token/&#123;token&#125;&quot;, method = RequestMethod.GET)</span><br><span class="line">@ResponseBody</span><br><span class="line">public Object getUserByToken(@PathVariable String token, String callback) &#123;</span><br><span class="line">    Result result = userService.getUserByToken(token);</span><br><span class="line">    if (StringUtils.isNoneBlank(callback)) &#123;</span><br><span class="line">        MappingJacksonValue value = new MappingJacksonValue(result);</span><br><span class="line">        //设置回调方法</span><br><span class="line">        value.setJsonpFunction(callback);</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript不能再不同的主机名、端口和协议之间进行数据传输或者通讯, 此时称为JS跨域, 解决方法有很多, 这里介绍下使用Jsonp的方式.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="JavaScript跨域" scheme="http://yoursite.com/tags/JavaScript%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="Jsonp" scheme="http://yoursite.com/tags/Jsonp/"/>
    
  </entry>
  
  <entry>
    <title>Shell脚本学习</title>
    <link href="http://yoursite.com/2017/09/15/Shell%E5%AD%A6%E4%B9%A0/Shell%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/09/15/Shell学习/Shell学习/</id>
    <published>2017-09-15T06:37:55.000Z</published>
    <updated>2019-04-29T08:39:51.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font color="orange">前言</font></h2><p>最近希望可以一键自动打包iOS App Store上传的ipa包, 所有来学习一下Shell脚本.</p><p><img src="http://47.96.147.179/images/others/shell_top.jpg" alt="hello" style="width: 50%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"></p><a id="more"></a><h2 id="Shell"><a href="#Shell" class="headerlink" title=" Shell "></a><font color="orange"> Shell </font></h2><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。<br>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。<br>Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。</p><h3 id="Shell-脚本"><a href="#Shell-脚本" class="headerlink" title=" Shell 脚本"></a><font color="orange"> Shell 脚本</font></h3><p>Shell 脚本（shell script），是一种为 shell 编写的脚本程序。<br>业界所说的 shell 通常都是指 <code>shell 脚本</code>，但是要知道，shell 和 shell script 是两个不同的概念。<font color="red">本文出现的 “shell编程” 都是指 shell 脚本编程，不是指开发 shell 自身。</font>. 它有点像Windows系统下面的<code>.bat</code>批处理文件.</p><h3 id="Shell-环境"><a href="#Shell-环境" class="headerlink" title=" Shell 环境"></a><font color="orange"> Shell 环境</font></h3><p>Shell 编程跟 java、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。</p><ul><li>Linux 的 Shell 种类众多，常见的有:<ul><li>Bourne Shell（/usr/bin/sh或/bin/sh）</li><li>Bourne Again Shell（/bin/bash）</li><li>C Shell（/usr/bin/csh）</li><li>K Shell（/usr/bin/ksh）</li><li>Shell for Root（/sbin/sh）</li></ul></li></ul><p>由于Bourne Again Shell的易用性和免费，Bash 在日常工作中被广泛使用。同时，Bash 也是大多数Linux 系统默认的 Shell。<br>在一般情况下，人们并不区分 Bourne Shell 和 Bourne Again Shell，所以，像 <code>#!/bin/sh</code>，它同样也可以改为 <code>#!/bin/bash</code>。</p><h3 id="第一个-Shell-脚本"><a href="#第一个-Shell-脚本" class="headerlink" title="第一个 Shell 脚本"></a><font color="orange">第一个 Shell 脚本</font></h3><p>打开文本编辑器(可以使用 vi/vim 命令来创建文件)，新建一个文件 test.sh，扩展名为 sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">echo "Hello World!"</span><br></pre></td></tr></table></figure><ul><li><code>#!</code>: 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序。</li><li><code>echo</code>: 命令用于向窗口输出文本。</li></ul><h4 id="运行-Shell-脚本有两种方法："><a href="#运行-Shell-脚本有两种方法：" class="headerlink" title="运行 Shell 脚本有两种方法："></a><font color="green">运行 Shell 脚本有两种方法：</font></h4><ul><li>作为可执行程序<br>进入test.sh所在的目录, 运行下面的代码</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./test.sh  #使脚本具有执行权限</span><br><span class="line">./test.sh  #执行脚本</span><br></pre></td></tr></table></figure><ul><li>作为解释器参数<br>这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。如: </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh test.sh</span><br></pre></td></tr></table></figure><h3 id="Shell-变量"><a href="#Shell-变量" class="headerlink" title=" Shell 变量"></a><font color="orange"> Shell 变量</font></h3><h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a><font color="green">定义变量</font></h4><ul><li><p>定义变量时，变量名不加美元符号（$，PHP语言中变量需要），如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">homepage="coppco.github.io"</span><br></pre></td></tr></table></figure><ul><li><font color="red">注意事项</font><ul><li>变量名和等号之间不能有空格</li><li>首个字符必须为字母（a-z，A-Z）。</li><li>中间不能有空格，可以使用下划线_。</li><li>不能使用标点符号。</li><li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li></ul></li></ul></li><li><p>除了显式地直接赋值，还可以用语句给变量赋值，如：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for skill in Ada Coffe Action Java; do</span><br><span class="line">echo "I am good at $&#123;skill&#125;Script"</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a><font color="green">使用变量</font></h4><p>使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo $homepage</span><br><span class="line">echo $&#123;skill&#125;</span><br></pre></td></tr></table></figure><ul><li><font color="red">注意事项</font><ul><li>单独使用时可以不添加花括号</li><li>在上例中, 必须带花括号用来识别变量的边界, 如<code>echo &quot;I am good at ${skill}Script&quot;</code>, 如果不加花括号<code>echo &quot;I am good at $skillScript&quot;</code>, 那么会把$skillScript当做变量来处理.</li><li>已经定义的变量, 可以被重新定义</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">homepage="coppco.github.io"</span><br><span class="line">echo homepage</span><br><span class="line">homepage="https://coppco.github.io"</span><br><span class="line">echo homepage</span><br></pre></td></tr></table></figure><h4 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a><font color="green">只读变量</font></h4><p>使用 <code>readonly</code> 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">readonly homepage="coppco.github.io"</span><br><span class="line"></span><br><span class="line">version="1.0.0"</span><br><span class="line">readonly version</span><br><span class="line">version="1.0.1"</span><br></pre></td></tr></table></figure><p>再次修改命令行会提示: <font color="red"><code>version: readonly variable</code></font></p><h4 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a><font color="green">删除变量</font></h4><p>使用 unset 命令可以删除变量。语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset 变量名</span><br></pre></td></tr></table></figure><ul><li><font color="red">注意事项</font><ul><li>变量被删除后不能再次使用</li><li>unset 命令不能删除只读变量。</li></ul></li></ul><h4 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a><font color="green">变量类型</font></h4><ol><li>局部变量: 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</li><li>环境变量: 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</li><li>shell变量: shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</li></ol><h3 id="Shell-字符串"><a href="#Shell-字符串" class="headerlink" title="Shell 字符串"></a><font color="orange">Shell 字符串</font></h3><h4 id="字符串定义"><a href="#字符串定义" class="headerlink" title="字符串定义"></a><font color="green">字符串定义</font></h4><p>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。</p><ul><li><font color="red">注意事项</font><ul><li>单引号字符串的限制：<ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li><li>单引号字串中不能出现单引号（对单引号使用转义符后也不行）。</li></ul></li><li>单双引号的优点：<ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul></li><li>反引号``<ul><li>反引号是命令替换, Shell可以先执行``中的命令, 将结果保存起来, 在适当的地方输出.</li></ul></li></ul></li></ul><h4 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a><font color="green">拼接字符串</font></h4><p>可以在双引号字符串中使用变量, 变量也可以使用双引号括起来:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">https_prefix="https://"</span><br><span class="line">http_prefix="http://"</span><br><span class="line">url="coppco.github.io"</span><br><span class="line">baidu_http="$http_prefix"$url""</span><br><span class="line">baidu_https="$https_prefix$&#123;url&#125;"</span><br><span class="line"></span><br><span class="line">echo $baidu_http</span><br><span class="line">echo $baidu_https</span><br><span class="line">echo "$http_prefix$url"</span><br><span class="line">echo "$http_prefix"$&#123;url&#125;""</span><br></pre></td></tr></table></figure><h4 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a><font color="green">获取字符串长度</font></h4><ul><li>格式: <code>${ #变量名 }</code>, <font color="red">这里有一个bug, 如果#和{或者}连在会出错.</font></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string="abcd"</span><br><span class="line">echo $&#123;#string&#125; #输出 4</span><br></pre></td></tr></table></figure><h4 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a><font color="green">提取子字符串</font></h4><ul><li><code># 号截取</code>: 删除左边字符，保留右边字符。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;var#*子字符串&#125;</span><br></pre></td></tr></table></figure></li></ul><p>说明: 其中 var 是变量名，# 号是运算符，<code>*子字符串</code> 表示从左边开始删除第一个 <code>子字符串</code> 及左边的所有字符</p><ul><li><code>## 号截取</code>: 删除左边字符，保留右边字符。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;var##*子字符串&#125;</span><br></pre></td></tr></table></figure></li></ul><p>说明: 表示从左边开始删除最后（最右边）一个 <code>子字符串</code> 号及左边的所有字符</p><ul><li><code>%号截取</code>: 删除右边字符，保留左边字符<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;var%子字符串*&#125;</span><br></pre></td></tr></table></figure></li></ul><p>说明: 表示从右边开始，删除第一个 <code>子字符串</code> 号及右边的字符</p><ul><li><code>%% 号截取</code>: 删除右边字符，保留左边字符<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;var%%子字符串*&#125;</span><br></pre></td></tr></table></figure></li></ul><p>说明: 表示从右边开始，删除最后（最左边）一个 <code>子字符串</code> 号及右边的字符</p><ul><li>从左边第几个字符开始，及字符的个数 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;var:0:5&#125;</span><br></pre></td></tr></table></figure></li></ul><p>说明: 其中的 0 表示左边第一个字符开始，5 表示字符的总个数。</p><ul><li>从左边第几个字符开始，一直到结束。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;var:7&#125;</span><br></pre></td></tr></table></figure></li></ul><p>说明: 其中的 7 表示左边第8个字符开始，一直到结束。</p><ul><li>从右边第几个字符开始，及字符的个数<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;var:0-7:3&#125;</span><br></pre></td></tr></table></figure></li></ul><p>说明: 其中的 0-7 表示右边算起第七个字符开始，3 表示字符的个数。</p><ul><li>从右边第几个字符开始，一直到结束。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;var:0-7&#125;</span><br></pre></td></tr></table></figure></li></ul><p>说明: 表示从右边第七个字符开始，一直到结束。</p><h4 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串"></a><font color="green">查找子字符串</font></h4><p>下面脚本中 “`” 是反引号，而不是单引号 “‘“，不要看错了哦。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string="runoob is a great company"</span><br><span class="line">echo `expr index "$string" is`  # 输出 8</span><br></pre></td></tr></table></figure><h3 id="Shell-数组"><a href="#Shell-数组" class="headerlink" title="Shell 数组"></a><font color="orange">Shell 数组</font></h3><p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。数组元素的下标由0开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于0。</p><h4 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a><font color="green">定义数组</font></h4><p>在Shell中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名=(值1 值2 ... 值n)</span><br></pre></td></tr></table></figure><p>还可以单独定义数组的各个分量:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array[0]=0</span><br><span class="line">array[1]=1</span><br><span class="line">array[2]=2</span><br></pre></td></tr></table></figure></p><h4 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a><font color="green">读取数组</font></h4><p>读取数组中一个元素值的一般格式是：<code>${数组名[下标]}</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;array[0]&#125;</span><br></pre></td></tr></table></figure><p>使用@符号可以获取数组中的所有元素: <code>${数组名[@]}</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;array[@]&#125;</span><br></pre></td></tr></table></figure></p><h4 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a><font color="green">获取数组的长度</font></h4><ul><li>获取数组的长度<br>格式: <code>${ #数组名[@] }</code>或者<code>${ #数组名[*] }</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123; #arrays[@] &#125;</span><br></pre></td></tr></table></figure><ul><li>获取单个元素的长度<br>格式: <code>${ #数组名[下标] }</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123; #arrays[0] &#125;</span><br></pre></td></tr></table></figure><h3 id="Shell-注释"><a href="#Shell-注释" class="headerlink" title="Shell 注释"></a><font color="orange">Shell 注释</font></h3><p>以”#”开头的行就是注释，会被解释器忽略。sh中没有多行注释, 需要每行都添加#才可以。每一行加个#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。</p><h3 id="Shell-传递参数"><a href="#Shell-传递参数" class="headerlink" title="Shell 传递参数"></a><font color="orange">Shell 传递参数</font></h3><p>我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">echo &quot;Shell 传递参数实例！&quot;;</span><br><span class="line">echo &quot;执行的文件名：$0&quot;;</span><br><span class="line">echo &quot;第一个参数为：$1&quot;;</span><br><span class="line">echo &quot;第二个参数为：$2&quot;;</span><br><span class="line">echo &quot;第三个参数为：$3&quot;;</span><br></pre></td></tr></table></figure><p>执行该sh文件传递三个参数:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x test.sh </span><br><span class="line">$ ./test.sh 1 2 3</span><br><span class="line">Shell 传递参数实例！</span><br><span class="line">执行的文件名：./test.sh</span><br><span class="line">第一个参数为：1</span><br><span class="line">第二个参数为：2</span><br><span class="line">第三个参数为：3</span><br></pre></td></tr></table></figure></p><table><thead><tr><th style="text-align:center">参数处理</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">$n</td><td style="text-align:center">n表示数字, 从1开始表示第一个参数</td></tr><tr><td style="text-align:center">$#</td><td style="text-align:center">传递到脚本的参数个数</td></tr><tr><td style="text-align:center">$*</td><td style="text-align:center">以一个单字符串显示所有向脚本传递的参数。如”$*”用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td></tr><tr><td style="text-align:center">$$</td><td style="text-align:center">脚本运行的当前进程ID号</td></tr><tr><td style="text-align:center">$!</td><td style="text-align:center">后台运行的最后一个进程的ID号</td></tr><tr><td style="text-align:center">$@</td><td style="text-align:center">与$*相同，但是使用时加引号，并在引号中返回每个参数。如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。</td></tr><tr><td style="text-align:center">$-</td><td style="text-align:center">显示Shell使用的当前选项，与set命令功能相同。</td></tr><tr><td style="text-align:center">$?</td><td style="text-align:center">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><h3 id="Shell-基本运算符"><a href="#Shell-基本运算符" class="headerlink" title="Shell 基本运算符"></a><font color="orange">Shell 基本运算符</font></h3><p>Shell 和其他编程语言一样，支持多种运算符，包括：</p><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a><font color="green">算术运算符</font></h4><ul><li>注意事项<ul><li>条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。</li><li>乘号(<code>*</code>)前边必须加反斜杠(<code>\</code>)才能实现乘法运算；</li><li>在 MAC 中 shell 的 expr 语法是：$((表达式))，此处表达式中的 “*“ 不需要转义符号 “\” , Mac中如 <code>$(( $a != $b ))</code>、<code>$(($a*$b))</code><br>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</li></ul></li></ul><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">说明</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加法</td><td style="text-align:center">`expr $a + $b` 结果为 30。</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减法</td><td style="text-align:center">`expr $a - $b` 结果为 -10。</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘法</td><td style="text-align:center">`expr $a \* $b` 结果为  200。</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除法</td><td style="text-align:center">`expr $b / $a` 结果为 2。</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">取余</td><td style="text-align:center">`expr $b % $a` 结果为 0。</td></tr><tr><td style="text-align:center">=</td><td style="text-align:center">赋值</td><td style="text-align:center">a=$b 将把变量 b 的值赋给 a。</td></tr><tr><td style="text-align:center">==</td><td style="text-align:center">相等。用于比较两个数字，相同则返回 true。</td><td style="text-align:center">[ $a == $b ] 返回 false。</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">不相等。用于比较两个数字，不相同则返回 true。</td><td style="text-align:center">[ $a != $b ] 返回 true。</td></tr></tbody></table><p>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 <code>awk</code> 和 <code>expr</code>，expr 最常用。expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p><p>例如，两个数相加(注意使用的是反引号 ` 而不是单引号 ‘)：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line">val=`expr 2 + 2`</span><br><span class="line">echo "两数之和为 : $val"</span><br></pre></td></tr></table></figure></p><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a><font color="green">关系运算符</font></h4><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。<br>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">说明</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">-eq</td><td style="text-align:center">检测两个数是否相等，相等返回 true。</td><td style="text-align:center">[ $a -eq $b ] 返回 false。</td></tr><tr><td style="text-align:center">-ne</td><td style="text-align:center">检测两个数是否相等，不相等返回 true。</td><td style="text-align:center">[ $a -ne $b ] 返回 true。</td></tr><tr><td style="text-align:center">-gt</td><td style="text-align:center">检测左边的数是否大于右边的，如果是，则返回 true。</td><td style="text-align:center">[ $a -gt $b ] 返回 false。</td></tr><tr><td style="text-align:center">-lt</td><td style="text-align:center">检测左边的数是否小于右边的，如果是，则返回 true。</td><td style="text-align:center">[ $a -lt $b ] 返回 true。</td></tr><tr><td style="text-align:center">-ge</td><td style="text-align:center">检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td style="text-align:center">[ $a -ge $b ] 返回 false。</td></tr><tr><td style="text-align:center">-le</td><td style="text-align:center">检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td style="text-align:center">[ $a -le $b ] 返回 true。</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=100</span><br><span class="line">b=200</span><br><span class="line"><span class="meta">#</span>对于数字下面两个都可以</span><br><span class="line"><span class="meta">#</span>if [ $a -eq $b ]</span><br><span class="line">if [ $a == $b ]</span><br><span class="line">then</span><br><span class="line">echo "$a -eq $b : a 等于 b"</span><br><span class="line">else</span><br><span class="line">echo "$a -eq $b: a 不等于 b"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a><font color="green">布尔运算符</font></h4><p>下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">说明</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">!</td><td style="text-align:center">非运算，表达式为 true 则返回 false，否则返回 true。</td><td style="text-align:center">[ ! false ] 返回 true。</td></tr><tr><td style="text-align:center">-o</td><td style="text-align:center">或运算，有一个表达式为 true 则返回 true。</td><td style="text-align:center">[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td></tr><tr><td style="text-align:center">-a</td><td style="text-align:center">与运算，两个表达式都为 true 才返回 true。</td><td style="text-align:center">[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td></tr></tbody></table><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a><font color="green">逻辑运算符</font></h4><p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:<br>(ll在表格中显示有问题, 实际上是<code>enter</code>上面的符号). <font color="red">它和布尔运算符有区别,  它需要外面有两个[]括住.</font></p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">说明</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">逻辑的 AND</td><td style="text-align:center">[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td></tr><tr><td style="text-align:center">ll</td><td style="text-align:center">逻辑的 OR</td><td style="text-align:center">[[ $a -lt 100 ll $b -gt 100 ]] 返回 true</td></tr></tbody></table><h4 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a><font color="green">字符串运算符</font></h4><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">说明</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">检测两个字符串是否相等，相等返回 true。</td><td style="text-align:center">[ $a = $b ] 返回 false。</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">检测两个字符串是否相等，不相等返回 true。</td><td style="text-align:center">[ $a != $b ] 返回 true。</td></tr><tr><td style="text-align:center">-z</td><td style="text-align:center">检测字符串长度是否为0，为0返回 true。</td><td style="text-align:center">[ -z $a ] 返回 false。</td></tr><tr><td style="text-align:center">-n</td><td style="text-align:center">检测字符串长度是否为0，不为0返回 true。</td><td style="text-align:center">[ -n $a ] 返回 true。</td></tr><tr><td style="text-align:center">$字符串</td><td style="text-align:center">检测字符串是否为空，不为空返回 true。</td><td style="text-align:center">[ $a ] 返回 true。</td></tr></tbody></table><h4 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a><font color="green">文件测试运算符</font></h4><p>文件测试运算符用于检测 Unix 文件的各种属性。</p><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">说明</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">-b file</td><td style="text-align:center">检测文件是否是块设备文件，如果是，则返回 true。</td><td style="text-align:center">[ -b $file ] 返回 false。</td></tr><tr><td style="text-align:center">-c file</td><td style="text-align:center">检测文件是否是字符设备文件，如果是，则返回 true。</td><td style="text-align:center">[ -c $file ] 返回 false。</td></tr><tr><td style="text-align:center">-d file</td><td style="text-align:center">检测文件是否是目录，如果是，则返回 true。</td><td style="text-align:center">[ -d $file ] 返回 false。</td></tr><tr><td style="text-align:center">-f file</td><td style="text-align:center">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td style="text-align:center">[ -f $file ] 返回 true。</td></tr><tr><td style="text-align:center">-g file</td><td style="text-align:center">检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td style="text-align:center">[ -g $file ] 返回 false。</td></tr><tr><td style="text-align:center">-k file</td><td style="text-align:center">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。    [ -k $file ] 返回 false。</td></tr><tr><td style="text-align:center">-p file</td><td style="text-align:center">检测文件是否是有名管道，如果是，则返回 true。</td><td style="text-align:center">[ -p $file ] 返回 false。</td></tr><tr><td style="text-align:center">-u file</td><td style="text-align:center">检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td style="text-align:center">[ -u $file ] 返回 false。</td></tr><tr><td style="text-align:center">-r file</td><td style="text-align:center">检测文件是否可读，如果是，则返回 true。</td><td style="text-align:center">[ -r $file ] 返回 true。</td></tr><tr><td style="text-align:center">-w file</td><td style="text-align:center">检测文件是否可写，如果是，则返回 true。</td><td style="text-align:center">[ -w $file ] 返回 true。</td></tr><tr><td style="text-align:center">-x file</td><td style="text-align:center">检测文件是否可执行，如果是，则返回 true。</td><td style="text-align:center">[ -x $file ] 返回 true。</td></tr><tr><td style="text-align:center">-s file</td><td style="text-align:center">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td><td style="text-align:center">[ -s $file ] 返回 true。</td></tr><tr><td style="text-align:center">-e file</td><td style="text-align:center">检测文件（包括目录）是否存在，如果是，则返回 true。</td><td style="text-align:center">[ -e $file ] 返回 true。</td></tr></tbody></table><h3 id="Shell-echo命令"><a href="#Shell-echo命令" class="headerlink" title="Shell echo命令"></a><font color="orange">Shell echo命令</font></h3><p>用于字符串的输出。命令格式：<code>echo string</code>, 支持字符串常量、变量、转义字符串等输出.</p><h4 id="显示普通字符串"><a href="#显示普通字符串" class="headerlink" title="显示普通字符串"></a><font color="green">显示普通字符串</font></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "It is a test"</span><br></pre></td></tr></table></figure><p>说明: 这里的双引号完全可以省略，以下命令与上面实例效果一致</p><h4 id="显示转义字符"><a href="#显示转义字符" class="headerlink" title="显示转义字符"></a><font color="green">显示转义字符</font></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "\"It is a test\""</span><br></pre></td></tr></table></figure><p>说明: 这里的双引号也可以省略</p><h4 id="显示变量"><a href="#显示变量" class="headerlink" title="显示变量"></a><font color="green">显示变量</font></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name "Are you OK ?" </span><br><span class="line">echo $name</span><br></pre></td></tr></table></figure><h4 id="显示换行"><a href="#显示换行" class="headerlink" title="显示换行"></a><font color="green">显示换行</font></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo -e "OK! \n" # -e 开启转义</span><br><span class="line">echo "It it a test"</span><br></pre></td></tr></table></figure><h4 id="显示不换行"><a href="#显示不换行" class="headerlink" title="显示不换行"></a><font color="green">显示不换行</font></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo -e "OK! \c" # -e 开启转义 \c 不换行</span><br><span class="line">echo "It is a test"</span><br></pre></td></tr></table></figure><h4 id="显示结果定向至文件"><a href="#显示结果定向至文件" class="headerlink" title="显示结果定向至文件"></a><font color="green">显示结果定向至文件</font></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "It is a test" &gt; myfile</span><br></pre></td></tr></table></figure><h4 id="原样输出字符串，不进行转义或取变量-用单引号"><a href="#原样输出字符串，不进行转义或取变量-用单引号" class="headerlink" title="原样输出字符串，不进行转义或取变量(用单引号)"></a><font color="green">原样输出字符串，不进行转义或取变量(用单引号)</font></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo '$name\"'</span><br></pre></td></tr></table></figure><h4 id="显示命令执行结果"><a href="#显示命令执行结果" class="headerlink" title="显示命令执行结果"></a><font color="green">显示命令执行结果</font></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo `date`</span><br></pre></td></tr></table></figure><h3 id="Shell-printf-命令"><a href="#Shell-printf-命令" class="headerlink" title="Shell printf 命令"></a><font color="orange">Shell printf 命令</font></h3><p>printf 命令模仿 C 程序库（library）里的 printf() 程序。<br>标准所定义，因此使用printf的脚本比使用echo移植性好。<br>printf 使用引用文本或空格分隔的参数，外面可以在printf中使用格式化字符串，还可以制定字符串的宽度、左右对齐方式等。默认printf不会像 echo 自动添加换行符，我们可以手动添加 \n。<br>它的格式: <code>printf  format-string  [arguments...]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf "%-10s %-8s %-4.2f\n" 郭靖 男 66.1234</span><br></pre></td></tr></table></figure><p>%d: Decimal 十进制整数 – 对应位置参数必须是十进制整数<br>%s: String 字符串 – 对应位置参数必须是字符串或者字符型<br>%c: Char 字符 – 对应位置参数必须是字符串或者字符型<br>%f: Float 浮点 – 对应位置参数必须是数字型<br>%-10s 指一个宽度为10个字符（-表示左对齐，没有则表示右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。<br>%-4.2f 指格式化为小数，其中.2指保留2位小数</p><h4 id="printf的转义序列"><a href="#printf的转义序列" class="headerlink" title="printf的转义序列"></a><font color="green">printf的转义序列</font></h4><table><thead><tr><th style="text-align:center">序列</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">\a</td><td style="text-align:center">警告字符，通常为ASCII的BEL字符</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">后退</td></tr><tr><td style="text-align:center">\c</td><td style="text-align:center">抑制（不显示）输出结果中任何结尾的换行字符（只在%b格式指示符控制下的参数字符串中有效），而且，任何留在参数里的字符、任何接下来的参数以及任何留在格式字符串中的字符，都被忽略</td></tr><tr><td style="text-align:center">\f</td><td style="text-align:center">换页（formfeed）</td></tr><tr><td style="text-align:center">\n</td><td style="text-align:center">换行</td></tr><tr><td style="text-align:center">\r</td><td style="text-align:center">回车（Carriage return）</td></tr><tr><td style="text-align:center">\t</td><td style="text-align:center">水平制表符</td></tr><tr><td style="text-align:center">\v</td><td style="text-align:center">垂直制表符</td></tr><tr><td style="text-align:center">\</td><td style="text-align:center">一个字面上的反斜杠字符</td></tr><tr><td style="text-align:center">\ddd</td><td style="text-align:center">表示1到3位数八进制值的字符。仅在格式字符串中有效</td></tr><tr><td style="text-align:center">\0ddd</td><td style="text-align:center">表示1到3位的八进制值字符</td></tr></tbody></table><h3 id="Shell-test-命令"><a href="#Shell-test-命令" class="headerlink" title="Shell test 命令"></a><font color="orange">Shell test 命令</font></h3><p>Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</p><h4 id="数值测试"><a href="#数值测试" class="headerlink" title="数值测试"></a><font color="green">数值测试</font></h4><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">-eq</td><td style="text-align:center">等于则为真</td></tr><tr><td style="text-align:center">-ne</td><td style="text-align:center">不等于则为真</td></tr><tr><td style="text-align:center">-gt</td><td style="text-align:center">大于则为真</td></tr><tr><td style="text-align:center">-ge</td><td style="text-align:center">大于等于则为真</td></tr><tr><td style="text-align:center">-lt</td><td style="text-align:center">小于则为真</td></tr><tr><td style="text-align:center">-le</td><td style="text-align:center">小于等于则为真</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num1=100</span><br><span class="line">num2=100</span><br><span class="line">if test $[num1] -eq $[num2]</span><br><span class="line">then</span><br><span class="line">    echo '两个数相等！'</span><br><span class="line">else</span><br><span class="line">    echo '两个数不相等！'</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span>结果为: 两个数不相等!</span><br></pre></td></tr></table></figure><p>代码中的 [] 执行基本的算数运算，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line">a=5</span><br><span class="line">b=6</span><br><span class="line">result=$[a+b] # 注意等号两边不能有空格</span><br><span class="line">echo "result 为： $result"</span><br></pre></td></tr></table></figure><h4 id="字符串测试"><a href="#字符串测试" class="headerlink" title="字符串测试"></a><font color="green">字符串测试</font></h4><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">等于则为真</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">不相等则为真</td></tr><tr><td style="text-align:center">-z 字符串</td><td style="text-align:center">字符串的长度为零则为真</td></tr><tr><td style="text-align:center">-n 字符串</td><td style="text-align:center">字符串的长度不为零则为真</td></tr></tbody></table><h4 id="文件测试"><a href="#文件测试" class="headerlink" title="文件测试"></a><font color="green">文件测试</font></h4><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">-e 文件名</td><td style="text-align:center">如果文件存在则为真</td></tr><tr><td style="text-align:center">-r 文件名</td><td style="text-align:center">如果文件存在且可读则为真</td></tr><tr><td style="text-align:center">-w 文件名</td><td style="text-align:center">如果文件存在且可写则为真</td></tr><tr><td style="text-align:center">-x 文件名</td><td style="text-align:center">如果文件存在且可执行则为真</td></tr><tr><td style="text-align:center">-s 文件名</td><td style="text-align:center">如果文件存在且至少有一个字符则为真</td></tr><tr><td style="text-align:center">-d 文件名</td><td style="text-align:center">如果文件存在且为目录则为真</td></tr><tr><td style="text-align:center">-f 文件名</td><td style="text-align:center">如果文件存在且为普通文件则为真</td></tr><tr><td style="text-align:center">-c 文件名</td><td style="text-align:center">如果文件存在且为字符型特殊文件则为真</td></tr><tr><td style="text-align:center">-b 文件名</td><td style="text-align:center">如果文件存在且为块特殊文件则为真</td></tr></tbody></table><h3 id="Shell-流程控制"><a href="#Shell-流程控制" class="headerlink" title="Shell 流程控制"></a><font color="orange">Shell 流程控制</font></h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a><font color="green">if</font></h4><p>在sh/bash里可不能这么写，如果else分支没有语句执行，就不要写这个else。</p><p>if 语句语法格式：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN </span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><p>写成一行（适用于终端命令提示符）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if [ $(ps -ef | grep -c &quot;ssh&quot;) -gt 1 ]; then echo &quot;true&quot;; fi</span><br></pre></td></tr></table></figure></p><h4 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a><font color="green">if-else</font></h4><p>if-else 语句语法格式：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">else</span><br><span class="line">    command</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><h4 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if else-if else"></a><font color="green">if else-if else</font></h4><p>if else-if else 语法格式：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if condition1</span><br><span class="line">then</span><br><span class="line">    command1</span><br><span class="line">elif condition2 </span><br><span class="line">then </span><br><span class="line">    command2</span><br><span class="line">else</span><br><span class="line">    commandN</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a><font color="green">for 循环</font></h4><p>for循环一般格式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for var in item1 item2 ... itemN</span><br><span class="line">do</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>写成一行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for var in item1 item2 ... itemN; do command1; command2… done;</span><br></pre></td></tr></table></figure></p><h4 id="while-循环"><a href="#while-循环" class="headerlink" title=" while 循环"></a><font color="green"> while 循环</font></h4><p>while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。其格式为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>当条件是true或者<code>:</code>时, 是无限循环</p><h4 id="until-循环"><a href="#until-循环" class="headerlink" title="until 循环"></a><font color="green">until 循环</font></h4><p>until循环执行一系列命令直至条件为真时停止。<br>until循环与while循环在处理方式上刚好相反。<br>一般while循环优于until循环，但在某些时候—也只是极少数情况下，until循环更加有用。<br>until 语法格式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>条件可为任意测试条件，测试发生在循环末尾，因此循环至少执行一次—请注意这一点。</p><h4 id="case"><a href="#case" class="headerlink" title="case"></a><font color="green">case</font></h4><p>Shell case语句为多选择语句。可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。case语句格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">case 值 in</span><br><span class="line">模式1)</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line">模式2）</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></p><p>case工作方式如上所示。取值后面必须为单词in，每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。<br>取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。</p><h3 id="跳出循环"><a href="#跳出循环" class="headerlink" title="跳出循环"></a><font color="orange">跳出循环</font></h3><p>在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell使用两个命令来实现该功能：break和continue。</p><h4 id="break命令"><a href="#break命令" class="headerlink" title="break命令"></a><font color="green">break命令</font></h4><p>break命令允许跳出所有循环（终止执行后面的所有循环）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">while :</span><br><span class="line">do</span><br><span class="line">    echo -n &quot;输入 1 到 5 之间的数字:&quot;</span><br><span class="line">    read aNum</span><br><span class="line">    case $aNum in</span><br><span class="line">        1|2|3|4|5) echo &quot;你输入的数字为 $aNum!&quot;</span><br><span class="line">        ;;</span><br><span class="line">        *) echo &quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;</span><br><span class="line">            break</span><br><span class="line">        ;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="continue命令"><a href="#continue命令" class="headerlink" title=" continue命令"></a><font color="green"> continue命令</font></h4><p>continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">while :</span><br><span class="line">do</span><br><span class="line">    echo -n "输入 1 到 5 之间的数字: "</span><br><span class="line">    read aNum</span><br><span class="line">    case $aNum in</span><br><span class="line">        1|2|3|4|5) echo "你输入的数字为 $aNum!"</span><br><span class="line">        ;;</span><br><span class="line">        *) echo "你输入的数字不是 1 到 5 之间的!"</span><br><span class="line">            continue</span><br><span class="line">            echo "游戏结束"</span><br><span class="line">        ;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><h4 id="esac命令"><a href="#esac命令" class="headerlink" title=" esac命令"></a><font color="green"> esac命令</font></h4><p>case的语法和C family语言差别很大，它需要一个esac（就是case反过来）作为结束标记，每个case分支用右圆括号，用两个分号表示break。</p><h3 id="Shell-函数"><a href="#Shell-函数" class="headerlink" title="Shell 函数"></a><font color="orange">Shell 函数</font></h3><h4 id="函数定义"><a href="#函数定义" class="headerlink" title=" 函数定义"></a><font color="green"> 函数定义</font></h4><p>linux shell 可以用户定义函数，然后在shell脚本中可以随便调用。<br>shell中函数的定义格式如下：[]中内容可以省略<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ function ] funname [()]</span><br><span class="line">&#123;</span><br><span class="line">    action;</span><br><span class="line">    [return int;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><font color="red">注意事项</font><ul><li>函数返回值在调用该函数后通过 $? 来获得。</li><li>所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</li><li>可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。</li><li>参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">funWithReturn()&#123;</span><br><span class="line">    echo &quot;这个函数会对输入的两个数字进行相加运算...&quot;</span><br><span class="line">    echo &quot;输入第一个数字: &quot;</span><br><span class="line">    read aNum</span><br><span class="line">    echo &quot;输入第二个数字: &quot;</span><br><span class="line">    read anotherNum</span><br><span class="line">    echo &quot;两个数字分别为 $aNum 和 $anotherNum !&quot;</span><br><span class="line">    return $(($aNum+$anotherNum))</span><br><span class="line">&#125;</span><br><span class="line">funWithReturn</span><br><span class="line">echo &quot;输入的两个数字之和为 $? !&quot;</span><br></pre></td></tr></table></figure><h4 id="函数参数"><a href="#函数参数" class="headerlink" title=" 函数参数"></a><font color="green"> 函数参数</font></h4><p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…<br>基本和<code>Shell 传递参数</code>中一样.</p><h3 id="Shell-输入-输出重定向"><a href="#Shell-输入-输出重定向" class="headerlink" title="Shell 输入/输出重定向"></a><font color="orange">Shell 输入/输出重定向</font></h3><p>大多数 UNIX 系统命令从你的终端接受输入并将所产生的输出发送回​​到您的终端。一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。<br>重定向命令列表如下：</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">command &gt; file</td><td style="text-align:center">将输出重定向到 file。</td></tr><tr><td style="text-align:center">command &lt; file</td><td style="text-align:center">将输入重定向到 file。</td></tr><tr><td style="text-align:center">command &gt;&gt; file</td><td style="text-align:center">将输出以追加的方式重定向到 file。</td></tr><tr><td style="text-align:center">n &gt; file</td><td style="text-align:center">将文件描述符为 n 的文件重定向到 file。</td></tr><tr><td style="text-align:center">n &gt;&gt; file</td><td style="text-align:center">将文件描述符为 n 的文件以追加的方式重定向到 file。</td></tr><tr><td style="text-align:center">n &gt;&amp; m</td><td style="text-align:center">将输出文件 m 和 n 合并。</td></tr><tr><td style="text-align:center">n &lt;&amp; m</td><td style="text-align:center">将输入文件 m 和 n 合并。</td></tr><tr><td style="text-align:center">&lt;&lt; tag</td><td style="text-align:center">将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td></tr></tbody></table><h3 id="Shell-文件包含"><a href="#Shell-文件包含" class="headerlink" title="Shell 文件包含"></a><font color="orange">Shell 文件包含</font></h3><p>和其他语言一样，Shell 也可以包含外部脚本。这样可以很方便的封装一些公用的代码作为一个独立的文件。被包含的文件不需要可执行权限。<br>Shell 文件包含的语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">. filename   # 注意点号(.)和文件名中间有一空格</span><br><span class="line">或</span><br><span class="line">source filename</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;font color=&quot;orange&quot;&gt;前言&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;最近希望可以一键自动打包iOS App Store上传的ipa包, 所有来学习一下Shell脚本.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://47.96.147.179/images/others/shell_top.jpg&quot; alt=&quot;hello&quot; style=&quot;width: 50%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>一张图片引发的血案</title>
    <link href="http://yoursite.com/2017/09/13/iOS/%E4%B8%80%E5%BC%A0%E5%9B%BE%E7%89%87%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%A1%88/"/>
    <id>http://yoursite.com/2017/09/13/iOS/一张图片引发的血案/</id>
    <published>2017-09-13T06:42:19.000Z</published>
    <updated>2019-04-29T08:39:51.669Z</updated>
    
    <content type="html"><![CDATA[<p>最近线上版本出现了一个严重的Bug, iOS系统版本在9.1、9.2.1系统上面崩溃, 而在其他版本上面都没有任何问题, 并且对于直接通过Xcode打包安装、蒲公英安装都没有任何问题, 只对于从App Store上面下载的才会崩溃.<br><img src="http://47.96.147.179/images/iOS/errorforp3.jpg" alt="hello" style="width: 50%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"><br><a id="more"></a></p><h2 id="解决崩溃"><a href="#解决崩溃" class="headerlink" title="解决崩溃"></a>解决崩溃</h2><h3 id="崩溃原因"><a href="#崩溃原因" class="headerlink" title="崩溃原因"></a>崩溃原因</h3><ul><li>bugtags奔溃原因是: <code>Signal 10 was raised. SIGBUS</code></li><li>umeng奔溃原因是: <code>Application received signal SIGSEV</code>, 但是又找不到具体的原因</li></ul><p>在Xcode 8中，当你资源文件中[含有16位图]或者[图片显示模式γ值为’P3’], 如允许该App的系统为iOS 9.1或者iOS 9.2.1, 那么基本上都会崩溃, 通过崩溃时的参数可以看出来, 基本都是内存吃紧.</p><h3 id="找到出问题的图片"><a href="#找到出问题的图片" class="headerlink" title="找到出问题的图片"></a>找到出问题的图片</h3><ul><li>打包ipa包</li><li>解压ipa包(右键—打开方式—归档使用工具), 找到<code>Payload</code>中的项目包</li><li>右键—显示包内容—找到<code>Assets.car</code><ul><li>也可以使用命令</li><li><code>cd 项目所在的位置</code></li><li><code>find . -name &#39;Assets.car&#39;</code>查找</li></ul></li><li>使用 assetutil 命令找到任何包含着 16-bit or P3 的资源文件<ul><li><code>sudo xcrun --sdk iphoneos assetutil --info Assets.car路径 &gt; xxx.json</code></li></ul></li><li>查找该文件中包含下面字段的图片名称<ul><li><code>&quot;DisplayGamut&quot;: &quot;P3&quot;</code></li><li><code>&quot;BitsPerSample&quot;: 16</code></li></ul></li></ul><center><br><img src="http://47.96.147.179/images/iOS/testflight_image.png" alt="问题图片和图片名称" style="width: 70%; text-align: center; display: block;"><br></center>    <h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>找到这些图片, 删除或者替换它们.</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>由于通过Xcode直接打包, 或者上传蒲公英进行分下测试时, 运行在相关崩溃系统的手机上时不会崩溃, 所有这里需要使用苹果自带的测试工具<font color="red"> TestFlight </font>, TestFlight上面会保留上传到App Store上面的ipa包90天.</p><h3 id="需要测试手机安装TestFlight"><a href="#需要测试手机安装TestFlight" class="headerlink" title="需要测试手机安装TestFlight"></a>需要测试手机安装<code>TestFlight</code></h3><p>测试手机需要从App Store安装TestFlight, 并登陆需要添加测试人的Apple ID.</p><h3 id="上传新版本"><a href="#上传新版本" class="headerlink" title="上传新版本"></a>上传新版本</h3><p>在<a href="https://itunesconnect.apple.com" target="_blank" rel="noopener">itunesconnect</a>中登录你的开发者账号, 在<code>我的App</code>——<code>TestFlight</code>中可以看到<code>构建版本</code>和<code>测试员和群组</code>.</p><p>这里可以看到, 能测试的版本只能是构建版本, 所以需要新构建一个版本, 上传ipa包</p><center><br><img src="http://47.96.147.179/images/iOS/testFlight_01.png" alt="查看可测试的包和测试人员" style="width: 70%; text-align: center; display: block;"><br></center>    <h3 id="添加测试人员"><a href="#添加测试人员" class="headerlink" title="添加测试人员"></a>添加测试人员</h3><p>测试人员可以在<a href="https://itunesconnect.apple.com/WebObjects/iTunesConnect.woa/ra/ng/users_roles" target="_blank" rel="noopener">用户和职能</a>中添加.</p><ul><li>iTunes Connect 用户<ul><li>它可以管理的账户或者相关功能, 管理、财务、App 管理、开发人员、营销、销售、客户支持、报告</li></ul></li><li>TestFlight Beta 版测试员<ul><li>该功能快要移除了, 现在在具体的项目中添加测试人员</li></ul></li><li><p>沙箱技术测试员</p><ul><li>沙箱技术测试员可让您在向用户提供 Apple Pay 交易、App 内购买项目、Game Center 功能及本地化版本之前进行测试。</li></ul></li><li><p>也可以在具体的App目录下的TestFlight中添加测试人员</p><ul><li>首先需要添加群组</li><li>然后再该群组中添加测试人员</li></ul></li></ul><center><br><img src="http://47.96.147.179/images/iOS/testFlight_02.png" alt="查看可测试的包和测试人员" style="width: 70%; text-align: center; display: block;"><br></center>    <h3 id="邀请测试"><a href="#邀请测试" class="headerlink" title="邀请测试"></a>邀请测试</h3><h4 id="iTunes-Connect-用户"><a href="#iTunes-Connect-用户" class="headerlink" title="iTunes Connect 用户"></a>iTunes Connect 用户</h4><p>如果是<code>iTunes Connect 用户</code>, 可以在<code>iTunes Connect 用户</code>中选中人员, 然后对应的邮箱会收到邀请邮件, 里面有一个链接, 点击后会获取到一个验证码, 打开手机上面的<code>TestFlight</code>, 输入该验证码就会看到测试的App, 还可以选择不同的版本.</p><h4 id="自定义群组和里面的测试人员"><a href="#自定义群组和里面的测试人员" class="headerlink" title="自定义群组和里面的测试人员"></a>自定义群组和里面的测试人员</h4><p>您可以将任何人添加至此群组，被添加的人将可使用 TestFlight App 测试构建版本。构建版本可能需要通过 Beta 版 App 审核, 并且需要提供用户名和密码, 构建成功之后该群组中的测试人员或收到邀请邮件.</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>最新更新, 现在从TestFlight安装测试版App更加方便, 外部链接无需被邀请人的邮箱, 直接发送链接给测试人通过testFlight的App安装, 但是外部链接生成前, 需要通过beta版本的审核, 大约需要1个工作日左右, 相比较而言, 测试安装更加便捷了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近线上版本出现了一个严重的Bug, iOS系统版本在9.1、9.2.1系统上面崩溃, 而在其他版本上面都没有任何问题, 并且对于直接通过Xcode打包安装、蒲公英安装都没有任何问题, 只对于从App Store上面下载的才会崩溃.&lt;br&gt;&lt;img src=&quot;http://47.96.147.179/images/iOS/errorforp3.jpg&quot; alt=&quot;hello&quot; style=&quot;width: 50%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="坑点" scheme="http://yoursite.com/tags/%E5%9D%91%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>使自己的Github项目支持Cocoapods以及私有远程Repo仓库</title>
    <link href="http://yoursite.com/2017/08/12/iOS/%E4%BD%BF%E8%87%AA%E5%B7%B1%E7%9A%84Github%E9%A1%B9%E7%9B%AE%E6%94%AF%E6%8C%81Cocoapods/"/>
    <id>http://yoursite.com/2017/08/12/iOS/使自己的Github项目支持Cocoapods/</id>
    <published>2017-08-12T09:27:17.000Z</published>
    <updated>2019-04-29T08:39:51.670Z</updated>
    
    <content type="html"><![CDATA[<p>很早之前就想做的事情之一, 刚好最近有个新功能需要添加到项目中, 于是就想顺便上传到github, 使用Cocoapods来管理.<br><img src="http://47.96.147.179/images/iOS/github_cocoapods.jpg" alt="hello" style="width: 50%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"><br><a id="more"></a></p><h1 id="项目支持Cocoapods"><a href="#项目支持Cocoapods" class="headerlink" title="项目支持Cocoapods"></a><font color="orange">项目支持Cocoapods</font></h1><p>这里演示的是Githu项目, 可以视自己的情况时有Coding、开源中国等Git服务器.</p><h2 id="准备-安装Cocoapods和注册trunk"><a href="#准备-安装Cocoapods和注册trunk" class="headerlink" title="准备(安装Cocoapods和注册trunk)"></a>准备(安装Cocoapods和注册trunk)</h2><p>现在Cocoapods使用trunk方式, 并且需要版本在0.33以上.</p><ul><li>安装: <code>sudo gem install cocoapods</code></li><li>查看版本: <code>pod --version</code></li><li><p>注册trunk, 执行下面命令, 邮箱会收到验证链接, 打开链接注册成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk register xxxx@qq.com &apos;用户名&apos;  --verbose</span><br></pre></td></tr></table></figure></li><li><p>成功之后查询自己的信息: <code>pod trunk me</code></p></li></ul><h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h2><p>在Github上面新建一个仓库, 免费的用户只能创建<code>Public</code>类型的仓库, 任何人都可以clone该仓库. 创建的同时可以根据开发语言选择忽略文件, 选择开源协议.</p><h2 id="克隆仓库到本地"><a href="#克隆仓库到本地" class="headerlink" title="克隆仓库到本地"></a>克隆仓库到本地</h2><ul><li>克隆命令(替换你的用户名和项目名)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/你的用户名/你的项目名.git</span><br></pre></td></tr></table></figure></li></ul><h2 id="将你的代码拷贝到该仓库中"><a href="#将你的代码拷贝到该仓库中" class="headerlink" title="将你的代码拷贝到该仓库中"></a>将你的代码拷贝到该仓库中</h2><p>将你的项目添加到仓库中</p><h2 id="配置-podspec文件"><a href="#配置-podspec文件" class="headerlink" title="配置 .podspec文件"></a>配置 .podspec文件</h2><ul><li>在仓库中新建配置文件(推荐使用<code>你的项目名</code>)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec create 你的项目名</span><br></pre></td></tr></table></figure><ul><li>配置文件中字段说明, <a href="http://guides.cocoapods.org/syntax/podspec.html" target="_blank" rel="noopener">官方文档</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">Pod::Spec.new do |s|</span><br><span class="line"></span><br><span class="line"># 名称 使用的时候pod search [name]</span><br><span class="line">s.name = &quot;WhatKeyboard&quot;</span><br><span class="line"></span><br><span class="line"># 代码库的版本, 需要和代码仓库中的tag值一致</span><br><span class="line">s.version = &quot;1.0.0&quot;</span><br><span class="line"></span><br><span class="line"># 简介</span><br><span class="line">s.summary = &quot;自定义密码安全键盘&quot;</span><br><span class="line"></span><br><span class="line">s.description  = &lt;&lt;-DESC</span><br><span class="line">                        这是一个自定义密码安全键盘.</span><br><span class="line">                        DESC</span><br><span class="line"></span><br><span class="line"># 主页</span><br><span class="line">s.homepage = &quot;https://github.com/coppco/WhatKeyboard&quot;</span><br><span class="line"></span><br><span class="line"># 许可证书类型，要和仓库的LICENSE 的类型一致</span><br><span class="line">s.license = &quot;MIT&quot;</span><br><span class="line"></span><br><span class="line"># 作者名称 和 邮箱</span><br><span class="line">s.author = &#123; &quot;coppco&quot; =&gt; &quot;coppco@qq.com&quot; &#125;</span><br><span class="line"></span><br><span class="line"># 作者主页</span><br><span class="line">s.social_media_url =&quot;https://coppco.github.io&quot;</span><br><span class="line"></span><br><span class="line"># 代码库最低支持的版本</span><br><span class="line">s.platform = :ios, &quot;7.0&quot;</span><br><span class="line"></span><br><span class="line"># 代码的Clone 地址 和 tag 版本</span><br><span class="line">s.source = &#123; :git =&gt; &quot;https://github.com/coppco/WhatKeyboard.git&quot;, :tag =&gt; &quot;#&#123;s.version&#125;&quot; &#125;</span><br><span class="line"></span><br><span class="line">#新建目录, 如果有多个表示可以分库, 引入时也可以单独引入分库</span><br><span class="line">s.default_subspec = &apos;Core&apos;</span><br><span class="line"></span><br><span class="line">s.subspec &apos;Core&apos; do |ss|</span><br><span class="line">ss.source_files = &apos;WhatKeyboard/classes/*.&#123;h,m&#125;&apos;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">#框架被其他工程引入时, 导入的.h和.m等  **/*表示目录及其子目录下所有文件, 如果多个目录, 用逗号分开。.&#123;&#125;限定导入的格式</span><br><span class="line">#s.source_files = &quot;WhatKeyboardDemo/WhatKeyboardDemo/WhatKeyboard/classes/**/*.&#123;h,m&#125;&quot;</span><br><span class="line">#s.source_files = &quot;WhatKeyboardDemo/WhatKeyboardDemo/WhatKeyboard/**/*.&#123;h,m&#125;&quot;</span><br><span class="line"></span><br><span class="line">#框架被其他工程引入时, 导入的资源包括图片、bundle、xib、storyboard等</span><br><span class="line">s.resources = &quot;WhatKeyboard/resource/*.&#123;bundle&#125;&quot;, &quot;WhatKeyboard/classes/*.&#123;xib,storyboard,nib&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 框架是否使用的ARC</span><br><span class="line">s.requires_arc = true</span><br><span class="line"></span><br><span class="line">#框架依赖的framework</span><br><span class="line">#s.framework    = &apos;CoreData&apos;</span><br><span class="line"></span><br><span class="line">#框架依赖的其他第三方库</span><br><span class="line">#s.dependency &apos;MagicalRecord&apos;, :git =&gt; &apos;https://github.com/iiiyu/MagicalRecord.git&apos;, :tag =&gt; &apos;sumiGridDiary2.1&apos;</span><br><span class="line">#s.dependency &apos;MBProgressHUD&apos;</span><br><span class="line"></span><br><span class="line">#框架公开的头文件</span><br><span class="line">#s.public_header_files = &apos;WhatKeyboardDemo/WhatKeyboardDemo/WhatKeyboard/**/*.h&apos;</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li>验证配置文件是否正确<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#本地验证</span><br><span class="line">pod lib lint xxx.podspec</span><br><span class="line">#远程验证</span><br><span class="line">pod spec lint xxx.podspec</span><br></pre></td></tr></table></figure></li></ul><p>如果提示<code>WhatKeyboard passed validation</code>, 即表示正确.</p><h2 id="打tag-上传到github"><a href="#打tag-上传到github" class="headerlink" title="打tag, 上传到github"></a>打tag, 上传到github</h2><ul><li><p>首先需要打一个tag, 这个tag需要是<code>.podspec</code>文件中的version值.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag &apos;1.0.0&apos;</span><br></pre></td></tr></table></figure></li><li><p>然后上传到github</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &apos;提交内容&apos;</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure></li><li><p><font color="red" size="20">通过trunk上传你的podspec文件</font>, 在仓库目录执行下面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk push 你的podspec文件名</span><br></pre></td></tr></table></figure></li><li><p>删除指定tag的Cocoapod支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk delete WhatKeyboard 1.0.0</span><br></pre></td></tr></table></figure></li></ul><p>出现下面结果, 表示成功了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">🎉  Congrats</span><br><span class="line"></span><br><span class="line">🚀  WhatKeyboard (1.0.0) successfully published</span><br><span class="line">📅  September 13th, 00:33</span><br><span class="line">🌎  https://cocoapods.org/pods/WhatKeyboard</span><br><span class="line">👍  Tell your friends!</span><br></pre></td></tr></table></figure></p><ul><li>测试: <code>pod search WhatKeyboard</code>, 如果没有成功, 可以先更新一下本地依赖库<code>pod setup</code></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>图片问题<br>图片建议新建一个<code>Settings Bundle</code>, 将图片放入该bundle中, 加载图片时使用<code>[UIImage imageNamed:@&quot;xxx.bundle/xxxx&quot;]</code></li><li><p>xib等加载问题<br>不能再使用<code>[NSBudle mainBundle]</code>了, 需要改成下面的方式: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[NSBundle bundleForClass:[self class]] loadNibNamed:NSStringFromClass(self) owner:nil options:nil].firstObject;</span><br></pre></td></tr></table></figure></li><li><p>注意事项<br>Cocoapods是根据仓库中的tag值进行安装的, 所以必须打tag, <code>.podspec</code>文件中的version也必须和tag值一样.</p></li><li>更新<ul><li>需要上传代码到github仓库, 然后打一个新tag.</li><li>上传<code>.podspec</code>文件到trunk上面<ul><li>在仓库中运行: <code>pod trunk push 你的podspec文件名</code></li></ul></li></ul></li><li>取消对Cocoapods的支持, WhatKeyboard是项目名称, 1.0.0是对应的tag值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk delete WhatKeyboard 1.0.0</span><br></pre></td></tr></table></figure></li></ul><h1 id="搭建远程私有Repo库"><a href="#搭建远程私有Repo库" class="headerlink" title="搭建远程私有Repo库"></a><font color="orange">搭建远程私有Repo库</font></h1><p>有时候公司有多个项目, 每个项目都用到相同的组件, 但是我们又不希望开源这些组件, 我们可以创建私有远程Repo库, 它有点类似于Maven私服.</p><ul><li>1、创建一个远程私有Spec库, 可以在远程的git服务器上</li><li><p>2、将远程私有Spec库的git地址加入repo, 注意修改xxx名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo add xxx 远程私有repo的git地址</span><br></pre></td></tr></table></figure><ul><li><p>执行完之后会在<code>/Users/用户名/.cocoapods/repos/</code>下会生成<code>xxx</code>文件夹.</p><ul><li><p>验证是否正确: 在<code>/Users/用户名/.cocoapods/repos/xxx</code>目录下运行: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo lint .</span><br></pre></td></tr></table></figure></li><li><p>如果出现<code>All the specs passed validation.</code>即表示添加成功.</p></li><li>显示本地repo列表: <code>pod repo list</code></li><li>删除本地私有repo: <code>pod repo remove xxx</code></li><li>更新某个repo: <code>pod repo update xxx</code></li></ul></li></ul></li><li><p>3、创建一个代码git仓库, 并克隆到本地, 然后在代码仓库中运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec create 你的项目名</span><br></pre></td></tr></table></figure><ul><li>修改<code>你的项目名.podspec</code>文件, 根据实际情况修改<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Pod::Spec.new do |s|</span><br><span class="line">    #搜索时名称</span><br><span class="line">    s.name                = &apos;WhatKeyboard&apos;</span><br><span class="line">    #tag值</span><br><span class="line">    s.version             = &apos;1.1.2&apos;</span><br><span class="line">    #描述</span><br><span class="line">    s.summary          = &apos;自定义密码输入键盘&apos;</span><br><span class="line">    #主页</span><br><span class="line">    s.homepage         = &apos;https://github.com/coppco/WhatKeyboard&apos;</span><br><span class="line">    #开源协议</span><br><span class="line">    s.license              = &apos;MIT&apos;</span><br><span class="line">    #作者和邮箱</span><br><span class="line">    s.author               = &#123; &apos;coppco&apos; =&gt; &apos;coppco@qq.com&apos; &#125;      </span><br><span class="line">    #支持的系统和最低版本</span><br><span class="line">    s.platform           = :ios, &apos;7.1&apos;</span><br><span class="line">    #git地址和tag值</span><br><span class="line">    s.source               = &#123; :git =&gt; &apos;https://github.com/coppco/WhatKeyboard.git&apos;, :tag =&gt; s.version&#125;</span><br><span class="line">    #默认目录</span><br><span class="line">    s.default_subspec = &apos;Core&apos;</span><br><span class="line">    #分目录</span><br><span class="line">    s.subspec &apos;Core&apos; do |ss|</span><br><span class="line">        #代码路径</span><br><span class="line">        ss.source_files = &apos;WhatKeyboard-master/*.&#123;h,m&#125;&apos;</span><br><span class="line">    end</span><br><span class="line">    #资源路径</span><br><span class="line">    s.resources           = &apos;WhatKeyboard-master/*.&#123;xib,storyboard,nib,bundle&#125;&apos;</span><br><span class="line">    #是否ARC</span><br><span class="line">    s.requires_arc      = true</span><br><span class="line">    #依赖的其他库</span><br><span class="line">    #s.dependency  &apos;AFNetworking&apos;,&apos;3.1.0&apos;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li></ul></li><li><p>4、验证你的podspec文件</p><ul><li><p>本地验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint 项目名.podspec --verbose --use-libraries --allow-warnings</span><br></pre></td></tr></table></figure></li><li><p>远程验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec lint 项目名.podspec --verbose --use-libraries --allow-warnings</span><br></pre></td></tr></table></figure></li><li><p><code>--verbose</code>: 查看详细的验证过程</p></li><li><code>--use-libraries</code>: 如果你的库使用了静态库或者引用的三方库使用了静态库, 验证无法通过</li><li><code>--allow-warnings</code>: 允许警告</li></ul></li><li><p>5、推送podspec文件到远程私有Cocoapods库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#名字xx必须和第二步名字一样</span><br><span class="line">pod repo push xxx spec文件名称.podspec</span><br></pre></td></tr></table></figure><ul><li>推送成功之后, 远程的repo仓库会添加<code>/spec文件名称/tag/spec文件名称.podspec</code>文件夹和文件.</li></ul></li><li><p>6、修改工程podfile文件, 引入远程私有repo库的git地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">source &apos;https://xxx.xxx.xxx/xxx/xxx.git</span><br><span class="line">source &apos;https://github.com/CocoaPods/Specs.git&apos;</span><br><span class="line"></span><br><span class="line">platform :ios, &apos;9.0&apos;</span><br><span class="line"></span><br><span class="line">target &apos;Example&apos; do</span><br><span class="line">pod &apos;xxx&apos;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li><li><p>7、后期更新远程私有repo</p><ul><li>代码仓库打tag, 并推送到远程代码库</li><li>修改podspec文件, 将<code>s.version</code>改为代码仓库的tag值</li><li>验证podspec文件</li><li>podspec文件验证通过, 更新本地远程私有仓库</li></ul></li></ul><h1 id="上传podspec到github时报错"><a href="#上传podspec到github时报错" class="headerlink" title="上传podspec到github时报错"></a><font color="orange">上传podspec到github时报错</font></h1><p>今天更新项目的github时, 报如下错误: </p><blockquote><p>Encountered an unknown error (/usr/bin/xcrun simctl list -j devices<br>xcrun: error: unable to find utility “simctl”, not a developer tool or in PATH<br>) during validation.</p></blockquote><ul><li>解决办法<blockquote><p><code>Xcode</code>——–<code>Command + ,</code>——–<code>Locations</code>——–<code>Command Line Tools</code>设置一下即可</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很早之前就想做的事情之一, 刚好最近有个新功能需要添加到项目中, 于是就想顺便上传到github, 使用Cocoapods来管理.&lt;br&gt;&lt;img src=&quot;http://47.96.147.179/images/iOS/github_cocoapods.jpg&quot; alt=&quot;hello&quot; style=&quot;width: 50%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="资料整理" scheme="http://yoursite.com/tags/%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="Cocoapods" scheme="http://yoursite.com/tags/Cocoapods/"/>
    
  </entry>
  
  <entry>
    <title>软件逆向工程之Delphi</title>
    <link href="http://yoursite.com/2017/08/09/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E4%B9%8BDelphi/"/>
    <id>http://yoursite.com/2017/08/09/逆向工程/软件逆向工程之Delphi/</id>
    <published>2017-08-09T04:16:08.000Z</published>
    <updated>2019-04-29T08:39:51.674Z</updated>
    
    <content type="html"><![CDATA[<p>最近以前的同事问我能不能破解一个桌面软件(当然是一个比较简单的小程序), 当时夸下开口说可以, 于是乎私下研究了下逆向工程.</p><a id="more"></a><h2 id="什么是逆向工程"><a href="#什么是逆向工程" class="headerlink" title="什么是逆向工程?"></a><font color="orange">什么是逆向工程?</font></h2><p>&emsp;&emsp;逆向工程（又称逆向技术），是一种产品设计技术再现过程，即对一项目标产品进行逆向分析及研究，从而演绎并得出该产品的处理流程、组织结构、功能特性及技术规格等设计要素，以制作出功能相近，但又不完全一样的产品。逆向工程源于商业及军事领域中的硬件分析。其主要目的是在不能轻易获得必要的生产信息的情况下，直接从成品分析，推导出产品的设计原理.<br>&emsp;&emsp;逆向工程在工业设计中很早就有应用. 举个栗子, 关注军事的同学都知道, 我国第一艘航空母舰——辽宁号航空母舰, 它的前身是上个世纪80年代中后期，于乌克兰建造时遭逢苏联解体建造工程中断，完成度68%的瓦良格号. 从购买到真正抵达大连期间总共历时3年多的时间花费了大量人力、物力和财力. 再比如中国的山寨之王——企鹅, 大家印象最深的应该就是市面上刚刚有个产品火了, 不到两个月腾讯肯定有相关的产品问世, 从QQ、拍拍、财付通、QQ校友、Q飞车、QQ炫舞、QQ电脑管家、CF、微信等等, 不过难得微信的小程序被支付宝山寨了一次.</p><h2 id="合法性"><a href="#合法性" class="headerlink" title="合法性"></a><font color="orange">合法性</font></h2><p>&emsp;&emsp;在2007年初，我国相关的法律为逆向工程正名，承认了逆向技术用于学习研究的合法性。根据有关法律，对于任何计算机方面的逆向工程，只要不用于商业用途都不违法。比如对商业软件的反编译，代码分析等</p><p>&emsp;&emsp;我国虽然在计算机软件保护方面已制定了《计算机软件保护条例》、《计算机软件著作权登记条例》等法律法规，但都未涉及软件反向工程问题，这一点应尽早引起立法机关的重视，正是由于我国法律对有关软件反向工程的问题没有规定，因此诸如微软之类的公司在其软件产品的最终用户使用协议中都规定：“禁止对该软件产品进行反向工程，如果当地法律允许反向工程则除外。”</p><h2 id="逆向工程需要什么"><a href="#逆向工程需要什么" class="headerlink" title="逆向工程需要什么?"></a><font color="orange">逆向工程需要什么?</font></h2><ul><li>一些基础的语言如: C、C++(很多游戏、嵌入式使用)</li><li>汇编语言</li><li>一些逆向工程常见的软件(这很重要): 如静态反汇编IDA pro和动态调试器OllyDbg还有内核调试winDbg</li><li>掌握外壳原理和技巧，熟悉常见的加解密算法、反调试技巧</li></ul><h2 id="Delphi的反编译"><a href="#Delphi的反编译" class="headerlink" title="Delphi的反编译"></a><font color="orange">Delphi的反编译</font></h2><h3 id="明确目标软件的编程语言和加壳情况"><a href="#明确目标软件的编程语言和加壳情况" class="headerlink" title="明确目标软件的编程语言和加壳情况"></a>明确目标软件的编程语言和加壳情况</h3><p>&emsp;&emsp;PEiD是一款著名的查壳工具，其功能强大，现在有软件很多都加了壳，给破解汉化带来非常大的不便，PEiD几乎可以侦测出所有的壳，其数量已超过470 种PE文档 的加壳类型和签名，另外还可识别出EXE文件是用什么语言编写的，比如：VC++、Delphi、VB或Delphi等.<br>其他查壳工具还有: <code>Fi</code>、<code>GetTyp</code>和<code>pe-scan</code>等.</p><center><br><img src="http://47.96.147.179/images/others/peid.png" alt="使用PEiD查壳" style="width: 70%; text-align: center; display: block;"><br></center>    <p>运气比较好, 如上图所示这个exe文件是没有壳的,而且是使用Delhpi编写的, 如果红圈里面是<code>Not Found</code>就是加过壳的, 如果后面有[Overlay]可能是加了伪装成对应语言的壳.</p><h4 id="去壳"><a href="#去壳" class="headerlink" title="去壳"></a>去壳</h4><p>不同的壳有不同的去壳方式, 高手都是自己脱壳, 对于不会的人可以先尝试脱壳工具, 不一定能成功.</p><p><a href="https://down.52pojie.cn/Tools/Unpackers/" target="_blank" rel="noopener">常见的脱壳工具</a></p><h5 id="常见的壳"><a href="#常见的壳" class="headerlink" title="常见的壳"></a>常见的壳</h5><ul><li>压缩壳<ul><li>ASPack</li><li>UPX</li><li>PeCompact</li><li>NsPack(国产北斗壳)</li></ul></li><li>加密壳<ul><li>ASProtect加密壳</li><li>Armadillo加密壳</li><li>EXECryptor加密壳</li><li>Themida加密壳</li><li>VM Protect </li><li>Code Virtualizer</li><li>EncryptPE</li><li>PE-Armor </li></ul></li></ul><h3 id="反编译和反汇编"><a href="#反编译和反汇编" class="headerlink" title="反编译和反汇编"></a>反编译和反汇编</h3><font color="green">反汇编得到的是汇编代码</font><br><br><font color="green">反编译得到的是所用语言的源代码</font><h3 id="反编译软件的选择"><a href="#反编译软件的选择" class="headerlink" title="反编译软件的选择"></a>反编译软件的选择</h3><h4 id="微软开发平台"><a href="#微软开发平台" class="headerlink" title="微软开发平台"></a>微软开发平台</h4><p>对于微软开发平台开发出来的软件，我们通常使用.NET Reflector.</p><h4 id="Borland-Delphi"><a href="#Borland-Delphi" class="headerlink" title="Borland Delphi"></a>Borland Delphi</h4><p>常用的软件有DeDe</p><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>常用的有Java Decompiler.</p><h3 id="开始破解"><a href="#开始破解" class="headerlink" title="开始破解"></a>开始破解</h3><p>我使用的是由<a href="http://www.52pojie.cn" target="_blank" rel="noopener">52破解</a>提供的汉化版的<a href="https://pan.baidu.com/s/1skMYbQd" target="_blank" rel="noopener">ollydbg</a>, 提取密码: acrq</p><h4 id="将可执行文件拖入软件或者从文件菜单打开"><a href="#将可执行文件拖入软件或者从文件菜单打开" class="headerlink" title="将可执行文件拖入软件或者从文件菜单打开"></a>将可执行文件拖入软件或者从文件菜单打开</h4><center><br><img src="http://47.96.147.179/images/others/ollydbg_main.png" alt="ollydbg主目录" style="width: 70%; text-align: center; display: block;"><br></center>    <h4 id="通过查找-所有参考文本字符串快速查找"><a href="#通过查找-所有参考文本字符串快速查找" class="headerlink" title="通过查找------所有参考文本字符串快速查找"></a>通过<code>查找------所有参考文本字符串</code>快速查找</h4><center><br><img src="http://47.96.147.179/images/others/ollydbg_search.png" alt="快速查找" style="width: 70%; text-align: center; display: block;"><br></center>    <h4 id="在汇编窗口查看-双击该字符串行或者选择反汇编窗口中跟随"><a href="#在汇编窗口查看-双击该字符串行或者选择反汇编窗口中跟随" class="headerlink" title="在汇编窗口查看, 双击该字符串行或者选择反汇编窗口中跟随"></a>在汇编窗口查看, 双击该字符串行或者选择<code>反汇编窗口中跟随</code></h4><center><br><img src="http://47.96.147.179/images/others/ollydbg_search.png" alt="快速查找" style="width: 70%; text-align: center; display: block;"><br></center>    <center><br><img src="http://47.96.147.179/images/others/ollydbg_search2.png" alt="反汇编窗口查看" style="width: 70%; text-align: center; display: block;"><br></center>    <h4 id="修改汇编语言以及相关文字"><a href="#修改汇编语言以及相关文字" class="headerlink" title="修改汇编语言以及相关文字"></a>修改汇编语言以及相关文字</h4><ul><li>修改汇编语言, 双击汇编区域的一行<center><br><img src="http://47.96.147.179/images/others/ollydbg_edtingCode.png" alt="修改汇编语言" style="width: 70%; text-align: center; display: block;"><br></center></li><li>修改文字, <code>右键</code>——<code>数据窗口中跟随</code>——<code>选择</code><center><br><img src="http://47.96.147.179/images/others/ollydbg_edtingWord.png" alt="修改文字1" style="width: 70%; text-align: center; display: block;"><br></center><br>双击<code>HEX数据</code>中的数据位置, 即可更改文字, 需要注意的是: <font color="red">保持大小需要勾选.<br><center><br><img src="http://47.96.147.179/images/others/ollydbg_edting_word2.png" alt="修改文字2" style="width: 70%; text-align: center; display: block;"><br></center></font></li></ul><h4 id="保存修改保存到可执行文件"><a href="#保存修改保存到可执行文件" class="headerlink" title="保存修改保存到可执行文件"></a>保存修改保存到可执行文件</h4><p><code>右键</code>——<code>复制到壳执行文件</code>——<code>全部复制</code>——<code>新窗口右键</code>——<code>保存</code></p><center><br><img src="http://47.96.147.179/images/others/ollydbg_saving1.png" alt="保存" style="width: 70%; text-align: center; display: block;"><br></center><br><center><br><img src="http://47.96.147.179/images/others/ollydbg_saving2.png" alt="全部复制" style="width: 70%; text-align: center; display: block;"><br></center><br><center><br><img src="http://47.96.147.179/images/others/ollydbg_saving3.png" alt="保存到文字即可" style="width: 70%; text-align: center; display: block;"><br></center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近以前的同事问我能不能破解一个桌面软件(当然是一个比较简单的小程序), 当时夸下开口说可以, 于是乎私下研究了下逆向工程.&lt;/p&gt;
    
    </summary>
    
    
      <category term="逆向工程" scheme="http://yoursite.com/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="Delphi" scheme="http://yoursite.com/tags/Delphi/"/>
    
  </entry>
  
  <entry>
    <title>网页静态化</title>
    <link href="http://yoursite.com/2017/07/10/Java%20Web/%E7%BD%91%E9%A1%B5%E9%9D%99%E6%80%81%E5%8C%96/"/>
    <id>http://yoursite.com/2017/07/10/Java Web/网页静态化/</id>
    <published>2017-07-10T01:37:34.000Z</published>
    <updated>2019-04-29T08:39:51.649Z</updated>
    
    <content type="html"><![CDATA[<p>当一个大型网站并发量很大时, 同一时间大量的访问导致服务器压力加大以及数据库数据交换频繁.大型动态网站之所以可以做到能快速响应高并发，它们都是尽量让自己的网站静态化，当然这种静态化绝不是把网站就做成静态网站，而是在充分理解了静态网站在提升网站响应速度的基础上对动态网站进行改良。</p><a id="more"></a><h1 id="网页静态化"><a href="#网页静态化" class="headerlink" title="网页静态化"></a><font color="orange">网页静态化</font></h1><p>在java领域，表现层技术主要有三种：JSP、FreeMarker、Velocity。</p><ul><li>JSP<ul><li>可以书写Java代码, 不能实现前后端分离</li><li>支持JSP标签</li><li>支持表达式语言(EL)</li><li>官方标准, 第三方标签库多</li><li>性能良好</li></ul></li><li>Velocity<ul><li>不能书写Java代码, 严格的前后端分离</li><li>性能良好</li><li>可以使用表达式语言(EL)</li><li>不是官方标准, JSP标签支持不好, 第三方标签库少</li></ul></li><li>FreeMarker<ul><li>不能书写Java代码, 严格的前后端分离</li><li>性能不错</li><li>JSP标签支持良好</li><li>内置大量常用功能</li><li>使用表达式语言</li><li>宏定义（类似jsp标签）非常方便</li><li>不是官方标准, 第三方标签库没有JSP多</li></ul></li></ul><h1 id="FreeMarker"><a href="#FreeMarker" class="headerlink" title=" FreeMarker "></a><font color="orange"> FreeMarker </font></h1><p>FreeMarker是一个用Java语言编写的模板引擎，它基于模板来生成文本输出。FreeMarker与Web容器无关，即在Web运行时，它并不知道Servlet或HTTP。它不仅可以用作表现层的实现技术，而且还可以用于生成XML，JSP或Java 等。</p><h2 id="使用FreeMarker"><a href="#使用FreeMarker" class="headerlink" title=" 使用FreeMarker "></a><font color="orange"> 使用FreeMarker </font></h2><h3 id="导入FreeMarker相关jar包"><a href="#导入FreeMarker相关jar包" class="headerlink" title=" 导入FreeMarker相关jar包 "></a><font color="orange"> 导入FreeMarker相关jar包 </font></h3><ul><li><a href="https://freemarker.apache.org/" target="_blank" rel="noopener">官网</a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="一般步骤"><a href="#一般步骤" class="headerlink" title=" 一般步骤 "></a><font color="orange"> 一般步骤 </font></h3><ul><li><p>1、创建一个模板文件, 扩展名一般为<code>ftl</code></p><ul><li>里面的数据采用EL表达式, 如<code>${name}</code>, 那么数据里面需要包含<code>name</code>这个字段</li><li>如果生成的模板出现中文乱码, 注意检查模板中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>2、创建一个Configuration对象，直接new一个对象。构造方法的参数就是freemarker对于的版本号。</p></li><li>3、设置模板文件所在的路径。</li><li>4、设置模板文件使用的字符集。一般就是utf-8.</li><li>5、加载一个模板，创建一个模板对象。</li><li>6、创建一个模板使用的数据集，可以是pojo也可以是map。一般是Map。</li><li>7、创建一个Writer对象，一般创建一FileWriter对象，指定生成的文件名。</li><li>8、调用模板对象的process方法输出文件。</li><li>9、关闭流。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.freemarker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> freemarker.template.Configuration;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Template;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFreeMarker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFreemarker</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、Configuration对象</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration(Configuration.getVersion());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、设置模板文件所在的路径。</span></span><br><span class="line">        configuration.setDirectoryForTemplateLoading(<span class="keyword">new</span> File(<span class="string">"Users/apple/Desktop/ftl"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、设置模板文件使用的字符集。一般就是utf - 8.</span></span><br><span class="line">        configuration.setDefaultEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、加载一个模板，创建一个模板对象。</span></span><br><span class="line">        Template template = configuration.getTemplate(<span class="string">"hello.ftl"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5、创建一个模板使用的数据集，可以是pojo也可以是map。一般是Map。</span></span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"name"</span>, <span class="string">"Coppco"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6、创建一个Writer对象，一般创建一FileWriter对象，指定生成的文件名。</span></span><br><span class="line">        FileWriter writer = <span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">"/Users/apple/Desktop/hello.html"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7、调用模板对象的process方法输出文件。</span></span><br><span class="line">        template.process(map, writer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//8、关闭流。</span></span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模板的语法"><a href="#模板的语法" class="headerlink" title=" 模板的语法 "></a><font color="orange"> 模板的语法 </font></h3><ul><li>Map, 通过<code>${key}</code>取值</li><li>pojo, 通过<code>${属性}</code>取值</li><li>Map中的pojo, 通过<code>${key.属性}</code>取值</li><li>pojo中包装pojo, 通过<code>${属性.属性}</code>取值</li><li><p>集合中数据, 使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;#list teacherList as teacher&gt;</span><br><span class="line">    $&#123;teacher.name&#125; //pojo的属性</span><br><span class="line">    $&#123;teacher.age&#125;</span><br><span class="line">    $&#123;teacher_index&#125; //获取下标</span><br><span class="line">&lt;/#list&gt;</span><br></pre></td></tr></table></figure></li><li><p>判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;#if student_index % 2 == 0&gt;</span><br><span class="line">&lt;#else&gt;</span><br><span class="line">&lt;/#if&gt;</span><br></pre></td></tr></table></figure></li><li><p>日期类型格式化, 如果是Date对象, 直接使用会报错.</p><ul><li>使用<code>${date?date}</code>, 解析结果为<code>2017-7-10</code></li><li>使用<code>${date?time}</code>, 解析结果为<code>7:29:39</code></li><li>使用<code>${date?datetime}</code>, 解析结果为<code>2017-7-10 7:31:09</code></li><li>使用<code>${date?string(pattern)}</code>, 根据自己定义的日期格式化格式, 解析日期. 如传入<code>yyyy-MM-dd HH:mm:ss</code>, 解析结果为<code>2017-07-10 07:33:27</code></li></ul></li><li><p>Null值处理</p><ul><li>Freemarker中获取一个不存在的值或者值为Null时会报异常</li><li>默认值: <code>${key!&quot;我是默认值&quot;}</code></li><li>空字符串: <code>${key!}</code></li><li>使用<code>&lt;#if&gt;</code>判断Null值时  使用<code>&lt;#if key??&gt;</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;#if val??&gt;</span><br><span class="line">//不为空</span><br><span class="line">&lt;#else&gt;</span><br><span class="line">//值为空</span><br><span class="line">&lt;/#if&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>引入其他模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;#include &quot;hello.ftl&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="FreeMarker和Spring整合"><a href="#FreeMarker和Spring整合" class="headerlink" title=" FreeMarker和Spring整合 "></a><font color="orange"> FreeMarker和Spring整合 </font></h3><h4 id="导入相关jar包"><a href="#导入相关jar包" class="headerlink" title=" 导入相关jar包 "></a><font color="orange"> 导入相关jar包 </font></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="和Spring整合"><a href="#和Spring整合" class="headerlink" title=" 和Spring整合 "></a><font color="orange"> 和Spring整合 </font></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"freemarkerConfig"</span><span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateLoaderPath"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/ftl/"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="整合测试"><a href="#整合测试" class="headerlink" title=" 整合测试 "></a><font color="orange"> 整合测试 </font></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private FreeMarkerConfigurer freeMarkerConfigurer;</span><br><span class="line"></span><br><span class="line">public void getHtml() throws Exception &#123;</span><br><span class="line">    Configuration configuration = freeMarkerConfigurer.getConfiguration();</span><br><span class="line">    Template template = configuration.getTemplate(&quot;hello.ftl&quot;);</span><br><span class="line"></span><br><span class="line">    Map map = new HashMap();</span><br><span class="line">    map.put(&quot;hello&quot;, &quot;spring整合&quot;);</span><br><span class="line"></span><br><span class="line">    Writer writer = new FileWriter(new File(&quot;/Users/apple/Desktop/hello.html&quot;));</span><br><span class="line">    template.process(map, writer);</span><br><span class="line">    writer.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当一个大型网站并发量很大时, 同一时间大量的访问导致服务器压力加大以及数据库数据交换频繁.大型动态网站之所以可以做到能快速响应高并发，它们都是尽量让自己的网站静态化，当然这种静态化绝不是把网站就做成静态网站，而是在充分理解了静态网站在提升网站响应速度的基础上对动态网站进行改良。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Freemaker" scheme="http://yoursite.com/tags/Freemaker/"/>
    
  </entry>
  
  <entry>
    <title>消息队列(MQ)的使用</title>
    <link href="http://yoursite.com/2017/06/23/Java%20Web/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97(MQ)%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/06/23/Java Web/消息队列(MQ)的使用/</id>
    <published>2017-06-23T05:49:48.000Z</published>
    <updated>2019-04-29T08:39:51.649Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://47.96.147.179/images/java/MQ_header.jpg" alt="hello" style="width: 80%; text-align: center; display: block; margin-top:0px; margin-bottom:0px"></p><h2 id="什么是MQ"><a href="#什么是MQ" class="headerlink" title="什么是MQ"></a><font color="orange">什么是MQ</font></h2><p>消息队列（MQ）是一种应用程序对应用程序的通信方法。应用程序通过写和检索出入列队的针对应用程序的数据（消息）来通信，而无需专用连接来链接它们。消息传递指的是程序之间通过在消息中发送数据进行通信，而不是通过直接调用彼此来通信，直接调用通常是用于诸如远程过程调用的技术。排队指的是应用程序通过队列来通信。队列的使用除去了接收和发送应用程序同时执行的要求。</p><p>MQ是一个消息中间件，ActiveMQ、RabbitMQ、kafka<br><a id="more"></a></p><h2 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title=" ActiveMQ "></a><font color="orange"> ActiveMQ </font></h2><h3 id="什么是ActiveMQ"><a href="#什么是ActiveMQ" class="headerlink" title=" 什么是ActiveMQ "></a><font color="orange"> 什么是ActiveMQ </font></h3><p>ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。ActiveMQ 是一个完全支持JMS1.1和J2EE 1.4规范的 JMS Provider实现,尽管JMS规范出台已经是很久的事情了,但是JMS在当今的J2EE应用中间仍然扮演着特殊的地位。</p><ul><li>主要特点：<ul><li>1、多种语言和协议编写客户端。语言: Java, C, C++, C#, Ruby, Perl, Python, PHP。应用协议: OpenWire,Stomp REST,WS Notification,XMPP,AMQP</li><li>2、完全支持JMS1.1和J2EE 1.4规范 (持久化,XA消息,事务)</li><li>3、对Spring的支持,ActiveMQ可以很容易内嵌到使用Spring的系统里面去,而且也支持Spring2.0的特性</li><li>4、通过了常见J2EE服务器(如 Geronimo,JBoss 4, GlassFish,WebLogic)的测试,其中通过JCA 1.5 resource adaptors的配置,可以让ActiveMQ可以自动的部署到任何兼容J2EE 1.4 商业服务器上</li><li>5、支持多种传送协议:in-VM,TCP,SSL,NIO,UDP,JGroups,JXTA</li><li>6、支持通过JDBC和journal提供高速的消息持久化</li><li>7、从设计上保证了高性能的集群,客户端-服务器,点对点</li><li>8、支持Ajax</li><li>9、支持与Axis的整合</li><li>10、可以很容易得调用内嵌JMS provider,进行测试</li></ul></li></ul><h3 id="什么情况下使用ActiveMQ"><a href="#什么情况下使用ActiveMQ" class="headerlink" title=" 什么情况下使用ActiveMQ? "></a><font color="orange"> 什么情况下使用ActiveMQ? </font></h3><ul><li>多个项目之间集成 <ul><li>跨平台 </li><li>多语言 </li><li>多项目</li></ul></li><li>降低系统间模块的耦合度，解耦 <ul><li>软件扩展性</li></ul></li><li>系统前后端隔离 <ul><li>前后端隔离，屏蔽高安全区</li></ul></li></ul><h3 id="ActiveMQ的消息形式"><a href="#ActiveMQ的消息形式" class="headerlink" title=" ActiveMQ的消息形式 "></a><font color="orange"> ActiveMQ的消息形式 </font></h3><ul><li><p>消息的传递有两种类型：</p><ul><li>一种是点对点的，即一个生产者和一个消费者一一对应；(一对一)</li><li>另一种是发布/订阅模式，即一个生产者产生消息并进行发送后，可以由多个消费者进行接收。(广播)</li></ul></li><li><p>JMS定义了五种不同的消息正文格式，以及调用的消息类型，允许你发送并接收以一些不同形式的数据，提供现有消息格式的一些级别的兼容性。</p><ul><li>StreamMessage – Java原始值的数据流</li><li>MapMessage–一套名称-值对</li><li>TextMessage–一个字符串对象<font color="red">(使用的最多)</font></li><li>ObjectMessage–一个序列化的 Java对象</li><li>BytesMessage–一个字节的数据流</li></ul></li></ul><h2 id="ActiveMQ的安装"><a href="#ActiveMQ的安装" class="headerlink" title=" ActiveMQ的安装 "></a><font color="orange"> ActiveMQ的安装 </font></h2><ul><li><a href="http://activemq.apache.org" target="_blank" rel="noopener">官网下载地址</a></li><li><a href="/2016/08/08/资料整理/国内镜像站mirror整理">其他镜像站下载</a></li></ul><p>解压压缩文件, 进入<code>/bin</code>目录, </p><ul><li>运行: <code>./activemq start</code></li><li>关闭: <code>./activemq stop</code></li><li>查询状态: <code>./activemq status</code><br>如果服务器安装了防火墙请开放<code>8161</code>端口, 该端口是ActiveMQ默认的管理端口.<br>然后浏览器打开<code>http://服务器ip地址:8161/admin</code>, 用户名和密码默认是<code>admin</code><center><br><img src="http://47.96.147.179/images/java/activeMQ.png" alt="hello" style="width: 100%; text-align: center; display: block; margin-top:0px; margin-bottom:0px"><br></center></li></ul><h2 id="ActiveMQ的使用"><a href="#ActiveMQ的使用" class="headerlink" title=" ActiveMQ的使用 "></a><font color="orange"> ActiveMQ的使用 </font></h2><p>ActiveMQ的Maven依赖:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.11.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="Queue"><a href="#Queue" class="headerlink" title=" Queue "></a><font color="orange"> Queue </font></h3><p>默认会持久化到服务端</p><h4 id="Producer-消息发送者"><a href="#Producer-消息发送者" class="headerlink" title=" Producer: 消息发送者 "></a><font color="orange"> Producer: 消息发送者 </font></h4><ul><li>1、创建ConnectionFactory对象，需要指定服务端ip及端口号, 默认消息服务端口<code>61616</code>, 有防火墙请开放此端口。</li><li>2、使用ConnectionFactory对象创建一个Connection对象。</li><li>3、开启连接，调用Connection对象的start方法。</li><li>4、使用Connection对象创建一个Session对象。</li><li>5、使用Session对象创建一个Destination对象（topic、queue），此处创建一个Queue对象。</li><li>6、使用Session对象创建一个Producer对象。</li><li>7、创建一个Message对象，创建一个TextMessage对象。</li><li>8、使用Producer对象发送消息。</li><li>9、关闭资源。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActiveMQ</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试activeMQ消息发送者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueueProducer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 第一步：创建ConnectionFactory对象，需要指定服务端ip及端口号。</span></span><br><span class="line">        <span class="comment">//brokerURL服务器的ip及端口号</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://192.168.1.184:61616"</span>);</span><br><span class="line">        <span class="comment">// 第二步：使用ConnectionFactory对象创建一个Connection对象。</span></span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line">        <span class="comment">// 第三步：开启连接，调用Connection对象的start方法。</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">// 第四步：使用Connection对象创建一个Session对象。</span></span><br><span class="line">        <span class="comment">//第一个参数：是否开启事务。true：开启事务，第二个参数忽略。一般不是事务, 可以使用消息队列保证数据的一致性.</span></span><br><span class="line">        <span class="comment">//第二个参数：当第一个参数为false时，才有意义。消息的应答模式。1、自动应答2、手动应答。一般是自动应答。</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">// 第五步：使用Session对象创建一个Destination对象（topic、queue），此处创建一个Queue对象。</span></span><br><span class="line">        <span class="comment">//参数：队列的名称。</span></span><br><span class="line">        Queue queue = session.createQueue(<span class="string">"test-queue"</span>);</span><br><span class="line">        <span class="comment">// 第六步：使用Session对象创建一个Producer对象。</span></span><br><span class="line">        MessageProducer producer = session.createProducer(queue);</span><br><span class="line">        <span class="comment">// 第七步：创建一个Message对象，创建一个TextMessage对象。</span></span><br><span class="line">        <span class="comment">/*TextMessage message = new ActiveMQTextMessage();</span></span><br><span class="line"><span class="comment">message.setText("hello activeMq,this is my first test.");*/</span></span><br><span class="line">        TextMessage textMessage = session.createTextMessage(<span class="string">"hello activeMq,this is my first test."</span>);</span><br><span class="line">        <span class="comment">// 第八步：使用Producer对象发送消息。</span></span><br><span class="line">        producer.send(textMessage);</span><br><span class="line">        <span class="comment">// 第九步：关闭资源。</span></span><br><span class="line">        producer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Consumer-消息接受者"><a href="#Consumer-消息接受者" class="headerlink" title=" Consumer: 消息接受者 "></a><font color="orange"> Consumer: 消息接受者 </font></h4><ul><li>1、创建一个ConnectionFactory对象。</li><li>2、从ConnectionFactory对象中获得一个Connection对象。</li><li>3、开启连接。调用Connection对象的start方法。</li><li>4、使用Connection对象创建一个Session对象。</li><li>5、使用Session对象创建一个Destination对象。和发送端保持一致queue，并且队列的名称一致。</li><li>6、使用Session对象创建一个Consumer对象。</li><li>7、接收消息。</li><li>8、打印消息。</li><li>9、关闭资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActiveMQ</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试activeMQ消息接受者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueueConsumer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 第一步：创建一个ConnectionFactory对象。</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://192.168.1.184:61616"</span>);</span><br><span class="line">        <span class="comment">// 第二步：从ConnectionFactory对象中获得一个Connection对象。</span></span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line">        <span class="comment">// 第三步：开启连接。调用Connection对象的start方法。</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">// 第四步：使用Connection对象创建一个Session对象。</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">// 第五步：使用Session对象创建一个Destination对象。和发送端保持一致queue，并且队列的名称一致。</span></span><br><span class="line">        Queue queue = session.createQueue(<span class="string">"test-queue"</span>);</span><br><span class="line">        <span class="comment">// 第六步：使用Session对象创建一个Consumer对象。</span></span><br><span class="line">        MessageConsumer consumer = session.createConsumer(queue);</span><br><span class="line">        <span class="comment">// 第七步：接收消息。</span></span><br><span class="line">        consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TextMessage textMessage = (TextMessage) message;</span><br><span class="line">                    String text = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">//取消息的内容</span></span><br><span class="line">                    text = textMessage.getText();</span><br><span class="line">                    <span class="comment">// 第八步：打印消息。</span></span><br><span class="line">                    System.out.println(text);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//等待键盘输入</span></span><br><span class="line">        System.in.read();</span><br><span class="line">        <span class="comment">// 第九步：关闭资源</span></span><br><span class="line">        consumer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Topic"><a href="#Topic" class="headerlink" title=" Topic "></a><font color="orange"> Topic </font></h3><p>默认不会持久化到服务端,但是可以配置持久化到服务器, 需要先运行消息接受者.</p><h4 id="Producer-消息发送者-1"><a href="#Producer-消息发送者-1" class="headerlink" title=" Producer: 消息发送者 "></a><font color="orange"> Producer: 消息发送者 </font></h4><ul><li>1、创建ConnectionFactory对象，需要指定服务端ip及端口号。</li><li>2、使用ConnectionFactory对象创建一个Connection对象。</li><li>3、开启连接，调用Connection对象的start方法。</li><li>4、使用Connection对象创建一个Session对象。</li><li>5、使用Session对象创建一个Destination对象（topic、queue），此处创建一个Topic对象。</li><li>6、使用Session对象创建一个Producer对象。</li><li>7、创建一个Message对象，创建一个TextMessage对象。</li><li>8、使用Producer对象发送消息。</li><li>9、关闭资源。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActiveMQ</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试activeMQ topic消息发送者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTopicProducer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 第一步：创建ConnectionFactory对象，需要指定服务端ip及端口号。</span></span><br><span class="line">        <span class="comment">// brokerURL服务器的ip及端口号</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://192.168.1.184:61616"</span>);</span><br><span class="line">        <span class="comment">// 第二步：使用ConnectionFactory对象创建一个Connection对象。</span></span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line">        <span class="comment">// 第三步：开启连接，调用Connection对象的start方法。</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">// 第四步：使用Connection对象创建一个Session对象。</span></span><br><span class="line">        <span class="comment">// 第一个参数：是否开启事务。true：开启事务，第二个参数忽略。</span></span><br><span class="line">        <span class="comment">// 第二个参数：当第一个参数为false时，才有意义。消息的应答模式。1、自动应答2、手动应答。一般是自动应答。</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">// 第五步：使用Session对象创建一个Destination对象（topic、queue），此处创建一个topic对象。</span></span><br><span class="line">        <span class="comment">// 参数：话题的名称。</span></span><br><span class="line">        Topic topic = session.createTopic(<span class="string">"test-topic"</span>);</span><br><span class="line">        <span class="comment">// 第六步：使用Session对象创建一个Producer对象。</span></span><br><span class="line">        MessageProducer producer = session.createProducer(topic);</span><br><span class="line">        <span class="comment">// 第七步：创建一个Message对象，创建一个TextMessage对象。</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * TextMessage message = new ActiveMQTextMessage(); message.setText(</span></span><br><span class="line"><span class="comment"> * "hello activeMq,this is my first test.");</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">        TextMessage textMessage = session.createTextMessage(<span class="string">"hello activeMq,this is my topic test"</span>);</span><br><span class="line">        <span class="comment">// 第八步：使用Producer对象发送消息。</span></span><br><span class="line">        producer.send(textMessage);</span><br><span class="line">        <span class="comment">// 第九步：关闭资源。</span></span><br><span class="line">        producer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Consumer-消息接受者-1"><a href="#Consumer-消息接受者-1" class="headerlink" title=" Consumer: 消息接受者 "></a><font color="orange"> Consumer: 消息接受者 </font></h4><ul><li>1、创建一个ConnectionFactory对象。</li><li>2、从ConnectionFactory对象中获得一个Connection对象。</li><li>3、开启连接。调用Connection对象的start方法。</li><li>4、使用Connection对象创建一个Session对象。</li><li>5、使用Session对象创建一个Destination对象。和发送端保持一致topic，并且话题的名称一致。</li><li>6、使用Session对象创建一个Consumer对象。</li><li>7、接收消息。</li><li>8、打印消息。</li><li>9、关闭资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActiveMQ</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试activeMQ 消息接受者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTopicConsumer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 第一步：创建一个ConnectionFactory对象。</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://192.168.1.184:61616"</span>);</span><br><span class="line">        <span class="comment">// 第二步：从ConnectionFactory对象中获得一个Connection对象。</span></span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line">        <span class="comment">// 第三步：开启连接。调用Connection对象的start方法。</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">// 第四步：使用Connection对象创建一个Session对象。</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">// 第五步：使用Session对象创建一个Destination对象。和发送端保持一致topic，并且话题的名称一致。</span></span><br><span class="line">        Topic topic = session.createTopic(<span class="string">"test-topic"</span>);</span><br><span class="line">        <span class="comment">// 第六步：使用Session对象创建一个Consumer对象。</span></span><br><span class="line">        MessageConsumer consumer = session.createConsumer(topic);</span><br><span class="line">        <span class="comment">// 第七步：接收消息。</span></span><br><span class="line">        consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TextMessage textMessage = (TextMessage) message;</span><br><span class="line">                    String text = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">// 取消息的内容</span></span><br><span class="line">                    text = textMessage.getText();</span><br><span class="line">                    <span class="comment">// 第八步：打印消息。</span></span><br><span class="line">                    System.out.println(text);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">"topic的消费端03。。。。。"</span>);</span><br><span class="line">        <span class="comment">// 等待键盘输入</span></span><br><span class="line">        System.in.read();</span><br><span class="line">        <span class="comment">// 第九步：关闭资源</span></span><br><span class="line">        consumer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring整合ActiveMQ"><a href="#Spring整合ActiveMQ" class="headerlink" title=" Spring整合ActiveMQ "></a><font color="orange"> Spring整合ActiveMQ </font></h2><h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a><font color="orange">发送消息</font></h3><h4 id="导入相关jar包"><a href="#导入相关jar包" class="headerlink" title="导入相关jar包"></a><font color="orange">导入相关jar包</font></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    &lt;version&gt;4.2.4.RELEASE&lt;&lt;/version&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    &lt;version&gt;4.2.4.RELEASE&lt;&lt;/version&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="spring配置文件applicationContext-activemq-xml"><a href="#spring配置文件applicationContext-activemq-xml" class="headerlink" title="spring配置文件applicationContext-activemq.xml"></a><font color="orange">spring配置文件<code>applicationContext-activemq.xml</code></font></h4><ul><li>1、配置ConnectionFactory</li><li>2、配置生产者, 使用JMSTemplate对象</li><li>3、配置Destination<ul><li>注意构造函数的参数是自定义queue/topic的名称.</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://192.168.1.184:61616"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">ref</span>=<span class="string">"targetConnectionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置生产者 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这个是队列目的地，点对点的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queueDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>test-queue<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这个是主题目的地，一对多的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"topicDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"topic"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a><font color="orange">测试代码</font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.core.JmsTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.core.MessageCreator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(<span class="string">"classpath:applicationContext-activemq.xml"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActiveMQSpring</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Queue queue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueueProducer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        jmsTemplate.send(queue, <span class="keyword">new</span> MessageCreator() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">                TextMessage textMessage = session.createTextMessage(<span class="string">"spring activemq test"</span>);</span><br><span class="line">                <span class="keyword">return</span> textMessage;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接受消息"><a href="#接受消息" class="headerlink" title="接受消息"></a><font color="orange">接受消息</font></h3><h4 id="导入相关jar包-1"><a href="#导入相关jar包-1" class="headerlink" title="导入相关jar包"></a><font color="orange">导入相关jar包</font></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入ActiveMQ的jar包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建MessageListener实现类"><a href="#创建MessageListener实现类" class="headerlink" title="创建MessageListener实现类"></a><font color="orange">创建MessageListener实现类</font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.search.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Message;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageListener;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HJMessageListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TextMessage textMessage = (TextMessage) message;</span><br><span class="line">            <span class="comment">//取消息内容</span></span><br><span class="line">            String text = textMessage.getText();</span><br><span class="line">            System.out.println(text);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="spring配置文件applicationContext-activemq-xml-1"><a href="#spring配置文件applicationContext-activemq-xml-1" class="headerlink" title="spring配置文件applicationContext-activemq.xml"></a><font color="orange">spring配置文件<code>applicationContext-activemq.xml</code></font></h4><ul><li>1、配置ConnectionFactory</li><li>2、配置Destination<ul><li>注意构造函数的参数是自定义queue/topic的名称要和前面设置的一样.</li></ul></li><li>3、配置消息监听者</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://192.168.1.184:61616"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">ref</span>=<span class="string">"targetConnectionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这个是队列目的地，点对点的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queueDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>test-queue<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这个是主题目的地，一对多的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"topicDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"topic"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 接收消息 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置监听器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myMessageListener"</span> <span class="attr">class</span>=<span class="string">"com.coppco.search.listener.HJMessageListener"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 消息监听容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"queueDestination"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"myMessageListener"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a><font color="orange">测试代码</font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://47.96.147.179/images/java/MQ_header.jpg&quot; alt=&quot;hello&quot; style=&quot;width: 80%; text-align: center; display: block; margin-top:0px; margin-bottom:0px&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是MQ&quot;&gt;&lt;a href=&quot;#什么是MQ&quot; class=&quot;headerlink&quot; title=&quot;什么是MQ&quot;&gt;&lt;/a&gt;&lt;font color=&quot;orange&quot;&gt;什么是MQ&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;消息队列（MQ）是一种应用程序对应用程序的通信方法。应用程序通过写和检索出入列队的针对应用程序的数据（消息）来通信，而无需专用连接来链接它们。消息传递指的是程序之间通过在消息中发送数据进行通信，而不是通过直接调用彼此来通信，直接调用通常是用于诸如远程过程调用的技术。排队指的是应用程序通过队列来通信。队列的使用除去了接收和发送应用程序同时执行的要求。&lt;/p&gt;
&lt;p&gt;MQ是一个消息中间件，ActiveMQ、RabbitMQ、kafka&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="MQ" scheme="http://yoursite.com/tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title>全文搜索技术:Lucene和Solr</title>
    <link href="http://yoursite.com/2017/06/20/Java%20Web/%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2017/06/20/Java Web/全文搜索技术/</id>
    <published>2017-06-20T07:25:36.000Z</published>
    <updated>2019-04-29T08:39:51.648Z</updated>
    
    <content type="html"><![CDATA[<p>Lucene和Solr都是基于Java的高效全文检索库.</p><p><img src="http://47.96.147.179/images/java/solr_header.jpg" alt="hello" style="width: 50%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"></p><a id="more"></a><h2 id="数据分类"><a href="#数据分类" class="headerlink" title=" 数据分类 "></a><font color="orange"> 数据分类 </font></h2><p>我们生活中的数据总体分为两种:<font color="orange">结构化数据</font>和<font color="orange">非结构化数据</font>。</p><ul><li>结构化数据:指具有固定格式或有限长度的数据，如数据库，元数据等。</li><li>非结构化数据:指不定长或无固定格式的数据，如邮件，word文档等磁盘上的文件</li></ul><h2 id="非结构化数据查询方法"><a href="#非结构化数据查询方法" class="headerlink" title=" 非结构化数据查询方法 "></a><font color="orange"> 非结构化数据查询方法 </font></h2><ul><li>顺序扫描法(Serial Scanning)<br>所谓顺序扫描，比如要找内容包含某一个字符串的文件，就是一个文档一个文档的看，对于每一个文档，从头看到尾，如果此文档包含此字符串，则此文档为我们要找的文件，接着看下一个文件，直到扫描完所有的文件。如利用windows的搜索也可以搜索文件内容，只是相当的慢。</li><li>全文检索(Full-text Search)<br>将非结构化数据中的一部分信息提取出来，重新组织，使其变得有一定结构，然后对此有一定结构的数据进行搜索，从而达到搜索相对较快的目的。这部分从非结构化数据中提取出的然后重新组织的信息，我们称之索引。<br>例如：字典。字典的拼音表和部首检字表就相当于字典的索引，对每一个字的解释是非结构化的，如果字典没有音节表和部首检字表，在茫茫辞海中找一个字只能顺序扫描。然而字的某些信息可以提取出来进行结构化处理，比如读音，就比较结构化，分声母和韵母，分别只有几种可以一一列举，于是将读音拿出来按一定的顺序排列，每一项读音都指向此字的详细解释的页数。我们搜索时按结构化的拼音搜到读音，然后按其指向的页数，便可找到我们的非结构化数据——也即对字的解释。<br>这种先建立索引，再对索引进行搜索的过程就叫全文检索(Full-text Search)。</li></ul><h2 id="全文检索的一般步骤"><a href="#全文检索的一般步骤" class="headerlink" title=" 全文检索的一般步骤"></a><font color="orange"> 全文检索的一般步骤</font></h2><p>全文检索大体分两个过程，索引创建 (Indexing) 和搜索索引 (Search) 。</p><ul><li>索引创建：将现实世界中所有的结构化和非结构化数据提取信息，创建索引的过程。</li><li>搜索索引：就是得到用户的查询请求，搜索创建的索引，然后返回结果的过程。</li></ul><h2 id="Lucene"><a href="#Lucene" class="headerlink" title=" Lucene "></a><font color="orange"> Lucene </font></h2><h3 id="创建索引库"><a href="#创建索引库" class="headerlink" title=" 创建索引库 "></a><font color="orange"> 创建索引库 </font></h3><p>将原始内容创建为包含域（Field）的文档（document），需要再对域中的内容进行分析，分析的过程是经过对原始文档提取单词、将字母转为小写、去除标点符号、去除停用词等过程生成最终的语汇单元，可以将语汇单元理解为一个一个的单词。</p><h4 id="Field域的属性"><a href="#Field域的属性" class="headerlink" title=" Field域的属性 "></a><font color="orange"> Field域的属性 </font></h4><table><thead><tr><th style="text-align:center">Field类</th><th style="text-align:center">数据类型</th><th style="text-align:center">Analyzed是否分析</th><th style="text-align:center">Indexed是否索引</th><th style="text-align:center">Stored是否存储</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">StringField(FieldName, FieldValue,Store.YES))</td><td style="text-align:center">字符串</td><td style="text-align:center">N</td><td style="text-align:center">Y</td><td style="text-align:center">Y或N</td><td style="text-align:center">这个Field用来构建一个字符串Field，但是不会进行分析，会将整个串存储在索引中，比如(订单号,姓名等)是否存储在文档中用Store.YES或Store.NO决定</td></tr><tr><td style="text-align:center">LongField(FieldName, FieldValue,Store.YES)</td><td style="text-align:center">Long型</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y或N</td><td style="text-align:center">这个Field用来构建一个Long数字型Field，进行分析和索引，比如(价格) 是否存储在文档中用Store.YES或Store.NO决定</td></tr><tr><td style="text-align:center">StoredField(FieldName, FieldValue)</td><td style="text-align:center">重载方法，支持多种类型</td><td style="text-align:center">N</td><td style="text-align:center">N</td><td style="text-align:center">Y</td><td style="text-align:center">这个Field用来构建不同类型Field不分析，不索引，但要Field存储在文档中(如图片,因为要存放图片地址)</td></tr><tr><td style="text-align:center">TextField(FieldName, FieldValue, Store.NO)或TextField(FieldName, reader)</td><td style="text-align:center">字符串或流</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y或N</td><td style="text-align:center">如果是一个Reader, lucene猜测内容比较多,会采用Unstored的策略.</td></tr></tbody></table><h4 id="使用的jar包"><a href="#使用的jar包" class="headerlink" title=" 使用的jar包 "></a><font color="orange"> 使用的jar包 </font></h4><ul><li>Lucene包<ul><li>lucene-core-4.10.3.jar</li><li>lucene-analyzers-common-4.10.3.jar</li><li>lucene-queryparser-4.10.3.jar</li></ul></li><li>其它<ul><li>commons-io-2.4.jar</li><li>junit-4.9.jar</li></ul></li></ul><h4 id="创建索引实例代码"><a href="#创建索引实例代码" class="headerlink" title=" 创建索引实例代码 "></a><font color="orange"> 创建索引实例代码 </font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建索引</span></span><br><span class="line">puclic <span class="class"><span class="keyword">class</span> <span class="title">CreateIndex</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//指定索引库存放的路径</span></span><br><span class="line">        <span class="comment">//  /Users/apple/indexData</span></span><br><span class="line">        Directory directory = FSDirectory.open(<span class="keyword">new</span> File(<span class="string">"/Users/apple/indexData"</span>));</span><br><span class="line">        <span class="comment">//索引库还可以存放到内存中</span></span><br><span class="line">        <span class="comment">//Directory directory = new RAMDirectory();</span></span><br><span class="line">        <span class="comment">//创建一个标准分析器</span></span><br><span class="line">        Analyzer analyzer = <span class="keyword">new</span> StandardAnalyzer();</span><br><span class="line">        <span class="comment">//创建indexwriterCofig对象</span></span><br><span class="line">        <span class="comment">//第一个参数： Lucene的版本信息，可以选择对应的lucene版本也可以使用LATEST</span></span><br><span class="line">        <span class="comment">//第二根参数：分析器对象</span></span><br><span class="line">        IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(Version.LATEST, analyzer);</span><br><span class="line">        <span class="comment">//创建indexwriter对象</span></span><br><span class="line">        IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(directory, config);</span><br><span class="line">        <span class="comment">//原始文档的路径: /Users/apple/data</span></span><br><span class="line">        File dir = <span class="keyword">new</span> File(<span class="string">"/Users/apple/data"</span>);</span><br><span class="line">        <span class="keyword">for</span> (File f : dir.listFiles()) &#123;</span><br><span class="line">            <span class="comment">//文件名</span></span><br><span class="line">            String fileName = f.getName();</span><br><span class="line">            <span class="comment">//文件内容</span></span><br><span class="line">            String fileContent = FileUtils.readFileToString(f);</span><br><span class="line">            <span class="comment">//文件路径</span></span><br><span class="line">            String filePath = f.getPath();</span><br><span class="line">            <span class="comment">//文件的大小</span></span><br><span class="line">            <span class="keyword">long</span> fileSize  = FileUtils.sizeOf(f);</span><br><span class="line">            <span class="comment">//创建文件名域</span></span><br><span class="line">            <span class="comment">//第一个参数：域的名称</span></span><br><span class="line">            <span class="comment">//第二个参数：域的内容</span></span><br><span class="line">            <span class="comment">//第三个参数：是否存储</span></span><br><span class="line">            Field fileNameField = <span class="keyword">new</span> TextField(<span class="string">"filename"</span>, fileName, Store.YES);</span><br><span class="line">            <span class="comment">//文件内容域</span></span><br><span class="line">            Field fileContentField = <span class="keyword">new</span> TextField(<span class="string">"content"</span>, fileContent, Store.YES);</span><br><span class="line">            <span class="comment">//文件路径域（不分析、不索引、只存储）</span></span><br><span class="line">            Field filePathField = <span class="keyword">new</span> StoredField(<span class="string">"path"</span>, filePath);</span><br><span class="line">            <span class="comment">//文件大小域</span></span><br><span class="line">            Field fileSizeField = <span class="keyword">new</span> LongField(<span class="string">"size"</span>, fileSize, Store.YES);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建document对象</span></span><br><span class="line">            Document document = <span class="keyword">new</span> Document();</span><br><span class="line">            document.add(fileNameField);</span><br><span class="line">            document.add(fileContentField);</span><br><span class="line">            document.add(filePathField);</span><br><span class="line">            document.add(fileSizeField);</span><br><span class="line">            <span class="comment">//创建索引，并写入索引库</span></span><br><span class="line">            indexWriter.addDocument(document);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭indexwriter</span></span><br><span class="line">        indexWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询索引"><a href="#查询索引" class="headerlink" title=" 查询索引 "></a><font color="orange"> 查询索引 </font></h3><p>查询索引也是搜索的过程。搜索就是用户输入关键字，从索引（index）中进行搜索的过程。根据关键字搜索索引，根据索引找到对应的文档，从而找到要搜索的内容（这里指磁盘上的文件）。<br>图形化界面可以使用Luke工具查看索引文件.</p><h4 id="IndexSearcher搜索方法"><a href="#IndexSearcher搜索方法" class="headerlink" title=" IndexSearcher搜索方法 "></a><font color="orange"> IndexSearcher搜索方法 </font></h4><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">indexSearcher.search(query, n)</td><td style="text-align:center">根据Query搜索，返回评分最高的n条记录</td></tr><tr><td style="text-align:center">indexSearcher.search(query, filter, n)</td><td style="text-align:center">根据Query搜索，添加过滤策略，返回评分最高的n条记录</td></tr><tr><td style="text-align:center">indexSearcher.search(query, n, sort)</td><td style="text-align:center">根据Query搜索，添加排序策略，返回评分最高的n条记录</td></tr><tr><td style="text-align:center">indexSearcher.search(booleanQuery, filter, n, sort)</td><td style="text-align:center">根据Query搜索，添加过滤策略，添加排序策略，返回评分最高的n条记录</td></tr></tbody></table><h4 id="查询索引实例代码"><a href="#查询索引实例代码" class="headerlink" title=" 查询索引实例代码 "></a><font color="orange"> 查询索引实例代码 </font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryIndex</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">searchIndex</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//指定索引库存放的路径</span></span><br><span class="line">        <span class="comment">//   /Users/apple/indexData</span></span><br><span class="line">        Directory directory = FSDirectory.open(<span class="keyword">new</span> File(<span class="string">"/Users/apple/indexData"</span>));</span><br><span class="line">        <span class="comment">//创建indexReader对象</span></span><br><span class="line">        IndexReader indexReader = DirectoryReader.open(directory);</span><br><span class="line">        <span class="comment">//创建indexsearcher对象</span></span><br><span class="line">        IndexSearcher indexSearcher = <span class="keyword">new</span> IndexSearcher(indexReader);</span><br><span class="line">        <span class="comment">//创建查询</span></span><br><span class="line">        Query query = <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"filename"</span>, <span class="string">"apache"</span>));</span><br><span class="line">        <span class="comment">//执行查询</span></span><br><span class="line">        <span class="comment">//第一个参数是查询对象，第二个参数是查询结果返回的最大值</span></span><br><span class="line">        TopDocs topDocs = indexSearcher.search(query, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">//查询结果的总条数</span></span><br><span class="line">        System.out.println(<span class="string">"查询结果的总条数："</span>+ topDocs.totalHits);</span><br><span class="line">        <span class="comment">//遍历查询结果</span></span><br><span class="line">        <span class="comment">//topDocs.scoreDocs存储了document对象的id</span></span><br><span class="line">        <span class="keyword">for</span> (ScoreDoc scoreDoc : topDocs.scoreDocs) &#123;</span><br><span class="line">            <span class="comment">//scoreDoc.doc属性就是document对象的id</span></span><br><span class="line">            <span class="comment">//根据document的id找到document对象</span></span><br><span class="line">            Document document = indexSearcher.doc(scoreDoc.doc);</span><br><span class="line">            System.out.println(document.get(<span class="string">"filename"</span>));</span><br><span class="line">            <span class="comment">//System.out.println(document.get("content"));</span></span><br><span class="line">            System.out.println(document.get(<span class="string">"path"</span>));</span><br><span class="line">            System.out.println(document.get(<span class="string">"size"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭indexreader对象</span></span><br><span class="line">        indexReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中文分析器"><a href="#中文分析器" class="headerlink" title=" 中文分析器 "></a><font color="orange"> 中文分析器 </font></h3><h4 id="Lucene自带中文分词器"><a href="#Lucene自带中文分词器" class="headerlink" title=" Lucene自带中文分词器 "></a><font color="orange"> Lucene自带中文分词器 </font></h4><ul><li>StandardAnalyzer<ul><li>单字分词：就是按照中文一个字一个字地进行分词。如：“我爱中国”，效果：“我”、“爱”、“中”、“国”。</li></ul></li><li>CJKAnalyzer<ul><li>二分法分词：按两个字进行切分。如：“我是中国人”，效果：“我是”、“是中”、“中国”“国人”。</li></ul></li><li>SmartChineseAnalyzer<ul><li>对中文支持较好，但扩展性差，扩展词库，禁用词库和同义词库等不好处理</li></ul></li></ul><h4 id="第三方中文分析器"><a href="#第三方中文分析器" class="headerlink" title=" 第三方中文分析器 "></a><font color="orange"> 第三方中文分析器 </font></h4><ul><li>paoding<ul><li>已经过时, 停止更新</li></ul></li><li>mmseg4j<ul><li><a href="https://github.com/chenlb/mmseg4j-solr" target="_blank" rel="noopener">github地址</a></li></ul></li><li>IK-analyzer<ul><li><a href="https://code.google.com/p/ik-analyzer/" target="_blank" rel="noopener">google代码地址</a></li><li>2012年之后停止更新</li></ul></li></ul><h3 id="索引库的维护"><a href="#索引库的维护" class="headerlink" title=" 索引库的维护 "></a><font color="orange"> 索引库的维护 </font></h3><h4 id="索引库的添加"><a href="#索引库的添加" class="headerlink" title=" 索引库的添加 "></a><font color="orange"> 索引库的添加 </font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加索引</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditIndex</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDocument</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//索引库存放路径</span></span><br><span class="line">        Directory directory = FSDirectory.open(<span class="keyword">new</span> File(<span class="string">"/Users/apple/indexData"</span>));</span><br><span class="line"></span><br><span class="line">        IndexWriterConfig config = <span class="keyword">new</span> IndexWriterConfig(Version.LATEST, <span class="keyword">new</span> IKAnalyzer());</span><br><span class="line">        <span class="comment">//创建一个indexwriter对象</span></span><br><span class="line">        IndexWriter indexWriter = <span class="keyword">new</span> IndexWriter(directory, config);</span><br><span class="line">        <span class="comment">//创建一个Document对象</span></span><br><span class="line">        Document document = <span class="keyword">new</span> Document();</span><br><span class="line">        <span class="comment">//向document对象中添加域。</span></span><br><span class="line">        <span class="comment">//不同的document可以有不同的域，同一个document可以有相同的域。</span></span><br><span class="line">        document.add(<span class="keyword">new</span> TextField(<span class="string">"filename"</span>, <span class="string">"新添加的文档"</span>, Store.YES));</span><br><span class="line">        document.add(<span class="keyword">new</span> TextField(<span class="string">"content"</span>, <span class="string">"新添加的文档的内容"</span>, Store.NO));</span><br><span class="line">        document.add(<span class="keyword">new</span> TextField(<span class="string">"content"</span>, <span class="string">"新添加的文档的内容第二个content"</span>, Store.YES));</span><br><span class="line">        document.add(<span class="keyword">new</span> TextField(<span class="string">"content1"</span>, <span class="string">"新添加的文档的内容要能看到"</span>, Store.YES));</span><br><span class="line">        <span class="comment">//添加文档到索引库</span></span><br><span class="line">        indexWriter.addDocument(document);</span><br><span class="line">        <span class="comment">//关闭indexwriter</span></span><br><span class="line">        indexWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="索引库删除"><a href="#索引库删除" class="headerlink" title=" 索引库删除 "></a><font color="orange"> 索引库删除 </font></h4><h5 id="删除全部"><a href="#删除全部" class="headerlink" title=" 删除全部 "></a><font color="orange"> 删除全部 </font></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除全部索引</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteAllIndex</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    IndexWriter indexWriter = getIndexWriter();</span><br><span class="line">    <span class="comment">//删除全部索引</span></span><br><span class="line">    indexWriter.deleteAll();</span><br><span class="line">    <span class="comment">//关闭indexwriter</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="指定查询条件删除"><a href="#指定查询条件删除" class="headerlink" title="指定查询条件删除"></a><font color="orange">指定查询条件删除</font></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据查询条件删除索引</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndexByQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    IndexWriter indexWriter = getIndexWriter();</span><br><span class="line">    <span class="comment">//创建一个查询条件</span></span><br><span class="line">    Query query = <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"filename"</span>, <span class="string">"apache"</span>));</span><br><span class="line">    <span class="comment">//根据查询条件删除</span></span><br><span class="line">    indexWriter.deleteDocuments(query);</span><br><span class="line">    <span class="comment">//关闭indexwriter</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="索引库的修改"><a href="#索引库的修改" class="headerlink" title=" 索引库的修改 "></a><font color="orange"> 索引库的修改 </font></h4><p>原理就是先删除后添加。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改索引库</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateIndex</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    IndexWriter indexWriter = getIndexWriter();</span><br><span class="line">    <span class="comment">//创建一个Document对象</span></span><br><span class="line">    Document document = <span class="keyword">new</span> Document();</span><br><span class="line">    <span class="comment">//向document对象中添加域。</span></span><br><span class="line">    <span class="comment">//不同的document可以有不同的域，同一个document可以有相同的域。</span></span><br><span class="line">    document.add(<span class="keyword">new</span> TextField(<span class="string">"filename"</span>, <span class="string">"要更新的文档"</span>, Store.YES));</span><br><span class="line">    document.add(<span class="keyword">new</span> TextField(<span class="string">"content"</span>, <span class="string">"2013年11月18日 - Lucene 简介 Lucene 是一个基于 Java 的全文信息检索工具包,它不是一个完整的搜索应用程序,而是为你的应用程序提供索引和搜索功能。"</span>, Store.YES));</span><br><span class="line">    indexWriter.updateDocument(<span class="keyword">new</span> Term(<span class="string">"content"</span>, <span class="string">"java"</span>), document);</span><br><span class="line">    <span class="comment">//关闭indexWriter</span></span><br><span class="line">    indexWriter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="索引库的查询"><a href="#索引库的查询" class="headerlink" title=" 索引库的查询"></a><font color="red"> 索引库的查询</font></h4><p>对要搜索的信息创建Query查询对象，Lucene会根据Query查询对象生成最终的查询语法，类似关系数据库Sql语法一样Lucene也有自己的查询语法，比如：“name:lucene”表示查询Field的name为“lucene”的文档信息。<br>可通过两种方法创建查询对象：</p><ul><li>1、使用Lucene提供Query子类<ul><li>Query是一个抽象类，lucene提供了很多查询对象，比如TermQuery项精确查询，NumericRangeQuery数字范围查询等。</li><li>如下代码：<ul><li>Query query = new TermQuery(new Term(“name”, “lucene”));</li></ul></li></ul></li><li>2、使用QueryParse解析查询表达式<ul><li>QueryParse会将用户输入的查询表达式解析成Query对象实例。</li><li>如下代码：<ul><li>QueryParser queryParser = new QueryParser(“name”, new IKAnalyzer());</li><li>Query query = queryParser.parse(“name:lucene”);</li></ul></li></ul></li></ul><h5 id="使用query的子类查询"><a href="#使用query的子类查询" class="headerlink" title=" 使用query的子类查询"></a><font color="orange"> 使用query的子类查询</font></h5><h6 id="TermQuery"><a href="#TermQuery" class="headerlink" title="TermQuery"></a><font color="red">TermQuery</font></h6><p>TermQuery，通过项查询，TermQuery不使用分析器所以建议匹配不分词的Field域查询，比如订单号、分类ID号等。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用Termquery查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTermQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    IndexSearcher indexSearcher = getIndexSearcher();</span><br><span class="line">    <span class="comment">//创建查询对象</span></span><br><span class="line">    Query query = <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"content"</span>, <span class="string">"lucene"</span>));</span><br><span class="line">    <span class="comment">//执行查询</span></span><br><span class="line">    TopDocs topDocs = indexSearcher.search(query, <span class="number">10</span>);</span><br><span class="line">    <span class="comment">//共查询到的document个数</span></span><br><span class="line">    System.out.println(<span class="string">"查询结果总数量："</span> + topDocs.totalHits);</span><br><span class="line">    <span class="comment">//遍历查询结果</span></span><br><span class="line">    <span class="keyword">for</span> (ScoreDoc scoreDoc : topDocs.scoreDocs) &#123;</span><br><span class="line">        Document document = indexSearcher.doc(scoreDoc.doc);</span><br><span class="line">        System.out.println(document.get(<span class="string">"filename"</span>));</span><br><span class="line">        <span class="comment">//System.out.println(document.get("content"));</span></span><br><span class="line">        System.out.println(document.get(<span class="string">"path"</span>));</span><br><span class="line">        System.out.println(document.get(<span class="string">"size"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭indexreader</span></span><br><span class="line">    indexSearcher.getIndexReader().close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="NumericRangeQuery"><a href="#NumericRangeQuery" class="headerlink" title="NumericRangeQuery"></a><font color="red">NumericRangeQuery</font></h6><p>可以根据数值范围查询。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数值范围查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNumericRangeQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    IndexSearcher indexSearcher = getIndexSearcher();</span><br><span class="line">    <span class="comment">//创建查询</span></span><br><span class="line">    <span class="comment">//参数：</span></span><br><span class="line">    <span class="comment">//1.域名</span></span><br><span class="line">    <span class="comment">//2.最小值</span></span><br><span class="line">    <span class="comment">//3.最大值</span></span><br><span class="line">    <span class="comment">//4.是否包含最小值</span></span><br><span class="line">    <span class="comment">//5.是否包含最大值</span></span><br><span class="line">    Query query = NumericRangeQuery.newLongRange(<span class="string">"size"</span>, <span class="number">1l</span>, <span class="number">1000l</span>, <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//执行查询</span></span><br><span class="line">    printResult(query, indexSearcher);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="BooleanQuery"><a href="#BooleanQuery" class="headerlink" title="BooleanQuery"></a><font color="red">BooleanQuery</font></h6><p>可以组合查询条件。<br>Occur.MUST：必须满足此条件，相当于and<br>Occur.SHOULD：应该满足，但是不满足也可以，相当于or<br>Occur.MUST_NOT：必须不满足。相当于not<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组合条件查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBooleanQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    IndexSearcher indexSearcher = getIndexSearcher();</span><br><span class="line">    <span class="comment">//创建一个布尔查询对象</span></span><br><span class="line">    BooleanQuery query = <span class="keyword">new</span> BooleanQuery();</span><br><span class="line">    <span class="comment">//创建第一个查询条件</span></span><br><span class="line">    Query query1 = <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"filename"</span>, <span class="string">"apache"</span>));</span><br><span class="line">    Query query2 = <span class="keyword">new</span> TermQuery(<span class="keyword">new</span> Term(<span class="string">"content"</span>, <span class="string">"apache"</span>));</span><br><span class="line">    <span class="comment">//组合查询条件</span></span><br><span class="line">    query.add(query1, Occur.MUST);</span><br><span class="line">    query.add(query2, Occur.MUST);</span><br><span class="line">    <span class="comment">//执行查询</span></span><br><span class="line">    printResult(query, indexSearcher);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="MatchAllDocsQuery"><a href="#MatchAllDocsQuery" class="headerlink" title=" MatchAllDocsQuery "></a><font color="red"> MatchAllDocsQuery </font></h6><p>使用MatchAllDocsQuery查询索引目录中的所有文档<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMatchAllDocsQuery</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    IndexSearcher indexSearcher = getIndexSearcher();</span><br><span class="line">    <span class="comment">//创建查询条件</span></span><br><span class="line">    Query query = <span class="keyword">new</span> MatchAllDocsQuery();</span><br><span class="line">    <span class="comment">//执行查询</span></span><br><span class="line">    printResult(query, indexSearcher);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="使用queryparser查询"><a href="#使用queryparser查询" class="headerlink" title=" 使用queryparser查询 "></a><font color="orange"> 使用queryparser查询 </font></h5><h6 id="QueryParser"><a href="#QueryParser" class="headerlink" title=" QueryParser "></a><font color="red"> QueryParser </font></h6><p>需要加入queryParser依赖的jar包(lucene-queryparser-4.10.3.jar)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryParser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    IndexSearcher indexSearcher = getIndexSearcher();</span><br><span class="line">    <span class="comment">//创建queryparser对象</span></span><br><span class="line">    <span class="comment">//第一个参数默认搜索的域</span></span><br><span class="line">    <span class="comment">//第二个参数就是分析器对象</span></span><br><span class="line">    QueryParser queryParser = <span class="keyword">new</span> QueryParser(<span class="string">"content"</span>, <span class="keyword">new</span> IKAnalyzer());</span><br><span class="line">    Query query = queryParser.parse(<span class="string">"Lucene是java开发的"</span>);</span><br><span class="line">    <span class="comment">//执行查询</span></span><br><span class="line">    printResult(query, indexSearcher);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>查询语法<ul><li>基础的查询: <code>域名:关键字</code><ul><li>如: <code>content:java</code></li></ul></li><li>范围查询: <code>域名+“:”+[最小值 TO 最大值]</code><ul><li>如: <code>size:[1 TO 1000]</code></li><li>范围查询在lucene中不支持数值类型，支持字符串类型。在solr中支持数值类型。</li></ul></li><li>组合条件查询<ul><li>+条件1 +条件2: 两个条件之间是并且的关系and<ul><li>如: <code>+filename:apache +content:apache</code></li><li>另外一种写法: <code>条件1 AND 条件2</code></li></ul></li><li>+条件1 条件2: 必须满足第一个条件，应该满足第二个条件<ul><li>如: <code>+filename:apache content:apache</code></li></ul></li><li>条件1 条件2：两个条件满足其一即可<ul><li>如: <code>filename:apache content:apache</code></li><li>另外一种写法: <code>条件1 OR 条件2</code></li></ul></li><li>-条件1 条件2：必须不满足条件1，要满足条件2<ul><li>如: <code>-filename:apache content:apache</code></li><li>另外一种写法: <code>条件1 NOT 条件2</code></li></ul></li></ul></li></ul></li></ul><h6 id="MulitFieldQueryParser"><a href="#MulitFieldQueryParser" class="headerlink" title=" MulitFieldQueryParser "></a><font color="red"> MulitFieldQueryParser </font></h6><p>可以指定多个默认搜索域<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMultiFiledQueryParser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    IndexSearcher indexSearcher = getIndexSearcher();</span><br><span class="line">    <span class="comment">//可以指定默认搜索的域是多个</span></span><br><span class="line">    String[] fields = &#123;<span class="string">"filename"</span>, <span class="string">"content"</span>&#125;;</span><br><span class="line">    <span class="comment">//创建一个MulitFiledQueryParser对象</span></span><br><span class="line">    MultiFieldQueryParser queryParser = <span class="keyword">new</span> MultiFieldQueryParser(fields, <span class="keyword">new</span> IKAnalyzer());</span><br><span class="line">    Query query = queryParser.parse(<span class="string">"java and apache"</span>);</span><br><span class="line">    System.out.println(query);</span><br><span class="line">    <span class="comment">//执行查询</span></span><br><span class="line">    printResult(query, indexSearcher);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Solr"><a href="#Solr" class="headerlink" title=" Solr "></a><font color="orange"> Solr </font></h2><p>单独使用Lucene实现站内搜索需要开发的工作量较大，主要表现在：索引维护、索引性能优化、搜索性能优化等，因此不建议采用。<br>基于Solr实现站内搜索扩展性较好并且可以减少程序员的工作量，因为Solr提供了较为完备的搜索引擎解决方案，因此在门户、论坛等系统中常用此方案。</p><h3 id="什么是Solr"><a href="#什么是Solr" class="headerlink" title=" 什么是Solr "></a><font color="orange"> 什么是Solr </font></h3><p>Solr 是Apache下的一个顶级开源项目，采用Java开发，它是基于Lucene的全文搜索服务器。Solr提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展，并对索引、搜索性能进行了优化。<br>Solr可以独立运行，运行在Jetty、Tomcat等这些Servlet容器中，Solr 索引的实现方法很简单，用 POST 方法向 Solr 服务器发送一个描述 Field 及其内容的 XML 文档，Solr根据xml文档添加、删除、更新索引 。Solr 搜索只需要发送 HTTP GET 请求，然后对 Solr 返回Xml、json等格式的查询结果进行解析，组织页面布局。Solr不提供构建UI的功能，Solr提供了一个管理界面，通过管理界面可以查询Solr的配置和运行情况。</p><h3 id="Solr与Lucene的区别"><a href="#Solr与Lucene的区别" class="headerlink" title=" Solr与Lucene的区别 "></a><font color="orange"> Solr与Lucene的区别 </font></h3><ul><li>Lucene是一个开放源代码的全文检索引擎工具包，它不是一个完整的全文检索引擎，Lucene提供了完整的查询引擎和索引引擎，目的是为软件开发人员提供一个简单易用的工具包，以方便的在目标系统中实现全文检索的功能，或者以Lucene为基础构建全文检索引擎。</li><li>Solr的目标是打造一款企业级的搜索引擎系统，它是一个搜索引擎服务，可以独立运行，通过Solr可以非常快速的构建企业的搜索引擎，通过Solr也可以高效的完成站内搜索功能。</li></ul><h3 id="安装Solr"><a href="#安装Solr" class="headerlink" title=" 安装Solr "></a><font color="orange"> 安装Solr </font></h3><h4 id="Solr下载地址"><a href="#Solr下载地址" class="headerlink" title=" Solr下载地址 "></a><font color="orange"> Solr下载地址 </font></h4><ul><li><a href="http://lucene.apache.org/solr/" target="_blank" rel="noopener">官网下载地址</a></li><li><a href="http://mirrors.hust.edu.cn/apache/lucene/solr" target="_blank" rel="noopener">华中科技大学镜像站</a></li><li><a href="http://mirrors.shu.edu.cn/apache/lucene/solr" target="_blank" rel="noopener">上海大学镜像站</a></li><li><a href="http://mirrors.tuna.tsinghua.edu.cn/apache/lucene/solr" target="_blank" rel="noopener">清华大学镜像站</a></li><li><a href="http://mirror.bit.edu.cn/apache/lucene/solr" target="_blank" rel="noopener">北京理工大学镜像站</a></li></ul><h4 id="Solr解压目录说明"><a href="#Solr解压目录说明" class="headerlink" title=" Solr解压目录说明 "></a><font color="orange"> Solr解压目录说明 </font></h4><ul><li>Solr4.10.3解压目录<ul><li>bin: solr的运行脚本</li><li>contrib: solr的一些软件/插件，用于增强solr的功能。</li><li>dist: 该目录包含build过程中产生的war和jar文件，以及相关的依赖文件。<ul><li>solr-x.x.x.war: 部署到tomcat时拷贝到<code>tomcat/webapps</code>后运行即可,停掉tomcat之后即可删除<code>tomcat/webapps/solr-x.x.x.war</code></li><li>solr-solrj-x.x.x.jar: Java连接solr服务器使用</li></ul></li><li>docs: solr的API文档</li><li>example: solr工程的例子目录：<ul><li>example/lib/ext: 如果solr需要部署到tomcat, 需要把里面的jar拷贝到<code>tomcat/webapps/solr/WEB-INF/lib/</code>下</li><li>example/solr: 该目录是一个包含了默认配置信息的Solr-Home目录。</li><li>example/multicore: 该目录包含了在Solr的multicore中设置的多个Core目录。 </li><li>example/webapps: 该目录中包括一个solr.war，该war可作为solr的运行实例工程。</li></ul></li><li>licenses: solr相关的一些许可信息</li></ul></li><li>Solr5.5.5解压目录<ul><li>bin: solr的运行脚本</li><li>contrib: solr的一些软件/插件，用于增强solr的功能。</li><li>dist: 该目录包含build过程中产生的war和jar文件，以及相关的依赖文件。</li><li>docs: solr的API文档</li><li>licenses: solr相关的一些许可信息</li><li>server: solr服务<ul><li>solr-webapp/webapp: 里面的可以拷贝到Tomcat的webapps中, 部署到tomcat</li><li>server/lib/ext: 里面的jar需要拷贝到tomcat/webapps/solr/WEB-INF/lib下面</li></ul></li><li>example: solr工程的例子目录</li></ul></li></ul><h4 id="Solr运行环境"><a href="#Solr运行环境" class="headerlink" title=" Solr运行环境 "></a><font color="orange"> Solr运行环境 </font></h4><p>Solr需要运行在一个Servlet容器中，Solr4.10.3要求jdk使用1.7以上，Solr默认提供Jetty（java写的Servlet容器），本教程使用Tocmat作为Servlet容器，环境如下：</p><ul><li>Solr: Solr4.10.3</li><li>JDK: JDK1.7.0_72</li><li>Tomcat: apache-tomcat-7.0.53</li></ul><h4 id="Solr和Tomcat整合"><a href="#Solr和Tomcat整合" class="headerlink" title=" Solr和Tomcat整合"></a><font color="orange"> Solr和Tomcat整合</font></h4><h5 id="Solr-Home与SolrCore"><a href="#Solr-Home与SolrCore" class="headerlink" title=" Solr Home与SolrCore "></a><font color="orange"> Solr Home与SolrCore </font></h5><p>创建一个Solr home目录，SolrHome是Solr运行的主目录，目录中包括了运行Solr实例所有的配置文件和数据文件，Solr实例就是SolrCore，一个SolrHome可以包括多个SolrCore（Solr实例），每个SolrCore提供单独的搜索和索引服务。</p><ul><li><code>Solr-4.x.x/example/solr</code>就是一个Solr Home目录结构</li><li><code>Solr-4.x.x/example/solr/collection1</code>是一个Solr实例</li></ul><h5 id="Solr-4-x-x部署Tomcat"><a href="#Solr-4-x-x部署Tomcat" class="headerlink" title=" Solr-4.x.x部署Tomcat"></a><font color="orange"> Solr-4.x.x部署Tomcat</font></h5><ul><li>1、解压Solr-4.x.x.tar.gz</li><li>2、将solr解压目录中<code>solr-4.x.x/dist/solr-4.x.x.war</code>拷贝到tomcat安装目录下<code>/webapps</code>中, 并重命名为<code>solr.war</code></li><li>3、运行Tomcat, 启动后停止Tomcat, 删除tomcat安装目录下的<code>/webapps/solr.war</code></li><li>4、拷贝solr解压目录<code>solr-4.x.x/example/lib/ext</code>中的的jar包到tomcat安装目录<code>/webapps/solr/WEB-INF/lib/</code>中</li><li>5、配置Solr home<ul><li>5.1、拷贝solr解压目录<code>/solr-4.x.x/example/solr</code>拷贝到其他目录中, 可以重新命名, 如<code>/usr/local/solrhome</code></li><li>5.2、solrhome目录下面可能会有多个solr实例, 每个solr实例文件夹下面的<code>conf/solrconfig.xml</code>, 可以配置相关的solr配置.</li></ul></li><li><p>6、修改tomcat安装目录下<code>/webapps/solr/WEB-INF/web.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">env-entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">env-entry-name</span>&gt;</span>solr/home<span class="tag">&lt;/<span class="name">env-entry-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">env-entry-value</span>&gt;</span>/usr/local/solrhome<span class="tag">&lt;/<span class="name">env-entry-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">env-entry-type</span>&gt;</span>java.lang.String<span class="tag">&lt;/<span class="name">env-entry-type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">env-entry</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>env-entry-name</code>: 名字必须是<code>solr/home</code>, 不能更改</li><li><code>env-entry-value</code>: 里面的值就是Solr Home路径</li></ul></li><li>7、其他tomcat, 通过<code>tomcat地址:端口/solr</code>访问</li></ul><h5 id="Solr-5-x-x部署Tomcat"><a href="#Solr-5-x-x部署Tomcat" class="headerlink" title=" Solr-5.x.x部署Tomcat"></a><font color="orange"> Solr-5.x.x部署Tomcat</font></h5><font color="red">Solr-5.x.x最好使用Tomcat8</font><ul><li>1、解压Solr-5.x.x.tar.gz</li><li>2、将solr解压目录<code>Solr-5.x.x/server/solr-webapp/webapp</code>拷贝到tomcat安装目录<code>/webapps</code>中, 并改名solr</li><li>3、将solr解压目录<code>Solr-5.x.x/server/lib/ext</code>中jar包拷贝到tomcat安装目录<code>/webapps/solr/WEB-INF/lib</code>中</li><li>4、将solr解压目录<code>Solr-5.x.x/server/resources/log4j.properties</code>拷贝到Tomcat安装目录<code>/webapps/solr/WEB-INF/classes</code>中</li><li>5、配置Solr Home<ul><li>5.1、新建目录如:<code>/usr/local/solrhome</code>作为solr home目录, 拷贝solr解压目录<code>/solr-5.x.x/server/solr/solr.xml</code>拷贝到solr home目录中, 拷贝solr解压目录<code>/solr-5.x.x/server/solr/configsets/basic_configs</code>拷贝到solr home目录中并重命名为core, 它是一个实例</li><li>5.2、solrhome目录下面可能会有多个solr实例, 每个solr实例文件夹下面的<code>conf/solrconfig.xml</code>, 可以配置相关的solr配置.</li><li>5.3、如果solr管理页面<code>logging</code>报错: <font color="red"><code>Can&#39;t find: admin-xxx.html</code></font><ul><li>解决方法: 将<code>/solr-5.x.x/example/example-DIH/solr/solr/conf</code>目录下的<code>admin-extra.xml、admin-extra.menu-bottom.html和admin-extra.menu-top.html</code>拷贝到solr home目录下的<code>solr实例/conf</code>目录即可</li></ul></li></ul></li><li><p>6、修改tomcat安装目录下<code>/webapps/solr/WEB-INF/web.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">env-entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">env-entry-name</span>&gt;</span>solr/home<span class="tag">&lt;/<span class="name">env-entry-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">env-entry-value</span>&gt;</span>/usr/local/solrhome<span class="tag">&lt;/<span class="name">env-entry-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">env-entry-type</span>&gt;</span>java.lang.String<span class="tag">&lt;/<span class="name">env-entry-type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">env-entry</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>env-entry-name</code>: 名字必须是<code>solr/home</code>, 不能更改</li><li><code>env-entry-value</code>: 里面的值就是Solr Home路径</li></ul></li><li>7、其他tomcat, 通过<code>tomcat地址:端口/solr/admin.html</code>访问</li><li>8、如果打开solr管理页面报错solr5.5部署报错:<code>java.lang.NoSuchMethodError:javax.servlet.ServletInputStream.isFinished()Z</code>, 请使用Tomcat8</li><li>9、多个solr实例请复制solr home目录中的solr文件夹并重命名为其他名称,并注意修改<code>core.properties</code>中的name字段为当前solr实例名称.</li></ul><h3 id="Solr后台管理页面"><a href="#Solr后台管理页面" class="headerlink" title=" Solr后台管理页面 "></a><font color="orange"> Solr后台管理页面 </font></h3><h4 id="一级菜单"><a href="#一级菜单" class="headerlink" title=" 一级菜单 "></a><font color="orange"> 一级菜单 </font></h4><center><br><img src="http://47.96.147.179/images/java/solr-admin.png" alt="solr" style="width: 100%; text-align: center; display: block;"><br></center><ul><li><code>Dashboard</code>: 仪表盘，显示了该Solr实例开始启动运行的时间、版本、系统资源、jvm等信息。</li><li><code>Logging</code>: Solr运行日志信息</li><li><code>Cloud</code>: Cloud即SolrCloud，即Solr云（集群），当使用Solr Cloud模式运行时会显示此菜单</li><li><code>Core Admin</code>: Solr Core的管理界面。Solr Core 是Solr的一个独立运行实例单位，它可以对外提供索引和搜索服务，一个Solr工程可以运行多个SolrCore（Solr实例），一个Core对应一个索引目录。</li><li><code>java properties</code>: Solr在JVM 运行环境中的属性信息，包括类路径、文件编码、jvm内存设置等信息。</li><li><code>Tread Dump</code>: 显示Solr Server中当前活跃线程信息，同时也可以跟踪线程运行栈信息。</li><li><code>Core selector</code>: 可以选择Solr实例</li><li><code>Collection Selector</code>: Solr云（集群)版才会显示</li></ul><h4 id="二级菜单"><a href="#二级菜单" class="headerlink" title=" 二级菜单 "></a><font color="orange"> 二级菜单 </font></h4><p>通过Core Selector选择一个Solr实例后, 会进入一个二级菜单.</p><center><br><img src="http://47.96.147.179/images/java/solr-two.png" alt="solr" style="width: 100%; text-align: center; display: block;"><br></center><ul><li><code>Overview</code>:显示一些统计信息和元数据。</li><li><code>Analysis</code>:帮你设计你的Analyzer，Tokenizer和Filter。</li><li><code>Dataimport</code>: 展示当前的DataimportHandler的状态，默认是没有。</li><li><code>Documents</code>: 提供了一个让你对该solr实例中的数据作增删改操作的表单窗口。</li><li><code>Files</code>: 不是指存在solr实例中的业务数据，而是指该solr实例的配置文件，比如solrconfig.xml。</li><li><code>Query</code>: 一个简单的结构化查询工具。具体见(Solr页面查询各个参数解释)</li><li><code>Ping</code>: 按一下可以看这个solr实例还是不是活着的以及响应时间。</li><li><code>Plugins</code>: Solr自带的一些插件以及我们安装的插件的信息以及统计。</li><li><code>Replication</code>:显示你当前solr实例的副本，并提供disable/enable功能。</li><li><code>Schema</code>: 展示该Core的shema数据，如果是用ManagedSchema模式，还可以通过该页面修改，增加，删除schema的字段。(对比Solr4，是一个比较实用的提升。)</li><li><code>Segments info</code>:展示底层Lucence的分段信息。</li></ul><h3 id="Solr的使用"><a href="#Solr的使用" class="headerlink" title=" Solr的使用 "></a><font color="orange"> Solr的使用 </font></h3><h4 id="自定义FieldType和Field"><a href="#自定义FieldType和Field" class="headerlink" title=" 自定义FieldType和Field "></a><font color="orange"> 自定义FieldType和Field </font></h4><p><code>schema.xml</code>文件，在Solr home目录下面的Solr实例/conf目录下，它是Solr数据表配置文件，它定义了加入索引的数据的数据类型的。主要包括FieldTypes、Fields和其他的一些缺省设置。</p><ul><li>solr-4.x.x, 拷贝的时候会有<code>schema.xml</code></li><li>solr-5.x.x, 拷贝时里面会有一个<code>managed-schema.xml</code>文件, 需要改名为<code>schema.xml</code><h5 id="自定义FieldType"><a href="#自定义FieldType" class="headerlink" title=" 自定义FieldType "></a><font color="orange"> 自定义FieldType </font></h5></li><li><p><code>FieldType</code>域类型定义</p><ul><li><p><code>text_general</code>是Solr默认提供的FieldType</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;fieldType name=&quot;text_general&quot; class=&quot;solr.TextField&quot; positionIncrementGap=&quot;100&quot;&gt;</span><br><span class="line">    &lt;analyzer type=&quot;index&quot;&gt;</span><br><span class="line">        &lt;tokenizer class=&quot;solr.StandardTokenizerFactory&quot;/&gt;</span><br><span class="line">        &lt;filter class=&quot;solr.StopFilterFactory&quot; ignoreCase=&quot;true&quot; words=&quot;stopwords.txt&quot; /&gt;</span><br><span class="line">        &lt;!-- in this example, we will only use synonyms at query time</span><br><span class="line">        &lt;filter class=&quot;solr.SynonymFilterFactory&quot; synonyms=&quot;index_synonyms.txt&quot; ignoreCase=&quot;true&quot; expand=&quot;false&quot;/&gt;</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;filter class=&quot;solr.LowerCaseFilterFactory&quot;/&gt;</span><br><span class="line">    &lt;/analyzer&gt;</span><br><span class="line">    &lt;analyzer type=&quot;query&quot;&gt;</span><br><span class="line">        &lt;tokenizer class=&quot;solr.StandardTokenizerFactory&quot;/&gt;</span><br><span class="line">        &lt;filter class=&quot;solr.StopFilterFactory&quot; ignoreCase=&quot;true&quot; words=&quot;stopwords.txt&quot; /&gt;</span><br><span class="line">        &lt;filter class=&quot;solr.SynonymFilterFactory&quot; synonyms=&quot;synonyms.txt&quot; ignoreCase=&quot;true&quot; expand=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;filter class=&quot;solr.LowerCaseFilterFactory&quot;/&gt;</span><br><span class="line">    &lt;/analyzer&gt;</span><br><span class="line">&lt;/fieldType&gt;</span><br></pre></td></tr></table></figure></li><li><p>name：是这个FieldType的名称</p></li><li>class：是Solr提供的包solr.TextField，solr.TextField 允许用户通过分析器来定制索引和查询，分析器包括一个分词器（tokenizer）和多个过滤器（filter）</li><li>positionIncrementGap：可选属性，定义在同一个文档中此类型数据的空白间隔，避免短语匹配错误，此值相当于Lucene的短语查询设置slop值，根据经验设置为100。</li><li>在FieldType定义的时候最重要的就是定义这个类型的数据在建立索引和进行查询的时候要使用的分析器analyzer,包括分词和过滤<ul><li>索引分析器中：使用solr.StandardTokenizerFactory标准分词器，solr.StopFilterFactory停用词过滤器,solr.LowerCaseFilterFactory小写过滤器。</li><li>搜索分析器中：使用solr.StandardTokenizerFactory标准分词器，solr.StopFilterFactory停用词过滤器，这里还用到了solr.SynonymFilterFactory同义词过滤器。</li></ul></li></ul></li></ul><h5 id="自定义Field"><a href="#自定义Field" class="headerlink" title=" 自定义Field "></a><font color="orange"> 自定义Field </font></h5><p>在fields结点内定义具体的Field，filed定义包括name,type（为之前定义过的各种FieldType）,indexed（是否被索引）,stored（是否被储存），multiValued（是否存储多个值）等属性。<br>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;field name=&quot;name&quot; type=&quot;text_general&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</span><br><span class="line">&lt;field name=&quot;features&quot; type=&quot;text_general&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>multiValued：该Field如果要存储多个值时设置为true，solr允许一个Field存储多个值.</p><h5 id="uniqueKey"><a href="#uniqueKey" class="headerlink" title=" uniqueKey"></a><font color="orange"> uniqueKey</font></h5><p>Solr中默认定义唯一主键key为id域，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uniqueKey&gt;id&lt;/uniqueKey&gt;</span><br></pre></td></tr></table></figure></p><p>Solr在删除、更新索引时使用id域进行判断，也可以自定义唯一主键。<br>注意在创建索引时必须指定唯一约束。</p><h5 id="copyField复制域"><a href="#copyField复制域" class="headerlink" title=" copyField复制域 "></a><font color="orange"> copyField复制域 </font></h5><p>copyField复制域，可以将多个Field复制到一个Field中，以便进行统一的检索, 下面的例子: 根据关键字只搜索text域的内容就相当于搜索title和content，将title和content复制到text中，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;field name=&quot;title&quot; type=&quot;text-general&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</span><br><span class="line">&lt;field name=&quot;content&quot; type=&quot;text-general&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</span><br><span class="line">&lt;field name=&quot;text&quot; type=&quot;text-general&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;copyField source=&quot;title&quot; dest=&quot;text&quot;/&gt;</span><br><span class="line">&lt;copyField source=&quot;content&quot; dest=&quot;text&quot;/&gt;</span><br></pre></td></tr></table></figure><h5 id="dynamicField（动态字段）"><a href="#dynamicField（动态字段）" class="headerlink" title=" dynamicField（动态字段） "></a><font color="orange"> dynamicField（动态字段） </font></h5><p>动态字段就是不用指定具体的名称，只要定义字段名称的规则，例如定义一个 dynamicField，name 为*_i，定义它的type为text，那么在使用这个字段的时候，任何以_i结尾的字段都被认为是符合这个定义的，例如：name_i，gender_i，school_i等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dynamicField name=&quot;*_i&quot;  type=&quot;int&quot;    indexed=&quot;true&quot;  stored=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure><h4 id="配置中文解析器"><a href="#配置中文解析器" class="headerlink" title=" 配置中文解析器 "></a><font color="orange"> 配置中文解析器 </font></h4><p>这里我们使用<font color="red">IKAnalyzer</font>分词器.</p><ul><li>下载地址<ul><li><a href="https://code.google.com/p/ik-analyzer/" target="_blank" rel="noopener">官网下载地址</a>, 由于是在<code>google</code>上, 可能需要翻墙下载</li><li>这里提供一个<a href="https://pan.baidu.com/s/1QWK96R4NuKGJZycwf3wcRg" target="_blank" rel="noopener">百度云下载地址</a>, 提取密码<code>44bu</code></li><li><a href="https://gitee.com/wltea/IK-Analyzer-2012FF" target="_blank" rel="noopener">码云地址</a></li></ul></li><li><p>安装到solr</p><ul><li>1、将<code>IKAnalyzer2012FF_u1.jar</code>添加到Tomcat安装目录<code>/webapps/solr/WEB-INF/lib</code>中.</li><li>2、复制IKAnalyzer的配置文件和自定义词典和停用词词典到Tomcat安装目录<code>/webapps/solr/WEB-INF/classes</code>中.</li><li><p>3、在Solr Home的目录中的Solr实例的<code>conf/schema.xml</code>中添加自定义<code>fieldtype</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- IK中文分词器 --&gt;</span><br><span class="line">&lt;fieldType name=&quot;text_ik&quot; class=&quot;solr.TextField&quot;&gt;</span><br><span class="line">    &lt;!--索引时候的分词器--&gt;</span><br><span class="line">    &lt;analyzer type=&quot;index&quot; isMaxWordLength=&quot;false&quot; class=&quot;org.wltea.analyzer.lucene.IKAnalyzer&quot;/&gt;</span><br><span class="line">    &lt;!--查询时候的分词器--&gt;</span><br><span class="line">    &lt;analyzer type=&quot;query&quot; isMaxWordLength=&quot;true&quot; class=&quot;org.wltea.analyzer.lucene.IKAnalyzer&quot;/&gt;</span><br><span class="line">&lt;/fieldType&gt;</span><br></pre></td></tr></table></figure></li><li><p>4、在Solr Home的目录中的Solr实例的<code>conf/schema.xml</code>中添加自定义field, 并指定fieldtype是更改定义的fieldtype</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;field name=&quot;content&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot; multiValued=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure></li><li><p>5、重启Tomcat即可</p></li></ul></li></ul><h4 id="维护索引"><a href="#维护索引" class="headerlink" title=" 维护索引 "></a><font color="orange"> 维护索引 </font></h4><h5 id="单个文档"><a href="#单个文档" class="headerlink" title=" 单个文档 "></a><font color="orange"> 单个文档 </font></h5><p>这里的field名称必须是已经在<code>schema.xml</code>中定义的field名称.<code>/update</code>表示更新索引，solr默认根据id（唯一约束）域来更新Document的内容，如果根据id值搜索不到id域则会执行添加操作，如果找到则更新。</p><center><br><img src="http://47.96.147.179/images/java/solr_document.png" alt="solr" style="width: 100%; text-align: center; display: block;"><br></center><h5 id="批量导入数据"><a href="#批量导入数据" class="headerlink" title=" 批量导入数据 "></a><font color="orange"> 批量导入数据 </font></h5><p>使用dataimport插件批量导入数据</p><ul><li>1、dataimport插件依赖的jar包添加到Solr Home目录中的<code>solr实例/lib</code>中<ul><li><code>solr-dataimporthandler-5.5.5.jar</code></li><li><code>solr-dataimporthandler-extras-5.5.5.jar</code></li><li>以及数据库连接驱动, 如mysql的java驱动</li></ul></li><li><p>2、在Solr Home目录中的<code>solr实例/conf</code>中<code>solrconfig.xml</code>, 新增一个requestHandler</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;requestHandler name=&quot;/dataimport&quot; </span><br><span class="line">class=&quot;org.apache.solr.handler.dataimport.DataImportHandler&quot;&gt;</span><br><span class="line">    &lt;lst name=&quot;defaults&quot;&gt;</span><br><span class="line">        &lt;str name=&quot;config&quot;&gt;data-config.xml&lt;/str&gt;</span><br><span class="line">    &lt;/lst&gt;</span><br><span class="line">&lt;/requestHandler&gt;</span><br></pre></td></tr></table></figure></li><li><p>3、创建一个data-config.xml，保存到在Solr Home目录中的<code>solr实例/conf</code>目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;  </span><br><span class="line">&lt;dataConfig&gt;   </span><br><span class="line">    &lt;dataSource type=&quot;JdbcDataSource&quot;   </span><br><span class="line">  driver=&quot;com.mysql.jdbc.Driver&quot;   </span><br><span class="line">  url=&quot;jdbc:mysql://localhost:3306/lucene&quot;   </span><br><span class="line">  user=&quot;root&quot;   </span><br><span class="line">  password=&quot;root&quot;/&gt;   </span><br><span class="line">    &lt;document&gt;   </span><br><span class="line">        &lt;entity name=&quot;product&quot; query=&quot;SELECT pid,name,catalog_name,price,description,picture FROM products &quot;&gt;</span><br><span class="line">            &lt;field column=&quot;pid&quot; name=&quot;id&quot;/&gt; </span><br><span class="line">            &lt;field column=&quot;name&quot; name=&quot;product_name&quot;/&gt; </span><br><span class="line">            &lt;field column=&quot;catalog_name&quot; name=&quot;product_catalog_name&quot;/&gt; </span><br><span class="line">            &lt;field column=&quot;price&quot; name=&quot;product_price&quot;/&gt; </span><br><span class="line">            &lt;field column=&quot;description&quot; name=&quot;product_description&quot;/&gt; </span><br><span class="line">            &lt;field column=&quot;picture&quot; name=&quot;product_picture&quot;/&gt; </span><br><span class="line">        &lt;/entity&gt;   </span><br><span class="line">    &lt;/document&gt;   </span><br><span class="line">&lt;/dataConfig&gt;</span><br></pre></td></tr></table></figure></li><li><p>4、重启Tomcat</p></li><li>5、进入Solr管理页面, 选中对应的实例后, 点击<code>DataImport</code>, 点击<code>Execute</code>即可<ul><li><font color="red">导入数据前会先清空索引库，然后再导入</font></li></ul></li></ul><h5 id="删除文档"><a href="#删除文档" class="headerlink" title=" 删除文档 "></a><font color="orange"> 删除文档 </font></h5><p>在<code>Documents</code>菜单下, 选择<code>Document Type</code>为<code>XML</code>, <code>Document(s)</code>删除索引格式如下：</p><ul><li><p>删除制定ID的索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete&gt;</span><br><span class="line">    &lt;id&gt;8&lt;/id&gt;</span><br><span class="line">&lt;/delete&gt;</span><br><span class="line">&lt;commit/&gt;</span><br></pre></td></tr></table></figure></li><li><p>删除查询到的索引数据 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete&gt;</span><br><span class="line">    &lt;query&gt;product_catalog_name:幽默杂货&lt;/query&gt;</span><br><span class="line">&lt;/delete&gt;</span><br><span class="line">&lt;commit/&gt;</span><br></pre></td></tr></table></figure></li><li><p>删除所有索引数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete&gt;</span><br><span class="line">    &lt;query&gt;*:*&lt;/query&gt;</span><br><span class="line">&lt;/delete&gt;</span><br><span class="line">&lt;commit/&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="查询索引-1"><a href="#查询索引-1" class="headerlink" title=" 查询索引"></a><font color="orange"> 查询索引</font></h4><p>通过/select搜索索引，Solr制定一些参数完成不同需求的搜索:</p><h5 id="q-查询字符串"><a href="#q-查询字符串" class="headerlink" title=" q: 查询字符串 "></a><font color="orange"> q: 查询字符串 </font></h5><p>查询字符串: 格式<code>field name:查询的关键字</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#查询单个或者组合查询</span><br><span class="line">field name:需要查询的内容 AND</span><br><span class="line">field name:需要查询的内容 OR</span><br><span class="line">field name:需要查询的内容</span><br><span class="line">#查询所有</span><br><span class="line">*:*</span><br></pre></td></tr></table></figure></p><h5 id="fq-filter-query-过虑查询"><a href="#fq-filter-query-过虑查询" class="headerlink" title=" fq: (filter query 过虑查询) "></a><font color="orange"> fq: (filter query 过虑查询) </font></h5><p>在q查询符合结果中同时是fq查询符合的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#例如</span><br><span class="line">field_name:[1 TO 20]</span><br><span class="line">#也可以使用“*”表示无限，例如：</span><br><span class="line">20以上：product_price:[20 TO *]</span><br><span class="line">20以下：product_price:[* TO 20]</span><br></pre></td></tr></table></figure><h5 id="sort-排序"><a href="#sort-排序" class="headerlink" title=" sort: 排序 "></a><font color="orange"> sort: 排序 </font></h5><p>格式: <code>field name desc|asc</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#如, 商品价格降序</span><br><span class="line">product_price desc</span><br></pre></td></tr></table></figure></p><h5 id="start和rows-分页和每次返回数量"><a href="#start和rows-分页和每次返回数量" class="headerlink" title=" start和rows: 分页和每次返回数量 "></a><font color="orange"> start和rows: 分页和每次返回数量 </font></h5><p>start: 从0开始</p><h5 id="fl-指定返回那些字段内容，用逗号或空格分隔多个"><a href="#fl-指定返回那些字段内容，用逗号或空格分隔多个" class="headerlink" title=" fl: 指定返回那些字段内容，用逗号或空格分隔多个 "></a><font color="orange"> fl: 指定返回那些字段内容，用逗号或空格分隔多个 </font></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#如</span><br><span class="line">product_price, product_name</span><br></pre></td></tr></table></figure><h5 id="df-指定一个搜索Field"><a href="#df-指定一个搜索Field" class="headerlink" title=" df: 指定一个搜索Field "></a><font color="orange"> df: 指定一个搜索Field </font></h5><p>也可以在Solr Home的Solr实例目录中<code>conf/solrconfig.xml</code>文件中指定默认搜索Field，指定后就可以直接在“q”查询条件中输入关键字。</p><h5 id="wt-writer-type-指定输出格式"><a href="#wt-writer-type-指定输出格式" class="headerlink" title=" wt: (writer type)指定输出格式 "></a><font color="orange"> wt: (writer type)指定输出格式 </font></h5><p>可以有 xml, json, php, phps等</p><h2 id="SolrCloud"><a href="#SolrCloud" class="headerlink" title=" SolrCloud "></a><font color="orange"> SolrCloud </font></h2><p>SolrCloud(solr 云)是Solr提供的分布式搜索方案，当你需要大规模，容错，分布式索引和检索能力时使用 SolrCloud。当一个系统的索引数据量少的时候是不需要使用SolrCloud的，当索引量很大，搜索请求并发很高，这时需要使用SolrCloud来满足这些需求。</p><p>SolrCloud是基于Solr和Zookeeper的分布式搜索方案，它的主要思想是使用Zookeeper作为集群的配置信息中心。<br>它有几个特色功能：</p><ul><li>1、集中式的配置信息</li><li>2、自动容错</li><li>3、近实时搜索</li><li>4、查询时自动负载均衡    </li></ul><h3 id="Solr集群的系统架构"><a href="#Solr集群的系统架构" class="headerlink" title=" Solr集群的系统架构 "></a><font color="orange"> Solr集群的系统架构 </font></h3><center><br><img src="http://47.96.147.179/images/java/solrCloud.png" alt="solrCloud" style="width: 60%; text-align: center; display: block;"><br></center><h4 id="物理结构"><a href="#物理结构" class="headerlink" title=" 物理结构 "></a><font color="orange"> 物理结构 </font></h4><p>三个Solr（ 每个Solr包括两个Solr实例），组成一个SolrCloud。</p><h4 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title=" 逻辑结构 "></a><font color="orange"> 逻辑结构 </font></h4><p>索引集合包括两个Shard（shard1和shard2），shard1和shard2分别由三个Core组成，其中一个Leader两个Replication，Leader是由zookeeper选举产生，zookeeper控制每个shard上三个Core的索引数据一致，解决高可用问题。<br>用户发起索引请求分别从shard1和shard2上获取，解决高并发问题。</p><h5 id="collection"><a href="#collection" class="headerlink" title=" collection "></a><font color="orange"> collection </font></h5><p>Collection在SolrCloud集群中是一个逻辑意义上的完整的索引结构。它常常被划分为一个或多个Shard（分片），它们使用相同的配置信息。</p><h5 id="Core"><a href="#Core" class="headerlink" title=" Core "></a><font color="orange"> Core </font></h5><p>每个Core是Solr中一个独立运行单位，提供 索引和搜索服务。一个shard需要由一个Core或多个Core组成。由于collection由多个shard组成所以collection一般由多个core组成。</p><h5 id="Master或Slave"><a href="#Master或Slave" class="headerlink" title=" Master或Slave "></a><font color="orange"> Master或Slave </font></h5><p>Master是master-slave结构中的主结点（通常说主服务器），Slave是master-slave结构中的从结点（通常说从服务器或备服务器）。同一个Shard下master和slave存储的数据是一致的，这是为了达到高可用目的。</p><h5 id="Shard"><a href="#Shard" class="headerlink" title=" Shard "></a><font color="orange"> Shard </font></h5><p>Collection的逻辑分片。每个Shard被化成一个或者多个replication，通过选举确定哪个是Leader。</p><h3 id="Solr集群搭建"><a href="#Solr集群搭建" class="headerlink" title=" Solr集群搭建 "></a><font color="orange"> Solr集群搭建 </font></h3><h4 id="zookeeper集群"><a href="#zookeeper集群" class="headerlink" title=" zookeeper集群 "></a><font color="orange"> zookeeper集群 </font></h4><ul><li>在Zookeeper的解压目录中创建<code>data</code>文件夹</li><li><p>在<code>data</code>文件夹中创建一个文件<code>myid</code>, 内容就是每个实例的id, 例如: 1、2、3等, 不能重复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt;&gt; myid</span><br></pre></td></tr></table></figure></li><li><p>更改配置文件名称, 把解压目录中<code>conf/zoo_sample.cfg</code>改名为<code>zoo.cfg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure></li><li><p>修改配置文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime=2000</span><br><span class="line"># The number of ticks that the initial</span><br><span class="line"># synchronization phase can take</span><br><span class="line">initLimit=10</span><br><span class="line"># The number of ticks that can pass between</span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit=5</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># do not use /tmp for storage, /tmp here is just</span><br><span class="line"># example sakes.</span><br><span class="line">dataDir=/usr/local/solr-cloud/zookeeper01/data</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort=2181</span><br><span class="line"># the maximum number of client connections.</span><br><span class="line"># increase this if you need to handle more clients</span><br><span class="line">#maxClientCnxns=60</span><br><span class="line">#</span><br><span class="line"># Be sure to read the maintenance section of the</span><br><span class="line"># administrator guide before turning on autopurge.</span><br><span class="line">#</span><br><span class="line"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><br><span class="line">#</span><br><span class="line"># The number of snapshots to retain in dataDir</span><br><span class="line">#autopurge.snapRetainCount=3</span><br><span class="line"># Purge task interval in hours</span><br><span class="line"># Set to &quot;0&quot; to disable auto purge feature</span><br><span class="line">#autopurge.purgeInterval=1</span><br><span class="line">server.1=192.168.1.184:2881:3881</span><br><span class="line">server.2=192.168.1.185:2881:3881</span><br><span class="line">server.3=192.168.1.186:2881:3881</span><br></pre></td></tr></table></figure><ul><li><code>dataDir</code>: 修改为新建的<code>data</code>全路径</li><li><code>clientPort</code>: 客户端连接Zookeeper的端口</li><li>新增<code>server.1=192.168.1.184:2881:3881</code><ul><li><code>server.1</code>中的1是实例id</li><li>IP地址后的第一个端口: Zookeeper内部通讯端口</li><li>IP地址后的第二个端口; zookeeper投票选举端口</li><li>两个端口和<code>clientPort</code>不能重复</li></ul></li></ul></li><li>启动每个Zookeeper实例, zookeeper集群搭建完成<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/solr-cloud/zookeeper01/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/solr-cloud/zookeeper02/bin/../conf/zoo.cfg</span><br><span class="line">Mode: leader</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/solr-cloud/zookeeper03/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure></li></ul><h4 id="solrCloud搭建"><a href="#solrCloud搭建" class="headerlink" title=" solrCloud搭建 "></a><font color="orange"> solrCloud搭建 </font></h4><ul><li>首先在每个solr服务器上安装tomcat, 并部署solr单机版到tomcat, 步骤参考前面</li><li><p>更改每个solr home目录下的<code>solr.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;solrcloud&gt;</span><br><span class="line"></span><br><span class="line">  &lt;str name=&quot;host&quot;&gt;192.168.1.184&lt;/str&gt;</span><br><span class="line">  &lt;int name=&quot;hostPort&quot;&gt;8080&lt;/int&gt;</span><br><span class="line">  &lt;str name=&quot;hostContext&quot;&gt;$&#123;hostContext:solr&#125;&lt;/str&gt;</span><br><span class="line"></span><br><span class="line">  &lt;bool name=&quot;genericCoreNodeNames&quot;&gt;$&#123;genericCoreNodeNames:true&#125;&lt;/bool&gt;</span><br><span class="line"></span><br><span class="line">  &lt;int name=&quot;zkClientTimeout&quot;&gt;$&#123;zkClientTimeout:30000&#125;&lt;/int&gt;</span><br><span class="line">  &lt;int name=&quot;distribUpdateSoTimeout&quot;&gt;$&#123;distribUpdateSoTimeout:600000&#125;&lt;/int&gt;</span><br><span class="line">  &lt;int name=&quot;distribUpdateConnTimeout&quot;&gt;$&#123;distribUpdateConnTimeout:60000&#125;&lt;/int&gt;</span><br><span class="line">  &lt;str name=&quot;zkCredentialsProvider&quot;&gt;$&#123;zkCredentialsProvider:org.apache.solr.common.cloud.DefaultZkCredentialsProvider&#125;&lt;/str&gt;</span><br><span class="line">  &lt;str name=&quot;zkACLProvider&quot;&gt;$&#123;zkACLProvider:org.apache.solr.common.cloud.DefaultZkACLProvider&#125;&lt;/str&gt;</span><br><span class="line"></span><br><span class="line">&lt;/solrcloud&gt;</span><br></pre></td></tr></table></figure><ul><li>修改host为当前部署的tomcat的ip</li><li>修改hostport为当前部署的tomcat的端口号</li></ul></li><li><p>让zookeeper统一管理solr配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkcli.sh -zkhost 192.168.1.184:2181,192.168.1.185:2181,192.168.1.186:2181 -cmd upconfig -confdir /usr/local/solr-cloud/solrhome01/core/conf -confname myconf</span><br></pre></td></tr></table></figure><ul><li>需要把任意一个Solr Home下面的实例的<code>conf</code>目录上传到Zookeeper</li><li>solr-4.x.x版本可以使用<code>solr-4.x.x/example/scripts/cloud-scripts/zkcli.sh</code>工具</li><li>solr-5.x.x版本可以使用<code>solr-5.x.x/server/scripts/cloud-scripts/zkcli.sh</code>工具</li><li><font color="red">需要注意的是: 以后配置field都需要在Zookeeper中配置.</font></li></ul></li><li>上传conf完成之后, 验证是否上传成功<ul><li>连接指定Zookeeper: <code>./zkcli.sh -server ip:port</code></li><li>运行: <code>ls /configs</code></li><li>出现上一步命名的文件夹<code>myconf</code>即可</li></ul></li><li><p>更改每个tomcat目录下的<code>bin/catalina.sh</code>文件, 关联zookeeper和solr, 添加如下内容: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS=&quot;-DzkHost=192.168.1.184:2181,192.168.1.185:2181,192.168.1.185:2181&quot;</span><br></pre></td></tr></table></figure></li><li><p>访问集群</p></li></ul><center><br><img src="http://47.96.147.179/images/java/solr-cloud.png" alt="solr" style="width: 100%; text-align: center; display: block;"><br></center><ul><li><p>创建新的Collection进行分片处理, 地址栏运行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.184:8180/solr/admin/collections?action=CREATE&amp;name=xxxx&amp;numShards=2&amp;replicationFactor=2</span><br></pre></td></tr></table></figure><ul><li><code>name</code>为新建的collection名称</li><li><code>numShards</code>: 是shard数量</li></ul></li><li><p>删除不用的Collection, 地址栏运行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.184:8180/solr/admin/collections?action=DELETE&amp;name=xxxx</span><br></pre></td></tr></table></figure><ul><li><code>name</code>为删除的collection名称</li><li>运行结果如下: </li></ul></li></ul><center><br><img src="http://47.96.147.179/images/java/solr-cloud-result.png" alt="solr" style="width: 100%; text-align: center; display: block;"><br></center><h2 id="SolrJ"><a href="#SolrJ" class="headerlink" title=" SolrJ "></a><font color="orange"> SolrJ </font></h2><h3 id="什么是SolrJ"><a href="#什么是SolrJ" class="headerlink" title=" 什么是SolrJ "></a><font color="orange"> 什么是SolrJ </font></h3><p>SolrJ是访问Solr服务的java客户端，提供索引和搜索的请求方法，SolrJ通常在嵌入在业务系统中，通过SolrJ的API接口操作Solr服务</p><h3 id="依赖的jar包"><a href="#依赖的jar包" class="headerlink" title=" 依赖的jar包"></a><font color="orange"> 依赖的jar包</font></h3><ul><li>solr-4.x.x版本在解压目录<code>solr-4.x.x/example/lib/ext</code>中</li><li>solr-5.x.x版本在解压目录<code>solr-5.x.x/server/lib/ext</code>中<h3 id="单机版和集群版使用区别"><a href="#单机版和集群版使用区别" class="headerlink" title=" 单机版和集群版使用区别"></a><font color="orange"> 单机版和集群版使用区别</font></h3>单机版和集群版使用有一些区别:</li><li>单机版<ul><li>solr4: 使用<code>HttpSolrServer</code>创建<code>SolrServer</code>对象</li><li>solr5: 使用<code>HttpSolrClient</code>创建<code>SolrClient</code>对象</li></ul></li><li>集群版<ul><li>solr4: 使用<code>CloudSolrServer</code>, 需要指定Zookeeper的地址列表端口和默认collection</li><li>solr5: 使用<code>CloudSolrClient</code>, 需要指定Zookeeper的地址列表端口和默认collection</li></ul></li></ul><h3 id="添加文档"><a href="#添加文档" class="headerlink" title=" 添加文档 "></a><font color="orange"> 添加文档 </font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void addDocument() throws Exception &#123;</span><br><span class="line">    //1、单机版: solr4创建一个SolrServer，使用HttpSolrServer创建对象, solr5创建一个SolrClient，使用HttpSolrClient创建对象</span><br><span class="line">    //SolrClient client = new HttpSolrClient(&quot;http://192.168.1.184:8181/solr/iOS&quot;);</span><br><span class="line">    SolrServer CloudSolrServer = new HttpSolrServer(&quot;http://192.168.1.184:8080/solr/iOS&quot;);</span><br><span class="line">    //1、集群版: solr4.x.x版本使用CloudSolrServer ,solr5.x.x版本使用CloudSolrClient, 需要指定Zookeeper地址列表和默认collection</span><br><span class="line">    //CloudSolrClient cloudSolrClient = new CloudSolrClient(&quot;192.168.1.184:2182,192.168.1.184:2183,192.168.1.184:2184&quot;);</span><br><span class="line">    //设置默认collection</span><br><span class="line">    //cloudSolrClient.setDefaultCollection(&quot;iOS&quot;);</span><br><span class="line">    //2 创建一个文档对象SolrInputDocument对象。</span><br><span class="line">    SolrInputDocument document = new SolrInputDocument();</span><br><span class="line">    //3 向文档中添加域。必须有id域，域的名称必须在schema.xml中定义。</span><br><span class="line">    document.addField(&quot;id&quot;, &quot;test001&quot;);</span><br><span class="line">    document.addField(&quot;item_title&quot;, &quot;测试商品&quot;);</span><br><span class="line">    document.addField(&quot;item_price&quot;, &quot;199&quot;);</span><br><span class="line">    //4 把文档添加到索引库中。</span><br><span class="line">    solrServer.add(document);</span><br><span class="line">    //5 提交。</span><br><span class="line">    solrServer.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1、solr4创建一个SolrServer，使用HttpSolrServer创建对象, solr5创建一个SolrCilent，使用HttpSolrClient创建对象。</li><li>2、创建一个文档对象SolrInputDocument对象。</li><li>3、向文档中添加域。必须有id域，<font color="red">域的名称必须在<code>schema.xml</code>中定义</font>。</li><li>4、把文档添加到索引库中。</li><li>5、提交。</li></ul><h3 id="删除文档-1"><a href="#删除文档-1" class="headerlink" title=" 删除文档 "></a><font color="orange"> 删除文档 </font></h3><h4 id="根据id删除"><a href="#根据id删除" class="headerlink" title=" 根据id删除 "></a><font color="orange"> 根据id删除 </font></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void deleteDocumentById() throws Exception &#123;</span><br><span class="line">    //1 Solr4创建一个SolrServer对象, Solr5创建一个SolrClient对象。</span><br><span class="line">    //SolrClient solrServer = new HttpSolrClient(&quot;http://192.168.1.184:8080/solr/iOS&quot;);</span><br><span class="line">    SolrServer solrServer = new HttpSolrServer(&quot;http://192.168.1.184:8080/solr/iOS&quot;);</span><br><span class="line">    //2 调用SolrServer对象的根据id删除的方法。</span><br><span class="line">    solrServer.deleteById(&quot;1&quot;);</span><br><span class="line">    //3 提交。</span><br><span class="line">    solrServer.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1、创建一个SolrServer对象。</li><li>2、调用SolrServer对象的根据id删除的方法。</li><li>3、提交。<h4 id="根据查询删除"><a href="#根据查询删除" class="headerlink" title=" 根据查询删除 "></a><font color="orange"> 根据查询删除 </font></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void deleteDocumentByQuery() throws Exception &#123;</span><br><span class="line">    SolrServer solrServer = new HttpSolrServer(&quot;http://192.168.1.184:8080/solr/iOS&quot;);</span><br><span class="line">    //SolrClient solrServer = new HttpSolrClient(&quot;http://192.168.1.184:8080/solr/iOS&quot;);</span><br><span class="line">    solrServer.deleteByQuery(&quot;title:change.me&quot;);</span><br><span class="line">    solrServer.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="查询索引库以及高亮显示"><a href="#查询索引库以及高亮显示" class="headerlink" title=" 查询索引库以及高亮显示 "></a><font color="orange"> 查询索引库以及高亮显示 </font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void queryDocument() throws Exception &#123;</span><br><span class="line">    //1 Solr4创建一个SolrServer对象, Solr5创建一个SolrClient对象</span><br><span class="line">    //SolrClient solrServer = new HttpSolrClient(&quot;http://192.168.1.184:8080/solr/iOS&quot;);</span><br><span class="line">    SolrServer solrServer = new HttpSolrServer(&quot;http://192.168.1.184:8080/solr/iOS&quot;);</span><br><span class="line">    //2 创建一个SolrQuery对象。</span><br><span class="line">    SolrQuery query = new SolrQuery();</span><br><span class="line">    //3 向SolrQuery中添加查询条件、过滤条件。。。</span><br><span class="line">    query.setQuery(&quot;*:*&quot;);</span><br><span class="line">    /*</span><br><span class="line">    //开启高亮显示</span><br><span class="line">query.setHighlight(true);</span><br><span class="line">//高亮显示的域</span><br><span class="line">query.addHighlightField(&quot;item_title&quot;);</span><br><span class="line">query.setHighlightSimplePre(&quot;&lt;em&gt;&quot;);</span><br><span class="line">query.setHighlightSimplePost(&quot;&lt;/em&gt;&quot;);</span><br><span class="line">    */</span><br><span class="line">    //4 执行查询。得到一个Response对象。</span><br><span class="line">    QueryResponse response = solrServer.query(query);</span><br><span class="line">    //5 取查询结果。</span><br><span class="line">    SolrDocumentList solrDocumentList = response.getResults();</span><br><span class="line">    System.out.println(&quot;查询结果的总记录数：&quot; + solrDocumentList.getNumFound());</span><br><span class="line">    //6 遍历结果并打印。</span><br><span class="line">    for (SolrDocument solrDocument : solrDocumentList) &#123;</span><br><span class="line">        System.out.println(solrDocument.get(&quot;id&quot;));</span><br><span class="line">        /*</span><br><span class="line">        //取高亮显示</span><br><span class="line">        Map&lt;String, Map&lt;String, List&lt;String&gt;&gt;&gt; highlighting = response.getHighlighting();</span><br><span class="line">        List&lt;String&gt; list = highlighting.get(solrDocument.get(&quot;id&quot;)).get(&quot;item_title&quot;);</span><br><span class="line">        String itemTitle = null;</span><br><span class="line">        if (list != null &amp;&amp; list.size() &gt; 0) &#123;</span><br><span class="line">            itemTitle = list.get(0);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            itemTitle = (String) solrDocument.get(&quot;item_title&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(itemTitle);</span><br><span class="line">        */</span><br><span class="line">        System.out.println(solrDocument.get(&quot;item_title&quot;));</span><br><span class="line">        System.out.println(solrDocument.get(&quot;item_price&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1、创建一个SolrServer对象</li><li>2、创建一个SolrQuery对象。</li><li>3、向SolrQuery中添加查询条件、过滤条件。。。</li><li>4、执行查询。得到一个Response对象。</li><li>5、取查询结果。</li><li>6、遍历结果并打印。</li></ul><h3 id="SolrJ和Spring整合"><a href="#SolrJ和Spring整合" class="headerlink" title=" SolrJ和Spring整合 "></a><font color="orange"> SolrJ和Spring整合 </font></h3><p>新建一个<code>applicationContext-solr.xml</code>, 内容如下: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--单机版和集群版只能存在一个--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单机版Solr的连接--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id="httpSolrClient" class="org.apache.solr.client.solrj.impl.HttpSolrClient"&gt;</span></span><br><span class="line"><span class="comment">        &lt;constructor-arg name="baseURL" value="http://192.168.1.184:8181/solr/iOS"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--集群版, zkHost能添加空格--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cloudSolrClient"</span> <span class="attr">class</span>=<span class="string">"org.apache.solr.client.solrj.impl.CloudSolrClient"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"zkHost"</span> <span class="attr">value</span>=<span class="string">"192.168.1.184:2182, 192.168.1.184:2183, 192.168.1.184:2184"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultCollection"</span> <span class="attr">value</span>=<span class="string">"iOS"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用时自动注入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private SolrClient solrClient;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Lucene和Solr都是基于Java的高效全文检索库.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://47.96.147.179/images/java/solr_header.jpg&quot; alt=&quot;hello&quot; style=&quot;width: 50%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="全文搜索技术" scheme="http://yoursite.com/tags/%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Lucene" scheme="http://yoursite.com/tags/Lucene/"/>
    
      <category term="Solr" scheme="http://yoursite.com/tags/Solr/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo的使用</title>
    <link href="http://yoursite.com/2017/05/06/Java%20Web/Dubbo%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/05/06/Java Web/Dubbo的使用/</id>
    <published>2017-05-06T06:19:31.000Z</published>
    <updated>2019-04-29T08:39:51.633Z</updated>
    
    <content type="html"><![CDATA[<p>Dubbo是阿里巴巴公司开源的一个高性能优秀的服务框架，使得应用可通过高性能的RPC实现服务的输出和输入功能，可以和Spring框架无缝集成。</p><p>Dubbo目前只适合Java使用,Dubbo经历过停止更新之后, 目前又重新维护了!!!</p><a id="more"></a><h2 id="什么是Dubbo"><a href="#什么是Dubbo" class="headerlink" title=" 什么是Dubbo "></a><font color="orange"> 什么是Dubbo </font></h2><p>随着互联网的发展, 网站应用的规模不断扩大, 常规的垂直应用框架已经无法应对, 分布式服务框架以及流动计算框架势在必行.</p><ul><li>单一应用架构<ul><li>当网站流量很小时, 只需一个应用, 将所有功能都部署在一起, 以减少部署节点和成本.</li><li>此时, 用于简化增删改查的工作量的数据访问框架(ORM)是关键.</li><li>Cluster数一般: 1 ~ 10个</li></ul></li><li>垂直应用架构<ul><li>当访问量逐渐增大, 单一应用增加机器带来的加速度越来越小, 将应用拆成互不相干的几个应用, 以提升效率.</li><li>此时, 用于加速前端网页开发的Web框架(MVC)是关键.</li><li>Cluster数一般: 10 ~ 1000个</li></ul></li><li>分布式服务架构<ul><li>当垂直应用越来越多, 应用之间交互不可避免, 将核心业务取出来, 作为独立的服务, 逐渐形成稳定的服务中心, 使前端应用能快速的响应多变的市场需求.</li><li>此时, 用于提高业务复用及整合的分布式服务框架(RPC)是关键.</li><li>Cluster数一般: 1000 ~ 10000个</li></ul></li><li>流动计算架构<ul><li>当服务越来越多, 容量的评估, 小服务资源的浪费等问题逐渐呈现, 此时需增加一个调度中心基于访问压力实时管理集群容量, 提高集群利用率.</li><li>此时, 用于提高机器利用率的资源调度和治理中心(SOA)是关键.</li><li>Cluster数一般: 10000+个</li></ul></li></ul><p>Dubbo就是资源调度和治理中心的管理工具.</p><h2 id="Dubbo的架构"><a href="#Dubbo的架构" class="headerlink" title=" Dubbo的架构 "></a><font color="orange"> Dubbo的架构 </font></h2><center><br><img src="http://47.96.147.179/images/java/dubbo1.png" alt="dubbo" style="width: 70%; text-align: center; display: block;"><br></center><ul><li>节点角色说明<ul><li>Provider: 暴露服务的服务提供方.</li><li>Consumer: 调用远程服务的服务消费方.</li><li>Registry: 服务注册与发现的注册中心.</li><li>Monitor: 统计服务的调用次调和调用时间的监控中心.</li><li>Container: 服务运行容器.</li></ul></li><li>调用关系说明<ul><li>0、服务容器负责启动, 加载, 运行服务提供者</li><li>1、服务提供者在启动时, 向注册中心注册自己提供的服务.</li><li>2、服务消费者在启动时, 向注册中心订阅自己所需的服务.</li><li>3、注册中心返回服务提供者地址列表给消费者, 如果有变更, 注册中心将基于长链接推送变更数据给消费者.</li><li>4、服务消费者, 从提供者地址列表汇中, 基于软负载均衡算法, 选一台提供者进行调用, 如果调用失败, 再选另一台调用.</li><li>5、服务消费者和提供者, 在内存中累计调用次数和调用时间, 定时每分钟发送一次统计数据到监控中心.</li></ul></li></ul><h2 id="注册中心"><a href="#注册中心" class="headerlink" title=" 注册中心 "></a><font color="orange"> 注册中心 </font></h2><p>注册中心负责服务地址的注册和查找, 相当于目录服务, 服务提供者和消费者只在启动时与注册中心交互, 注册中心不转发请求, 压力较小. 建议使用Zookeeper注册中心.</p><p>Zookeeper是Apache Hadoop的子项目, 是一个树形的目录服务, 支持变更服务, 支持变更推送, 适合作为Dubbo服务的注册中心, 工业强度较高, 可用于生成环境.</p><h3 id="安装Zookeeper"><a href="#安装Zookeeper" class="headerlink" title=" 安装Zookeeper "></a><font color="orange"> 安装Zookeeper </font></h3><ul><li>1、创建安装目录<ul><li><code>mkdir -p /usr/local/services/zookeeper</code></li><li><code>cd /usr/local/services/zookeeper</code></li></ul></li><li>2、使用<a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">清华大学开源软件镜像站</a>下载Zookeeper.<ul><li><code>wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.11/zookeeper-3.4.11.tar.gz</code></li></ul></li><li>3、解压缩<ul><li><code>tar -zxvf zookeeper-3.4.11.tar.gz</code></li></ul></li><li>4、修改配置<ul><li><code>cd zookeeper-3.4.11</code></li><li><code>mkdir data</code></li><li><code>cd conf</code></li><li><code>cp zoo_sample.cfg zoo.cfg</code></li><li><code>vi zoo.cfg</code></li><li>修改<code>dataDir</code>为刚刚新建的data文件夹路径</li><li>保存<code>zoo.cfg</code>文件</li></ul></li><li>5、启动Zookeeper服务<ul><li><code>cd ../bin/</code></li><li><code>./zkServer.sh start</code></li></ul></li><li>6、其他相关命令<ul><li>状态: <code>./zkServer.sh status</code></li><li>关闭: <code>./zkServer.sh stop</code></li><li>重启: <code>./zkServer.sh restart</code></li></ul></li><li>7、Linux系统还要注意防火墙端口问题<ul><li>开放2181端口: <code>firewall-cmd --add-port=2181/tcp --zone=public --permanent</code>, –permanent是永久有效参数</li><li>查询开放的端口: <code>firewall-cmd --zone=public --list-ports</code></li><li>刷新防火墙使设置生效: <code>firewall-cmd --reload</code></li></ul></li><li><p>8、设置开机启动</p><ul><li><p>在<code>/etc/init.d</code>目录下新建一个zookeeper文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/init.d/zookeeper</span><br></pre></td></tr></table></figure></li><li><p>在zookeeper文件中写入, 注意里面的JAVA_HOME是必须的,写上你的安装路径, 还有Zookeeper的安装路径也要改成你的安装路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash  </span><br><span class="line">#chkconfig:2345 20 90  </span><br><span class="line">#description:zookeeper  </span><br><span class="line">#processname:zookeeper  </span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_171</span><br><span class="line">case $1 in  </span><br><span class="line">        start) su root /usr/local/zookeeper/bin/zkServer.sh start;;  </span><br><span class="line">        stop) su root /usr/local/zookeeper/bin/zkServer.sh stop;;  </span><br><span class="line">        status) su root /usr/local/zookeeper/bin/zkServer.sh status;;  </span><br><span class="line">        restart) su /usr/local/zookeeper/bin/zkServer.sh restart;;  </span><br><span class="line">        *) echo &quot;require start|stop|status|restart&quot; ;  </span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li><li><p>修改权限: <code>chmod +x /etc/init.d/zookeeper</code></p></li><li>开机启动设置<ul><li>开机启动: <code>chkconfig --add zookeeper</code></li><li>启动zookeeper: <code>service zookeeper start</code> </li><li>停止zookeeper: <code>service zookeeper stop</code> </li><li>重启zookeeper: <code>service zookeeper restart</code> </li><li>zookeeper状态: <code>service zookeeper status</code>  </li></ul></li></ul></li></ul><h2 id="使用Dubbo"><a href="#使用Dubbo" class="headerlink" title=" 使用Dubbo "></a><font color="orange"> 使用Dubbo </font></h2><h3 id="导入相关Dubbo和Zookeeper相关jar包"><a href="#导入相关Dubbo和Zookeeper相关jar包" class="headerlink" title=" 导入相关Dubbo和Zookeeper相关jar包 "></a><font color="orange"> 导入相关Dubbo和Zookeeper相关jar包 </font></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo.version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">dubbo.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zookeeper.version</span>&gt;</span>3.4.7<span class="tag">&lt;/<span class="name">zookeeper.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zkclient.version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">zkclient.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- dubbo相关 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencys</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;zookeeper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;zkclient.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencys</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Service接口和实现类"><a href="#Service接口和实现类" class="headerlink" title=" Service接口和实现类 "></a><font color="orange"> Service接口和实现类 </font></h3><h4 id="Service接口"><a href="#Service接口" class="headerlink" title=" Service接口"></a><font color="orange"> Service接口</font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coppco.pojo.TbItem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">TbItem <span class="title">getItemById</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Service实现类"><a href="#Service实现类" class="headerlink" title=" Service实现类 "></a><font color="orange"> Service实现类 </font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coppco.mapper.TbItemMapper;</span><br><span class="line"><span class="keyword">import</span> com.coppco.pojo.TbItem;</span><br><span class="line"><span class="keyword">import</span> com.coppco.service.ItemService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemServiceImpl</span> <span class="keyword">implements</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TbItemMapper tbItemMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TbItem <span class="title">getItemById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tbItemMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务层发布Dubbo服务"><a href="#服务层发布Dubbo服务" class="headerlink" title=" 服务层发布Dubbo服务 "></a><font color="orange"> 服务层发布Dubbo服务 </font></h3><p>在Service工程中的Spring配置文件<code>applicationContext-service.xml</code>中添加:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注解扫描器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.coppco.service"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--发布dubbo服务--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--提供方信息, 用于计算依赖关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"taotao-manager"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册中心地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"192.168.1.184:2181"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用dubbo协议在20880端口暴露服务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明需要暴露的服务接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.coppco.service.ItemService"</span> <span class="attr">ref</span>=<span class="string">"itemServiceImpl"</span> <span class="attr">timeout</span>=<span class="string">"300000"</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:service</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="表现层中使用Dubbo"><a href="#表现层中使用Dubbo" class="headerlink" title=" 表现层中使用Dubbo "></a><font color="orange"> 表现层中使用Dubbo </font></h3><ul><li><p>在表现层的SpringMVC的配置文件<code>springmvc.xml</code>中添加: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置视图解析器: 可以配置也可以不配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"taotao-web"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册中心地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">"zookeeper"</span> <span class="attr">address</span>=<span class="string">"192.168.1.184:2181"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用dubbo服务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">"com.coppco.service.ItemService"</span> <span class="attr">id</span>=<span class="string">"itemServiceImpl"</span> <span class="attr">timeout</span>=<span class="string">"300000"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.coppco.controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用暴露的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coppco.pojo.TbItem;</span><br><span class="line"><span class="keyword">import</span> com.coppco.service.ItemService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 商品管理Controller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ItemService itemService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/item/&#123;itemId&#125;"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TbItem <span class="title">getItemById</span><span class="params">(@PathVariable Long itemId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> itemService.getItemById(itemId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Dubbo监控中心"><a href="#Dubbo监控中心" class="headerlink" title=" Dubbo监控中心 "></a><font color="orange"> Dubbo监控中心 </font></h2><p>Dubbo提供了监控中, 推荐部署在安装注册中心的电脑上, 首先需要安装Tomcat, 然后通过Tomcat部署<code>dubbo-admin-x.x.x.war</code>.部署之后访问地址是<code>http://x.x.x.x:8080/dubbo-admin/</code>, 登录名和密码默认是<code>root</code>.</p><ul><li>如果监控中心和注册中心不在一台电脑上, 需要修改<code>dubbo-admin.x.x.x.war</code>包解压中的<code>/dubbo-admin/WEB-INF/dubbo.properties</code>中的注册中心地址、用户名和密码.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Dubbo是阿里巴巴公司开源的一个高性能优秀的服务框架，使得应用可通过高性能的RPC实现服务的输出和输入功能，可以和Spring框架无缝集成。&lt;/p&gt;
&lt;p&gt;Dubbo目前只适合Java使用,Dubbo经历过停止更新之后, 目前又重新维护了!!!&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Dubbo" scheme="http://yoursite.com/tags/Dubbo/"/>
    
      <category term="分布式服务架构" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>iOS10更改约束后动画调用layoutIfNeeded没有动画</title>
    <link href="http://yoursite.com/2017/04/20/iOS/iOS10%E6%9B%B4%E6%94%B9%E7%BA%A6%E6%9D%9F%E5%90%8E%E5%8A%A8%E7%94%BB%E8%B0%83%E7%94%A8layoutIfNeeded%E6%B2%A1%E6%9C%89%E5%8A%A8%E7%94%BB/"/>
    <id>http://yoursite.com/2017/04/20/iOS/iOS10更改约束后动画调用layoutIfNeeded没有动画/</id>
    <published>2017-04-20T07:58:06.000Z</published>
    <updated>2019-04-29T08:39:51.664Z</updated>
    
    <content type="html"><![CDATA[<p>最近做一个动画的时候, 因为用到了约束, 所以在改变约束之后, 需要使用动画来实现, 但是发现在iOS10.2 系统上面没有效果, 但是在iOS9、iOS8上面没有问题. 遂网上查看了一下,  发现在iOS10中, Apple改变了layoutIfNeed(期望不改变view的位置).</p><a id="more"></a><blockquote><p>  //改变位置<br>[self.imageV mas_remakeConstraints :^(MASConstraintMaker *make) {<br>&emsp;&emsp;make.centerY.mas_equalTo(self);<br>&emsp;&emsp;make.centerX.mas_equalTo(self);<br>&emsp;&emsp;make.width.mas_equalTo(self.mas_width).multipliedBy(0.75);<br>}];<br>//旋转<br>self.imageV.transform = CGAffineTransformRotate(self.imageV.transform, -M_1_PI / 2);<br>[UIView animateWithDuration:0.35 animations:^{<br>&emsp;&emsp;[self.imageV layoutIfNeeded];//这一句在iOS10没有动画效果<br>&emsp;&emsp;self.imageV.transform = CGAffineTransformIdentity;<br>}];</p></blockquote><p>上面的代码在iOS10以下系统没有问题, 有一个动画效果, 但是在iOS10上面是没有任何效果的.</p><h2 id="解决方法-因为在iOS10-Apple改变了layoutIfNeed实现-Apple给出的解决方案是-调用-superView-layoutIfNeeded"><a href="#解决方法-因为在iOS10-Apple改变了layoutIfNeed实现-Apple给出的解决方案是-调用-superView-layoutIfNeeded" class="headerlink" title="解决方法: 因为在iOS10, Apple改变了layoutIfNeed实现, Apple给出的解决方案是: 调用[superView layoutIfNeeded]"></a><font color="orange">解决方法: 因为在iOS10, Apple改变了layoutIfNeed实现, Apple给出的解决方案是: 调用[superView layoutIfNeeded]</font></h2><blockquote><p>  [UIView animateWithDuration:0.35 animations:^{<br>&emsp;&emsp;if([[UIDevice currentDevice].systemVersion floatValue] &gt;= 10.0) {<br>&emsp;&emsp;&emsp;&emsp;[self.imageV.superview layoutIfNeeded];<br>&emsp;&emsp;} else {<br>&emsp;&emsp;&emsp;&emsp;[self.imageV layoutIfNeeded];<br>&emsp;&emsp;}<br>&emsp;&emsp;self.imageV.transform = CGAffineTransformIdentity;<br>}];</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做一个动画的时候, 因为用到了约束, 所以在改变约束之后, 需要使用动画来实现, 但是发现在iOS10.2 系统上面没有效果, 但是在iOS9、iOS8上面没有问题. 遂网上查看了一下,  发现在iOS10中, Apple改变了layoutIfNeed(期望不改变view的位置).&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="坑点" scheme="http://yoursite.com/tags/%E5%9D%91%E7%82%B9/"/>
    
  </entry>
  
</feed>
