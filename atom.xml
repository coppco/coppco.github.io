<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>coppco的博客</title>
  
  <subtitle>记录iOS和Swift的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-06-25T05:52:21.623Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>coppco</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SwiftUI之绘制和动画</title>
    <link href="http://yoursite.com/2021/03/22/iOS/SwiftUI%E4%B9%8B%E7%BB%98%E5%88%B6%E5%92%8C%E5%8A%A8%E7%94%BB/"/>
    <id>http://yoursite.com/2021/03/22/iOS/SwiftUI之绘制和动画/</id>
    <published>2021-03-22T02:40:41.000Z</published>
    <updated>2023-06-25T05:52:21.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h2><p>使用Path可以绘制图形</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Bodge</span>: <span class="title class_">View</span> &#123;</span><br><span class="line"><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">    <span class="type">Path</span> &#123; path <span class="keyword">in</span></span><br><span class="line">      <span class="comment">/// 移动到点</span></span><br><span class="line">      path.move(to: <span class="type">CGPoint</span>(x: <span class="number">0</span>, y: <span class="number">0</span>))</span><br><span class="line">      <span class="comment">/// 添加直线</span></span><br><span class="line">      path.addLine(to: <span class="type">CGPoint</span>(x: <span class="number">10</span>, y: <span class="number">10</span>))</span><br><span class="line">      <span class="comment">/// 绘制贝塞尔曲线</span></span><br><span class="line">      path.addQuadCurve(to: <span class="type">CGPoint</span>(x: <span class="number">20</span>, y: <span class="number">20</span>), control: <span class="type">CGPoint</span>(x: <span class="number">25</span>, y <span class="number">25</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    .fill(<span class="type">Color</span>.black)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="GeometryReader"><a href="#GeometryReader" class="headerlink" title="GeometryReader"></a>GeometryReader</h2><p>GeometryReader让我们能够获取到父view提供的建议的size，该数据保存在GeometryProxy中，GeometryProxy提供了一个<code>frame(in:)</code>函数，可以让我们分别获取到该view相对于<code>.global</code>、<code>.local</code>或者<code>.name</code>的size。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">BadgeBackgroundView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">GeometryReader</span> &#123; geometry <span class="keyword">in</span> </span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="GeometryProxy"><a href="#GeometryProxy" class="headerlink" title="GeometryProxy"></a>GeometryProxy</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="title class_">GeometryProxy</span> &#123;</span><br><span class="line">  <span class="comment">/// 返回父View的建议尺寸</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> size: <span class="type">CGSize</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">  <span class="comment">/// 可以获取.leading .top等数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">subscript</span>&lt;<span class="type">T</span>&gt;(<span class="params">anchor</span>: <span class="type">Anchor</span>&lt;<span class="type">T</span>&gt;) -&gt; <span class="type">T</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="comment">/// 安全区域</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> safeAreaInsets: <span class="type">EdgeInsets</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">  <span class="comment">/// coordinateSpace: 坐标空间, 可以是.local, .global, .name()</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">frame</span>(<span class="params">in</span> <span class="params">coordinateSpace</span>: <span class="type">CoordinateSpace</span>) -&gt; <span class="type">CGRect</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>.coordinateSpace(name: &quot;ScrollViewSpace&quot;)</code>自定义坐标空间</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">CarouselView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> imageDataSource: [<span class="type">String</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">ScrollView</span>(.horizontal, showsIndicators: <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="type">LazyHStack</span>(spacing: <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">ForEach</span>(imageDataSource, id: \.<span class="keyword">self</span>) &#123; imageName <span class="keyword">in</span></span><br><span class="line">                        <span class="type">GeometryReader</span> &#123; proxy <span class="keyword">in</span></span><br><span class="line">                            <span class="keyword">Self</span>.loadImage(imageName: imageName)</span><br><span class="line">                                .resizable()</span><br><span class="line">                                .aspectRatio(<span class="type">CGSize</span>(width: proxy.size.width, height: proxy.size.height), contentMode: .fit)</span><br><span class="line">                                .rotation3DEffect(</span><br><span class="line">                                    <span class="keyword">self</span>.rotateAngle( proxy: proxy),</span><br><span class="line">                                    axis: (x: <span class="number">0</span>, y: <span class="number">11.0</span>, z: <span class="number">0</span>))</span><br><span class="line">                        &#125;</span><br><span class="line">                        .frame(width: <span class="type">UIScreen</span>.main.bounds.width <span class="operator">/</span> <span class="number">3.0</span>, height: <span class="type">UIScreen</span>.main.bounds.width <span class="operator">/</span> <span class="number">3.0</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .aspectRatio(<span class="number">2</span>, contentMode: .fit)</span><br><span class="line">            .coordinateSpace(name: <span class="string">&quot;ScrollViewSpace&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Spacer</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">rotateAngle</span>(<span class="params">proxy</span>: <span class="type">GeometryProxy</span>) -&gt; <span class="type">Angle</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> dif <span class="operator">=</span> <span class="type">UIScreen</span>.main.bounds.width <span class="operator">*</span> <span class="number">0.5</span> <span class="operator">-</span> proxy.frame(in: .named(<span class="string">&quot;ScrollViewSpace&quot;</span>)).midX</span><br><span class="line">        <span class="keyword">let</span> pct <span class="operator">=</span> <span class="built_in">min</span>(dif <span class="operator">/</span> proxy.size.width <span class="operator">*</span> <span class="number">0.5</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> .degrees(<span class="type">Double</span>(<span class="number">30</span> <span class="operator">*</span> pct))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">loadImage</span>(<span class="params">imageName</span>: <span class="type">String</span>) -&gt; <span class="type">Image</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span></span><br><span class="line">            <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">Bundle</span>.main.url(forResource: imageName, withExtension: <span class="string">&quot;jpeg&quot;</span>),</span><br><span class="line">            <span class="keyword">let</span> imageSource <span class="operator">=</span> <span class="type">CGImageSourceCreateWithURL</span>(url <span class="keyword">as</span> <span class="type">NSURL</span>, <span class="literal">nil</span>),</span><br><span class="line">            <span class="keyword">let</span> image <span class="operator">=</span> <span class="type">CGImageSourceCreateImageAtIndex</span>(imageSource, <span class="number">0</span>, <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">&quot;Couldn&#x27;t load image <span class="subst">\(imageName)</span>.jpg from main bundle.&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Image</span>(decorative: image, scale: <span class="type">UIScreen</span>.main.scale)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">carouselView_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">HStack</span> &#123;</span><br><span class="line">            <span class="type">CarouselView</span>(imageDataSource: [</span><br><span class="line">                <span class="string">&quot;Carousel01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Carousel02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Carousel03&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Carousel04&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Carousel05&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Carousel06&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Carousel07&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Carousel08&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Carousel09&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Carousel10&quot;</span>,</span><br><span class="line">            ])</span><br><span class="line">            <span class="type">Spacer</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Gradient渐变"><a href="#Gradient渐变" class="headerlink" title="Gradient渐变"></a>Gradient渐变</h2><p><code>LinearGradient</code>、<code>AngularGradient</code>和<code>RadialGradient</code>可以生成渐变色。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LinearGradient</span>(gradient: </span><br><span class="line">               <span class="type">Gradient</span>(colors: [</span><br><span class="line">                 <span class="type">Color</span>(red: <span class="number">239.0</span> <span class="operator">/</span> <span class="number">255</span>, green: <span class="number">120.0</span> <span class="operator">/</span> <span class="number">255</span>, blue: <span class="number">221.0</span> <span class="operator">/</span> <span class="number">255</span>), </span><br><span class="line">                 <span class="type">Color</span>(red: <span class="number">239.0</span> <span class="operator">/</span> <span class="number">255</span>, green: <span class="number">172.0</span> <span class="operator">/</span> <span class="number">255</span>, blue: <span class="number">120.0</span> <span class="operator">/</span> <span class="number">255</span>)]), </span><br><span class="line">               startPoint: <span class="type">UnitPoint</span>(x: <span class="number">0.5</span>, y: <span class="number">0</span>), </span><br><span class="line">               endPoint: <span class="type">UnitPoint</span>(x: <span class="number">0.5</span>, y: <span class="number">0.6</span>))</span><br><span class="line"></span><br><span class="line"><span class="type">AngularGradient</span>(gradient: <span class="type">Gradient</span>(colors: [</span><br><span class="line">                 <span class="type">Color</span>(red: <span class="number">239.0</span> <span class="operator">/</span> <span class="number">255</span>, green: <span class="number">120.0</span> <span class="operator">/</span> <span class="number">255</span>, blue: <span class="number">221.0</span> <span class="operator">/</span> <span class="number">255</span>), </span><br><span class="line">                 <span class="type">Color</span>(red: <span class="number">239.0</span> <span class="operator">/</span> <span class="number">255</span>, green: <span class="number">172.0</span> <span class="operator">/</span> <span class="number">255</span>, blue: <span class="number">120.0</span> <span class="operator">/</span> <span class="number">255</span>)]), </span><br><span class="line">                center: .center)</span><br><span class="line"></span><br><span class="line"><span class="type">RadialGradient</span>(gradient: <span class="type">Gradient</span>(colors: [</span><br><span class="line">                 <span class="type">Color</span>(red: <span class="number">239.0</span> <span class="operator">/</span> <span class="number">255</span>, green: <span class="number">120.0</span> <span class="operator">/</span> <span class="number">255</span>, blue: <span class="number">221.0</span> <span class="operator">/</span> <span class="number">255</span>), </span><br><span class="line">                 <span class="type">Color</span>(red: <span class="number">239.0</span> <span class="operator">/</span> <span class="number">255</span>, green: <span class="number">172.0</span> <span class="operator">/</span> <span class="number">255</span>, blue: <span class="number">120.0</span> <span class="operator">/</span> <span class="number">255</span>)]), </span><br><span class="line">               center: .center, </span><br><span class="line">               startRadius: <span class="number">40</span>, </span><br><span class="line">               endRadius: <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="ZStack"><a href="#ZStack" class="headerlink" title="ZStack"></a>ZStack</h2><p><code>ZStack</code>可以把组件视图堆叠在一起。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Path&quot;&gt;&lt;a href=&quot;#Path&quot; class=&quot;headerlink&quot; title=&quot;Path&quot;&gt;&lt;/a&gt;Path&lt;/h2&gt;&lt;p&gt;使用Path可以绘制图形&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Bodge&lt;/span&gt;: &lt;span class=&quot;title class_&quot;&gt;View&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; body: &lt;span class=&quot;keyword&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;View&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;Path&lt;/span&gt; &amp;#123; path &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;/// 移动到点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      path.move(to: &lt;span class=&quot;type&quot;&gt;CGPoint&lt;/span&gt;(x: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, y: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;/// 添加直线&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      path.addLine(to: &lt;span class=&quot;type&quot;&gt;CGPoint&lt;/span&gt;(x: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, y: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;/// 绘制贝塞尔曲线&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      path.addQuadCurve(to: &lt;span class=&quot;type&quot;&gt;CGPoint&lt;/span&gt;(x: &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, y: &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;), control: &lt;span class=&quot;type&quot;&gt;CGPoint&lt;/span&gt;(x: &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;, y &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .fill(&lt;span class=&quot;type&quot;&gt;Color&lt;/span&gt;.black)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="SwiftUI" scheme="http://yoursite.com/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>SwiftUI基础</title>
    <link href="http://yoursite.com/2020/04/16/iOS/SwiftUI%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/04/16/iOS/SwiftUI基础/</id>
    <published>2020-04-16T02:47:33.000Z</published>
    <updated>2021-03-29T13:54:56.817Z</updated>
    
    <content type="html"><![CDATA[<p>SwiftUI 是一种非常简单的创新方法，可以利用 Swift 的强大能力在所有苹果设备平台上构建用户界面。通过 SwiftUI，开发者仅使用一组工具和 API 就能为所有苹果设备构建用户界面。SwiftUI 使用易于阅读和编写的声明式 Swift 语法，可与新的 Xcode 设计工具无缝协作，使你的代码和设计完美同步。SwiftUI 自动支持动态类型、黑暗模式、本地化和可访问性，你的 SwiftUI 代码将成为你写过的最强大的 UI 代码。</p><span id="more"></span><h2 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h2><p>SwiftUI的视图文件包含两个结构体(Struct) 第一个结构体遵循<code>View</code>协议，描述视图的内容和布局。</p><p>第二个结构体遵循<code>PreviewProvider</code>协议, 它声明为第一个视图的预览视图。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">struct ContentView: View &#123;</span><br><span class="line">    var body: some View &#123;</span><br><span class="line">        Text(&quot;Hello, world!&quot;)</span><br><span class="line">        .padding()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct ContentView_Previews: PreviewProvider &#123;</span><br><span class="line">    static var previews: some View &#123;</span><br><span class="line">        ContentView()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Canvas画布预览"><a href="#Canvas画布预览" class="headerlink" title="Canvas画布预览"></a>Canvas画布预览</h3><p><code>Editor</code>–<code>Editor and Canvas</code>或者使用快捷键<code>Command</code> + <code>Option</code> + <code>Enter</code>可以打开<code>Canvas</code>, 点击<code>Canvas</code>上的<code>Resume</code>可以预览SwiftUI界面。也可以使用快捷键<code>Command</code> + <code>Option</code> + <code>P</code>快速预览。</p><h3 id="Inspect"><a href="#Inspect" class="headerlink" title="Inspect"></a>Inspect</h3><p>当我们需要修改控件的属性时, 可以使用代码来修改, 也可以在<code>Inspect</code>中修改, 任一位置修改后预览以及代码编辑器中都会同步修改, 同时预览中也会更新内容的变化。</p><p>在预览视图中, 按下<code>Command</code>键的同时点击控件/类名, 然后选择<code>Inspect</code>, 在弹出层显示所有可定制的视图属性, 选中的控件不同, 可以定制的属性集合也不相同。</p><p>也可以按下<code>Control</code> + <code>Option</code>, 然后鼠标点击控件/类名, 弹出<code>Inspect</code>窗口。</p><h3 id="HStack和VStack"><a href="#HStack和VStack" class="headerlink" title="HStack和VStack"></a>HStack和VStack</h3><p><code>HStack</code>可以使控件水平布局, <code>VStack</code>可以使控件垂直布局。默认情况下<code>HStack</code>和<code>VStack</code>会把内部的视图在自己的主轴上居中对齐。</p><h3 id="Spacer"><a href="#Spacer" class="headerlink" title="Spacer"></a>Spacer</h3><p><code>Spacer</code>是一个可以伸缩的空白控件, 它负责占用其他控件布局完成后剩下的所有空间。</p><h3 id="padding"><a href="#padding" class="headerlink" title="padding()"></a>padding()</h3><p>使用<code>padding()</code>可以修改内容视图整体的内边距。</p><h3 id="clipShape-Circle"><a href="#clipShape-Circle" class="headerlink" title="clipShape(Circle())"></a>clipShape(Circle())</h3><p><code>clipShape(Circle())</code>给视图添加剪切效果, <code>Circle</code>是一个圆形的, 当然也可以使用其他形状。</p><h3 id="overlay"><a href="#overlay" class="headerlink" title="overlay"></a>overlay</h3><p><code>.overlay(Circle().stroke(Color.white, lineWidth: 4))</code>可以给视图添加一个白色的边框。</p><h3 id="shadow"><a href="#shadow" class="headerlink" title="shadow"></a>shadow</h3><p><code>.shadow(radius: 10)</code>可以给视图添加一个半径为10的阴影。</p><h3 id="UIKit视图和SwiftUI视图混合使用"><a href="#UIKit视图和SwiftUI视图混合使用" class="headerlink" title="UIKit视图和SwiftUI视图混合使用"></a>UIKit视图和SwiftUI视图混合使用</h3><p>如果要在SwiftUI中使用UIView及其子类, 需要把这些UIView包裹在一个遵循<code>UIViewRepresentable</code>协议的SwiftUI视图中, SwiftUI中包含了适配<code>WatchKit</code>和<code>AppKit</code>的类似协议。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SwiftUI</span><br><span class="line"><span class="keyword">import</span> MapKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MapView</span>: <span class="title class_">UIViewRepresentable</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">UIViewType</span> <span class="operator">=</span> <span class="type">MKMapView</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">makeUIView</span>(<span class="params">context</span>: <span class="type">Context</span>) -&gt; <span class="type">UIViewType</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">MKMapView</span>(frame: .zero)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">updateUIView</span>(<span class="keyword">_</span> <span class="params">uiView</span>: <span class="type">UIViewType</span>, <span class="params">context</span>: <span class="type">Context</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> coordinate <span class="operator">=</span> <span class="type">CLLocationCoordinate2D</span>(latitude: <span class="number">34.011286</span>, longitude: <span class="operator">-</span><span class="number">116.166868</span>)</span><br><span class="line">        <span class="keyword">let</span> span <span class="operator">=</span> <span class="type">MKCoordinateSpan</span>(latitudeDelta: <span class="number">2.0</span>, longitudeDelta: <span class="number">2.0</span>)</span><br><span class="line">        <span class="keyword">let</span> region <span class="operator">=</span> <span class="type">MKCoordinateRegion</span>(center: coordinate, span: span)</span><br><span class="line">        uiView.setRegion(region, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MapView_Previews</span>: <span class="title class_">PreviewProvider</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> previews: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">MapView</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击<code>Live Preview</code>(实时预览)按钮, 可能还需要点击<code>Try Again</code>或<code>Resume</code>按钮来激活模式的切换。</p><h3 id="edgesIgnoringSafeArea-top"><a href="#edgesIgnoringSafeArea-top" class="headerlink" title=".edgesIgnoringSafeArea(.top)"></a>.edgesIgnoringSafeArea(.top)</h3><p><code>.edgesIgnoringSafeArea(.top)</code>可以使视图在布局时忽略顶部的安全区域边距。</p><h3 id="修改预览的大小或设备"><a href="#修改预览的大小或设备" class="headerlink" title="修改预览的大小或设备"></a>修改预览的大小或设备</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">LandmarkRow</span>(landmark: landmarkData[<span class="number">0</span>])</span><br><span class="line">.previewLayout(.fixed(width: <span class="number">300</span>, height: <span class="number">80</span>))</span><br></pre></td></tr></table></figure><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p><code>List</code>可以展示列表视图, 列表的远可以是静态的, 也可以是动态生成的, 也可以是混合动态静态的视图。</p><p>静态数据</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> &#123;</span><br><span class="line"><span class="type">LandmarkRow</span>(landmark: landmarkData[<span class="number">0</span>])</span><br><span class="line"><span class="type">LandmarkRow</span>(landmark: landmarkData[<span class="number">1</span>])</span><br><span class="line"><span class="type">LandmarkRow</span>(landmark: landmarkData[<span class="number">2</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态数据要配合可辨别的数据类型使用, 想让数据变为可识别的数据类型有两种方法: </p><ul><li>1、传入一个<code>keypath</code>指定数据中哪一个字段用来唯一识别这个数据元素。当元素是简单数据类型时, 可以使用<code>\.self</code>作为<code>keypath</code>。</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LandmarkList</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">List</span>(landmarkData, id: \.name) &#123; landmark <span class="keyword">in</span></span><br><span class="line">            <span class="type">LandmarkRow</span>(landmark: landmark)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2、让数据遵循<code>Identifiable</code>协议</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">struct Landmark: Hashable, Codable &#123;</span><br><span class="line">    var id: Int</span><br><span class="line">    var name: String</span><br><span class="line">    fileprivate var imageName: String</span><br><span class="line">    fileprivate var coordinates: Coordinates</span><br><span class="line">    var state: String</span><br><span class="line">    var park: String</span><br><span class="line">    var category: Category</span><br><span class="line">    </span><br><span class="line">    var locationCoordinate: CLLocationCoordinate2D &#123;</span><br><span class="line">        CLLocationCoordinate2D(latitude: coordinates.latitude, longitude: coordinates.longitude)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    enum Category: String, CaseIterable, Codable, Hashable &#123;</span><br><span class="line">        case featured = &quot;Featured&quot;</span><br><span class="line">        case lakes = &quot;Lakes&quot;</span><br><span class="line">        case rivers = &quot;Rivers&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct LandmarkList: View &#123;</span><br><span class="line">    var body: some View &#123;</span><br><span class="line">        List(landmarkData) &#123; landmark in</span><br><span class="line">            LandmarkRow(landmark: landmark)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3、也可以使用ForEachc创建, 和前面一样, 要么数据遵循<code>Identifiable</code>协议, 要么使用<code>keypath</code>来标识唯一数据。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List &#123;</span><br><span class="line">ForEach(landmarkData) &#123; landmark in</span><br><span class="line">LandmarkRow(landmark: landmark)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加导航栏"><a href="#添加导航栏" class="headerlink" title="添加导航栏"></a>添加导航栏</h3><p>把视图嵌套进一个<code>NavigationView</code>视图中, 就可以显示导航栏了。使用<code>.navigationTitle(&quot;Landmark&quot;)</code>修改导航栏标题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//iOS 13</span><br><span class="line">.navigationBarTitle(&quot;Landmark&quot;, displayMode: .inline)</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// iOS 14.0</span><br><span class="line">.navigationTitle(&quot;Landmark&quot;)</span><br><span class="line">.navigationBarTitleDisplayMode(.inline)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LandmarkList</span>: <span class="title class_">View</span> &#123;</span><br><span class="line"><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line"><span class="type">NavigationView</span> &#123;</span><br><span class="line"><span class="type">List</span> &#123;</span><br><span class="line"><span class="type">ForEach</span>(landmarkData) &#123; landmark <span class="keyword">in</span></span><br><span class="line"><span class="type">LandmarkRow</span>(landmark: landmark)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">.navigationTitle(<span class="string">&quot;Landmark&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>NavigationLink</code>跳转页面, 并使用<code>destination</code>指定跳转的页面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">struct LandmarkList: View &#123;</span><br><span class="line">    var body: some View &#123;</span><br><span class="line">        NavigationView &#123;</span><br><span class="line">            List &#123;</span><br><span class="line">                ForEach(landmarkData) &#123; landmark in</span><br><span class="line">                    NavigationLink(</span><br><span class="line">                        destination: LandmarkDetail()) &#123;</span><br><span class="line">                            LandmarkRow(landmark: landmark)</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            .navigationTitle(&quot;Landmark&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="设置预览设备"><a href="#设置预览设备" class="headerlink" title="设置预览设备"></a>设置预览设备</h3><p>使用<code>.previewDevice(PreviewDevice(rawValue: &quot;iPhone X&quot;))</code>可以设置调试设备。</p><p>使用<code>.previewDisplayName(value)</code>来给预览设备添加设备标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">struct LandmarkDetail_Previews: PreviewProvider &#123;</span><br><span class="line">    static var previews: some View &#123;</span><br><span class="line">        LandmarkDetail(landmark: landmarkData[0])</span><br><span class="line">            .previewDevice(PreviewDevice(rawValue: &quot;iPhone X&quot;))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct LandmarkDetail_Previews: PreviewProvider &#123;</span><br><span class="line">    static var previews: some View &#123;</span><br><span class="line">        ForEach([&quot;iPhone 8&quot;, &quot;iPhone X&quot;], id: \.self) &#123; value in</span><br><span class="line">            LandmarkDetail(landmark: landmarkData[0])</span><br><span class="line">                .previewDevice(PreviewDevice(rawValue: value))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显示系统图片"><a href="#显示系统图片" class="headerlink" title="显示系统图片"></a>显示系统图片</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Image</span>(systemName: <span class="string">&quot;star.fill&quot;</span>)</span><br><span class="line">.imageScale(.medium)</span><br><span class="line">.foregroundColor(.yellow)</span><br><span class="line"></span><br><span class="line"><span class="type">Image</span>(systemName: <span class="string">&quot;star&quot;</span>)</span><br><span class="line">.imageScale(.medium)</span><br><span class="line">.foregroundColor(.gray)</span><br></pre></td></tr></table></figure><h3 id="State、-ObservedObject和-EnvironmentObject"><a href="#State、-ObservedObject和-EnvironmentObject" class="headerlink" title="@State、@ObservedObject和@EnvironmentObject"></a>@State、@ObservedObject和@EnvironmentObject</h3><p>状态(@State)是一个值或者一个值的集合, 会随着时间而改变, 同时会影响视图的内容、行为或布局。在属性前面加上<code>@State</code>修饰词就是给视图添加了一个状态值。<code>@State</code>一般用于单一视图中。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LandmarkList</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@State</span> <span class="keyword">var</span> showFavoriteOnly: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遵循<code>ObservableObject</code>协议的类可以使用SwiftUI的<code>@Published</code>属性包装器来自动发布属性的变化, 以便使用该类的实例的任何视图都能够自动重新调用<code>body</code>属性, 保持界面与数据的一致。不过有时候需要更多的控制, SwiftUI对此的解决方式是使用<code>objectWillChange</code>手动触发。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DelayedUpdater</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line"><span class="comment">/// 自动触发</span></span><br><span class="line"><span class="meta">@Published</span> <span class="keyword">var</span> value <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="comment">/// 手动触发</span></span><br><span class="line"><span class="keyword">var</span> value1 <span class="operator">=</span> <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">willSet</span> &#123;</span><br><span class="line">        objectWillChange.send()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@ObservedObject</span> <span class="keyword">var</span> updater <span class="operator">=</span> <span class="type">DelayedUpdater</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(<span class="string">&quot;Value is: <span class="subst">\(updater.value)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SwiftUI的环境可以让我们从外部源中获取值, 这对于读取<code>Core Data</code>上下文和视图的<code>presentation mode</code>来说很有用。<code>@EnvironmentObject</code>可以把一个对象注入环境, 以便任何子视图都可以自动获取该对象的访问能力。要使用<code>@EnvironmentObject</code>也需要对象遵循<code>ObservableObject</code>协议以及<code>@Published</code>修饰词。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> name <span class="operator">=</span> <span class="string">&quot;Taylor Swift&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">EditView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@EnvironmentObject</span> <span class="keyword">var</span> user: <span class="type">User</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">TextField</span>(<span class="string">&quot;Name&quot;</span>, text: <span class="variable">$user</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DisplayView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="meta">@EnvironmentObject</span> <span class="keyword">var</span> user: <span class="type">User</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">Text</span>(user.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@EnvironmentObject</code>会在环境中自动查找一个<code>User</code>实例, 并且把找到的结果放进<code>user</code>属性。注意: 如果环境中找不到User实例, 你的应用会崩溃使用<code>.environmentObject(User())</code>修改器绑定数据到视图的环境变量中。下面的两种方式的写法都可以。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> user <span class="operator">=</span> <span class="type">User</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">EditView</span>().environmentObject(user)</span><br><span class="line">            <span class="type">DisplayView</span>().environmentObject(user)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ContentView</span>: <span class="title class_">View</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> user <span class="operator">=</span> <span class="type">User</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> &#123;</span><br><span class="line">        <span class="type">VStack</span> &#123;</span><br><span class="line">            <span class="type">EditView</span>()</span><br><span class="line">            <span class="type">DisplayView</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      .environmentObject(user)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Toggle"><a href="#Toggle" class="headerlink" title="Toggle"></a>Toggle</h3><p>Toggle视图可以binding关系(状态引用)切换状态, 使用<code>$</code>前缀来获得一个状态变量或者属性的绑定关系。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">LandmarkList</span>: <span class="title class_">View</span> &#123;</span><br><span class="line"><span class="comment">/// 显示收藏的地点</span></span><br><span class="line"><span class="meta">@State</span> <span class="keyword">var</span> showFavoriteOnly: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="type">Toggle</span>(isOn: <span class="variable">$showFavoriteOnly</span>) &#123;</span><br><span class="line"><span class="type">Text</span>(<span class="string">&quot;Favorites Only&quot;</span>)</span><br><span class="line">.font(.title)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用可观察对象来存储数据"><a href="#使用可观察对象来存储数据" class="headerlink" title="使用可观察对象来存储数据"></a>使用可观察对象来存储数据</h3><p>可观察对象<code></code>observalble object<code>是一种可以绑定到具体SwifUI视图环境中的数据对象。</code>SwiftUI`可以察觉它影响视图展示的任何变化，并在这种变化发生后及时更新对应视图的展示内容。</p><ul><li>声明一个遵循<code>ObservableObject</code>协议的数据类型, <code>ObservableObject</code>来自于响应式框架<code>Combine</code>, SwiftUI可以订阅可观察对象, 并在数据发生改变时更新视图的内容。</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">UserData</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>添加存储属性并赋初始值。然后使用<code>@Published</code>属性修饰词修饰属性。</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> Combine</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">UserData</span>: <span class="title class_">ObservableObject</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> showFavoritesOnly <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="meta">@Published</span> <span class="keyword">var</span> landmarks <span class="operator">=</span> landmarkData;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SwiftUI 是一种非常简单的创新方法，可以利用 Swift 的强大能力在所有苹果设备平台上构建用户界面。通过 SwiftUI，开发者仅使用一组工具和 API 就能为所有苹果设备构建用户界面。SwiftUI 使用易于阅读和编写的声明式 Swift 语法，可与新的 Xcode 设计工具无缝协作，使你的代码和设计完美同步。SwiftUI 自动支持动态类型、黑暗模式、本地化和可访问性，你的 SwiftUI 代码将成为你写过的最强大的 UI 代码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="SwiftUI" scheme="http://yoursite.com/tags/SwiftUI/"/>
    
  </entry>
  
  <entry>
    <title>Flutter03之基础组件</title>
    <link href="http://yoursite.com/2019/06/28/Flutter/Flutter03%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/06/28/Flutter/Flutter03之基础组件/</id>
    <published>2019-06-28T07:39:32.000Z</published>
    <updated>2023-06-25T08:04:41.795Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/images/iOS/Flutter003.jpg" alt="hello" style="width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"/></p><p>Flutter 从 React 中吸取灵感，通过现代化框架创建出精美的组件。它的核心思想是用 widget 来构建你的 UI 界面。 Widget 描述了在当前的配置和状态下视图所应该呈现的样子。当 widget 的状态改变时，它会重新构建其描述（展示的 UI），框架则会对比前后变化的不同，以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。</p><span id="more"></span><h2 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h2><p>Flutter中自带了一套强大的基础widgets, 下面列出了一些常用的:</p><ul><li>Text</li><li>Icon</li><li>Image</li><li>Button</li><li>FlutterLogo</li></ul><h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><p><code>Text</code>组件用来显示简单的文本。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建</span></span><br><span class="line">Text(<span class="string">&#x27;hello&#x27;</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">textAlign</td><td style="text-align:center">文字对齐方式, 可设置left, right, center, justify(充满宽度), start(文本首对齐), end(文本尾对齐)</td></tr><tr><td style="text-align:center">textDirection</td><td style="text-align:center">文字方向, TextDirection.rtl和TextDirection.ltr</td></tr><tr><td style="text-align:center">maxLines</td><td style="text-align:center">最大行数</td></tr><tr><td style="text-align:center">textScaleFactor</td><td style="text-align:center">缩放因子, 默认1.0</td></tr><tr><td style="text-align:center">overflow</td><td style="text-align:center">配合maxLines使用, clip截断, fade渐变隐藏, ellipsis省略号</td></tr><tr><td style="text-align:center">style</td><td style="text-align:center">TextStyle对象, 其属性有color、fontFamily、background、fontSize、decoration等</td></tr><tr><td style="text-align:center">textSpan</td><td style="text-align:center">配合Text.rich使用, 被包装成RichText, 可实现类似富文本的效果</td></tr></tbody></table><h3 id="Icon"><a href="#Icon" class="headerlink" title="Icon"></a>Icon</h3><p>Icon在Flutter中是一个图标组件。它可以使用Flutter中自带的图标, 也可以使用我们自己矢量图。系统的图标都是矢量图, 不用担心放大后会失真。</p><p>详细的Icons图标可以参考<a href="https://docs.flutter.io/flutter/material/Icons-class.html">Flutter文档</a></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Icon(</span><br><span class="line">  Icons.search,</span><br><span class="line">  color: Colors.red,</span><br><span class="line">  textDirection: TextDirection.ltr,</span><br><span class="line">  size: <span class="number">60</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="Icon使用Iconfont矢量图"><a href="#Icon使用Iconfont矢量图" class="headerlink" title="Icon使用Iconfont矢量图"></a>Icon使用<code>Iconfont</code>矢量图</h5><ul><li>首先从<a href="https://www.iconfont.cn">Iconfont</a>选中一个图片, 添加到购物车</li><li>在购物车中选中该图片点击下载代码, </li><li>把下载文件夹中的<code>iconfont.ttf</code>拷贝到Flutter项目我们新建的<code>fonts</code>文件夹中</li><li>打开配置文件<code>pubspec.yaml</code>配置字体, <code>asset</code>中的路径要和实际路径一致。</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fonts:</span><br><span class="line">  - family: iconfont</span><br><span class="line">    fonts:</span><br><span class="line">      - asset: fonts/iconfont.ttf</span><br></pre></td></tr></table></figure><ul><li>然后使用该矢量图, 打开下载文件中的<code>demo_index.html</code>, 网页中图片下方的<code>&amp;#xe616;</code>, 其中<code>0xe616</code>就是IconData中使用的数字。<code>fontFamily</code>就是<code>pubspec.yaml</code>中定义的<code>family</code>。</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Icon(</span><br><span class="line">  IconData(</span><br><span class="line">    <span class="number">0xe616</span>, </span><br><span class="line">    fontFamily: <span class="string">&#x27;iconfont&#x27;</span>, </span><br><span class="line">    matchTextDirection: <span class="keyword">true</span>),</span><br><span class="line">  color: Colors.red,</span><br><span class="line">  textDirection: TextDirection.ltr,</span><br><span class="line">  size: <span class="number">60</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><p>Flutter中使用<code>Image</code>组件显示图片, 可以显示本地、内存、网络、文件等图片。</p><h4 id="加载本地图片"><a href="#加载本地图片" class="headerlink" title="加载本地图片"></a>加载本地图片</h4><p>Flutter 应用程序包含代码和 assets（也为资源）。资源是被打包到应用程序安装包中，可以在运行时访问的一种文件。常见的资源类型包括静态数据（例如 JSON 文件），配置文件，图标和图片（JPEG，WebP，GIF，动画 WebP / GIF，PNG，BMP 和 WBMP）。</p><h5 id="指定资源"><a href="#指定资源" class="headerlink" title="指定资源"></a>指定资源</h5><p>Flutter 使用 <code>pubspec.yaml</code> 文件，位于项目根目录，来识别应用程序所需的资源。注意每个图片资源都需要添加路径, 如果需要添加一个目录下面的所有资源, 需要在目录名称的结尾加上<code>/</code>(<font color=red>只包含当前目录下的的所有文件。如果想要添加子文件夹中的文件，请为每个目录创建一个条目。</font>)。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flutter:</span><br><span class="line">  assets:</span><br><span class="line">    - assets/my_icon.png</span><br><span class="line">    - assets/background.png</span><br><span class="line"> - directory/</span><br><span class="line">    - directory/subdirectory/</span><br></pre></td></tr></table></figure><h5 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认资源bundle中的图片</span></span><br><span class="line">Image.asset(</span><br><span class="line">  <span class="string">&#x27;images/6s.png&#x27;</span>,</span><br><span class="line">  width: <span class="number">100</span>,</span><br><span class="line">  height: <span class="number">100</span>,</span><br><span class="line">  fit: BoxFit.cover,</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 加载文件图片</span></span><br><span class="line">Image.file(</span><br><span class="line">  File(<span class="string">&#x27;/Users/xxx/Desktop/Flutter/finished_layout/images/6s.png&#x27;</span>),</span><br><span class="line">  width: <span class="number">100</span>,</span><br><span class="line">  height: <span class="number">100</span>,</span><br><span class="line">  fit: BoxFit.cover,</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 网络图片</span></span><br><span class="line">Image.network(</span><br><span class="line">  <span class="string">&#x27;http://www.baidu.com/img/pad_d697ff81bdcfbf42f5ee02b29ce1592d.png&#x27;</span>,</span><br><span class="line">  width: <span class="number">270</span>,</span><br><span class="line">  height: <span class="number">129</span>,</span><br><span class="line">  fit: BoxFit.cover,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><p>Flutter中有很多种按钮, <code>RaisedButton</code>、<code>FlatButton</code>、<code>IconButton</code>、<code>FloatingActionButton</code>、<code>OutlineButton</code>、<code>DropdownButton</code>、<code>PopupMenuButton</code>等</p><h4 id="RaisedButton"><a href="#RaisedButton" class="headerlink" title="RaisedButton"></a>RaisedButton</h4><p>RaisedButton在点击时会带波纹效果, 并且有阴影, 它可以添加子组件.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">RaisedButton(</span><br><span class="line">  onPressed: () &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;RaisedButton&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  color: Colors.blue,</span><br><span class="line">  child: Text(<span class="string">&#x27;RaisedButton&#x27;</span>),</span><br><span class="line">  textColor: Colors.white,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="FlatButton"><a href="#FlatButton" class="headerlink" title="FlatButton"></a>FlatButton</h4><p><code>FlatButton</code>和<code>RaisedButton</code>使用方法基本一致, 不同的地方在于<code>FlatButton</code>没有阴影。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FlatButton(</span><br><span class="line">  onPressed: () &#123;&#125;,</span><br><span class="line">  child: Text(<span class="string">&#x27;FlatButton&#x27;</span>),</span><br><span class="line">  textColor: Colors.white,</span><br><span class="line">  color: Colors.blue,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="IconButton"><a href="#IconButton" class="headerlink" title="IconButton"></a>IconButton</h4><p><code>IconButton</code>可以添加图标作为按钮, 点击时带有波纹效果。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">IconButton(</span><br><span class="line">  icon: Icon(</span><br><span class="line">    Icons.volume_up,</span><br><span class="line">    size: <span class="number">44.0</span>,</span><br><span class="line">    color: Colors.blue,</span><br><span class="line">  ),</span><br><span class="line">  iconSize: <span class="number">44</span>,</span><br><span class="line">  onPressed: () &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;音量&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="OutlineButton"><a href="#OutlineButton" class="headerlink" title="OutlineButton"></a>OutlineButton</h4><p><code>OutlineButton</code>是带边框的按钮, 点击的时候, 边框和背景颜色会呈现高亮状态。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OutlineButton(</span><br><span class="line">  onPressed: () &#123;&#125;,</span><br><span class="line">  textColor: Colors.blue,</span><br><span class="line">  child: Text(<span class="string">&#x27;OutlineButton&#x27;</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="FloatingActionButton"><a href="#FloatingActionButton" class="headerlink" title="FloatingActionButton"></a>FloatingActionButton</h4><p><code>FloatingActionButton</code>悬浮按钮, 通常悬浮在其他组件上面。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FloatingActionButton(</span><br><span class="line">  onPressed: () &#123;&#125;,</span><br><span class="line">  child: Icon(</span><br><span class="line">    Icons.add, </span><br><span class="line">    size: <span class="number">44</span>, </span><br><span class="line">    color: Colors.white</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="DropdownButton和PopupMenuButton"><a href="#DropdownButton和PopupMenuButton" class="headerlink" title="DropdownButton和PopupMenuButton"></a>DropdownButton和PopupMenuButton</h4><p><code>DropdownButton</code>和<code>PopupMenuButton</code>是下拉选择按钮, 使用方式类似, 当用户点击的时候会提供一组供用户选择的选项列表。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">DropdownButton(</span><br><span class="line">  items: &lt;DropdownMenuItem&gt;[</span><br><span class="line">    DropdownMenuItem(</span><br><span class="line">      child: Text(<span class="string">&#x27;篮球&#x27;</span>),</span><br><span class="line">      value: <span class="string">&#x27;篮球&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">    DropdownMenuItem(</span><br><span class="line">      child: Text(<span class="string">&#x27;足球&#x27;</span>),</span><br><span class="line">      value: <span class="string">&#x27;足球&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">    DropdownMenuItem(</span><br><span class="line">      child: Text(<span class="string">&#x27;排球&#x27;</span>),</span><br><span class="line">      value: <span class="string">&#x27;排球&#x27;</span>,</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">  onChanged: (value) &#123;</span><br><span class="line">    <span class="built_in">print</span>(value);</span><br><span class="line">  &#125;,</span><br><span class="line">  hint: Text(<span class="string">&#x27;点我&#x27;</span>),</span><br><span class="line">  iconEnabledColor: Colors.white,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> SizeValue &#123; small, middle, big &#125;</span><br><span class="line"></span><br><span class="line">PopupMenuButton&lt;SizeValue&gt;(</span><br><span class="line">  onSelected: (value) &#123;&#125;,</span><br><span class="line">  icon: Icon(Icons.more_horiz),</span><br><span class="line">  itemBuilder: (context) &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;PopupMenuEntry&lt;SizeValue&gt;&gt;[</span><br><span class="line">      <span class="keyword">const</span> PopupMenuItem(</span><br><span class="line">        child: Text(<span class="string">&#x27;Small&#x27;</span>),</span><br><span class="line">        value: SizeValue.small,</span><br><span class="line">      ),</span><br><span class="line">      <span class="keyword">const</span> PopupMenuItem(</span><br><span class="line">        child: Text(<span class="string">&#x27;Middle&#x27;</span>),</span><br><span class="line">        value: SizeValue.middle,</span><br><span class="line">      ),</span><br><span class="line">      <span class="keyword">const</span> PopupMenuItem(</span><br><span class="line">        child: Text(<span class="string">&#x27;Big&#x27;</span>),</span><br><span class="line">        value: SizeValue.big,</span><br><span class="line">      ),</span><br><span class="line">    ];</span><br><span class="line">  &#125;,</span><br><span class="line">  offset: Offset(<span class="number">5</span>, <span class="number">10</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="FlutterLogo"><a href="#FlutterLogo" class="headerlink" title="FlutterLogo"></a>FlutterLogo</h3><p>FlutterLogo是Flutter的Logo组件。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FlutterLogo(</span><br><span class="line">  size: <span class="number">88</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>## </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/images/iOS/Flutter003.jpg&quot; alt=&quot;hello&quot; style=&quot;width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Flutter 从 React 中吸取灵感，通过现代化框架创建出精美的组件。它的核心思想是用 widget 来构建你的 UI 界面。 Widget 描述了在当前的配置和状态下视图所应该呈现的样子。当 widget 的状态改变时，它会重新构建其描述（展示的 UI），框架则会对比前后变化的不同，以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/tags/Flutter/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>学习Flutter01---Dart开发语言概览</title>
    <link href="http://yoursite.com/2019/06/13/Dart/Dart%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/06/13/Dart/Dart语言基础/</id>
    <published>2019-06-13T03:11:29.000Z</published>
    <updated>2023-06-25T08:05:25.556Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/images/iOS/Flutter004.jpg" alt="hello" style="width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"/></p><p>Flutter使用Dart来编写框架和widget, Dart可以使用<a href="https://dartpad.dartlang.org">DartPad</a>来快速学习, 而无需搭建相关环境, 国内用户可以访问<a href="https://dartpad.cn">DartPad.cn</a>。DartPad支持<code>dart:* libraries</code>, 但是不支持<code>dart:io</code>以及<code>packages</code>。 如果你需要使用<code>dart:io</code>那么你需要使用<a href="https://dart.dev/tools/sdk">Dart SDK</a>, 如果你需要使用<code>packages</code>那么你需要使用<a href="https://dart.dev/platforms">平台</a>, 对于开发移动应用, 你可以安装Flutter。</p><p>这里学习一下主要的Dart功能, 从变量、操作符、类到资源库。 如果你有其他语言基础, 那么学习Dart会很轻松。</p><span id="more"></span><h2 id="Dart中重要的概念"><a href="#Dart中重要的概念" class="headerlink" title="Dart中重要的概念"></a><font color=orange>Dart中重要的概念</font></h2><ul><li>所有的变量引用的都是对象, 所有的对象都是一个类得实例。甚至数字、函数和null都是对象, 所有的对象都继承于Object类。</li><li>虽然Dart是强类型, 但是在声明变量时可不指定类型, 因为Dart可以类型推导。如果想显式地声明一个不确定的类型, 可以使用<code>dynamic</code>或者基类<code>Object</code>。<ul><li>示例</li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> log(<span class="built_in">Object</span> object) &#123;</span><br><span class="line">  <span class="built_in">print</span>(object.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">bool</span> convertToBool(<span class="built_in">dynamic</span> arg) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arg <span class="keyword">is</span> <span class="built_in">bool</span>) <span class="keyword">return</span> arg;</span><br><span class="line">  <span class="keyword">if</span> (arg <span class="keyword">is</span> <span class="built_in">String</span>) <span class="keyword">return</span> arg == <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">  <span class="keyword">throw</span> ArgumentError(<span class="string">&#x27;Cannot convert <span class="subst">$arg</span> to a bool.&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Dart支持泛型, 例如<code>List&lt;int&gt;</code>(一个整数集合)和<code>List&lt;dynamic&gt;</code>(一个任意对象的集合)。</li><li>Dart支持顶级函数(例如main()), 同时支持类或对象函数(静态方法和实例方法), 你也可以在函数中嵌套函数。</li><li>Dart同样支持顶级变量以及在类或对象中创建静态和实例变量。实例变量有时被称为域或属性。</li><li>不像Java, Dart没有<code>public</code>, <code>protectd</code>和<code>private</code>限定符, 如果你定义一个以下划线(_)开始的变量, 那么它在库中就是私有的。</li><li>标示符由数字、字母、美元符号($)和下划线(_)构成, 但只能以字母或下划线开头。</li><li>Dart有表达式和语句,表达式有值而语句没有. 例如条件表达式<code>condition ? expr1 : expr2</code>。一个语句通常包含一个或者多个表达式, 但是表达式不能只包含一个语句。</li><li>Dart工具可以报告两类问题: 警告和错误。警告只表示你的代码可能不工作, 但是不会阻止你的程序执行。错误分为编译时错误和运行时错误, 编译时错误会阻止代码运行, 当代码执行时一个运行时错误会导致抛出一个异常。</li></ul><h2 id="Dart中关键字"><a href="#Dart中关键字" class="headerlink" title="Dart中关键字"></a><font color=orange>Dart中关键字</font></h2><p>应该避免使用下面的关键字作为标示符。</p><table><tr><td> abstract </td><td> else </td><td> import </td><td> super </td></tr><tr><td> as </td><td> enum </td><td> in </td><td> switch </td></tr><tr><td> assert </td><td> export </td><td> interface </td><td> sync </td></tr><tr><td> async </td><td> entends </td><td> is </td><td> this </td></tr><tr><td> await </td><td> extension </td><td> library </td><td> throw </td></tr><tr><td> break </td><td> external </td><td> mixin </td><td> true </td></tr>    <tr><td> case </td><td> factory </td><td> new </td><td> try </td></tr><tr><td> catch </td><td> false </td><td> null </td><td> typedef </td></tr><tr><td> class </td><td> final </td><td> on </td><td> var </td></tr><tr><td> const </td><td> finally </td><td> operator </td><td> void </td></tr><tr><td> continue </td><td> for </td><td> part </td><td> while </td></tr><tr><td> covariant </td><td> Function </td><td> rethrow </td><td> with </td></tr><tr><td> default </td><td> get </td><td> return </td><td> yield </td></tr><tr><td> deferred </td><td> hide </td><td> set </td><td> </td></tr><tr><td> do </td><td> if </td><td> show </td><td> </td></tr><tr><td> dynamic </td><td>implements </td><td> static</td><td> </td></tr></table><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><font color=orange>变量</font></h2><p>你可以隐式的声明变量, Dart会自动类型推导, 你也可以显示的声明变量的类型, 此时变量的类型就不能再变化(继承关系的除外)。如果变量的类型需要变化, 那么你可以使用<code>Ojbect</code>或者<code>dynamic</code>来定义。</p><blockquote><p>var name1 = ‘Bob’;  //推荐</p><p>dynamic name2 = ‘Bob’;</p><p>Object name3 = ‘Bob’;</p><p>String name4 = “Bob”;</p></blockquote><h3 id="变量的默认值"><a href="#变量的默认值" class="headerlink" title="变量的默认值"></a><font color=orange>变量的默认值</font></h3><p>未初始化的变量默认值是<font color=red>null</font>, 甚至未初始化的数值类型默认值也是<font color=red>null</font>, 因为Dart中所有都是对象。</p><blockquote><p>int lineCount;</p><p>assert(lineCount == null);</p></blockquote><h3 id="final-和-const"><a href="#final-和-const" class="headerlink" title="final 和 const"></a><font color=orange>final 和 const</font></h3><p>如果你不希望改变一个变量, 那么使用<code>final</code>和<code>const</code>取代<code>var</code>修饰变量。一个<code>final</code>变量只可以赋值一次, 而<code>const</code>变量是一个编译时常量。</p><p>实例变量可以使用<code>final</code>修饰但是不能使用<code>const</code>修饰, <code>final</code>修饰的变量必须在构造函数体前被初始化, 如在声明的时候或作为构造器参数, 或者<code>initializer list</code>中。<code>const</code>修饰的变量只能是具体数值, 不能是函数的返回值。如果<code>const</code>修饰类中的变量, 则必须加上<code>static</code>关键字, 即<code>static const</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">num</span> x;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">num</span> y;</span><br><span class="line">  <span class="comment">// 声明的时候</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">num</span> z = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">num</span> distanceFromOrigin;</span><br><span class="line">  <span class="comment">//initializer list</span></span><br><span class="line">  Point(x, y)</span><br><span class="line">      : x = x,</span><br><span class="line">        y = y,</span><br><span class="line">        distanceFromOrigin = sqrt(x * x + y * y);</span><br><span class="line">&#125;</span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">  <span class="built_in">print</span>(p.distanceFromOrigin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a><font color=orange>内置类型</font></h2><h3 id="num"><a href="#num" class="headerlink" title=" num "></a><font color=orange> num </font></h3><p><code>int</code>和<code>double</code>都继承于<code>num</code>, <code>num</code>包含了一些基础的操作, 例如<code>+</code>、<code>-</code>、<code>*</code>和<code>/</code>, 同时你也会发现<code>abs()</code>、<code>floor()</code>、<code>ceil()</code>和<code>round()</code>等函数以及<code>isNaN</code>、<code>isEven</code>和<code>isOdd</code>等属性。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> hex = <span class="number">0xDEADBEEF</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">1.1</span>;</span><br><span class="line"><span class="keyword">var</span> exponents = <span class="number">1.42e5</span>;</span><br><span class="line"><span class="built_in">double</span> z = <span class="number">1</span>; <span class="comment">// 在Dart 2.1及以后</span></span><br></pre></td></tr></table></figure><ul><li>int<ul><li>整数值不超过64 bits, 这取决于平台。</li></ul></li><li>double<ul><li>double 是64 bits。</li><li>在Dart2.1及以后, 你也可以赋值int给double, 但是在Dart 2.1之前会报错。</li></ul></li><li>int、double和String的转换</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String -&gt; int</span></span><br><span class="line"><span class="keyword">var</span> one = <span class="built_in">int</span>.parse(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">assert</span>(one == <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// String -&gt; double</span></span><br><span class="line"><span class="keyword">var</span> onePointOne = <span class="built_in">double</span>.parse(<span class="string">&#x27;1.1&#x27;</span>);</span><br><span class="line"><span class="keyword">assert</span>(onePointOne == <span class="number">1.1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// int -&gt; String</span></span><br><span class="line"><span class="built_in">String</span> oneAsString = <span class="number">1.</span>toString();</span><br><span class="line"><span class="keyword">assert</span>(oneAsString == <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// double -&gt; String</span></span><br><span class="line"><span class="built_in">String</span> piAsString = <span class="number">3.14159</span>.toStringAsFixed(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">assert</span>(piAsString == <span class="string">&#x27;3.14&#x27;</span>);</span><br></pre></td></tr></table></figure><p>整型支持传统的位移操作, 比如左移(向左边移位右侧补0)<code>&lt;&lt;</code>、右移(向右移位左侧补0)<code>&gt;&gt;</code>、按位与(都为1结果为1, 否则为0)<code>&amp;</code>、按位或(都为0结果为0, 否则为1)<code>|</code>和按位异或(相同为1, 不相同为0)<code>^</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span>((<span class="number">3</span> &lt;&lt; <span class="number">1</span>) == <span class="number">6</span>); <span class="comment">// 0011 &lt;&lt; 1 == 0110</span></span><br><span class="line"><span class="keyword">assert</span>((<span class="number">3</span> &gt;&gt; <span class="number">1</span>) == <span class="number">1</span>); <span class="comment">// 0011 &gt;&gt; 1 == 0001</span></span><br><span class="line"><span class="keyword">assert</span>((<span class="number">3</span> | <span class="number">4</span>) == <span class="number">7</span>); <span class="comment">// 0011 | 0100 == 0111</span></span><br><span class="line"><span class="keyword">assert</span>((<span class="number">3</span> &amp; <span class="number">4</span>) == <span class="number">0</span>); <span class="comment">// 0011 &amp; 0100 == 0000</span></span><br><span class="line"><span class="keyword">assert</span>((<span class="number">3</span> ^ <span class="number">5</span>) == <span class="number">6</span>); <span class="comment">// 0011 &amp; 0101 == 0110</span></span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title=" String "></a><font color=orange> String </font></h3><p>Dart中string是一个UTF-16编码的字符串, 你可以使用单引号<code>&#39;</code>或者双引号<code>&quot;</code>创建字符串。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">&#x27;Single quotes work well for string literals.&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">&quot;Double quotes work just as well.&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="string">&#x27;It\&#x27;s easy to escape the string delimiter.&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="string">&quot;It&#x27;s even easier to use the other delimiter.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">&#x27;使用单引号创建字符串字面量。&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">&quot;双引号也可以用于创建字符串字面量。&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="string">&#x27;使用单引号创建字符串时可以使用斜杠来转义那些与单引号冲突的字符串：\&#x27;。&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="string">&quot;而在双引号中则不需要使用转义与单引号冲突的字符串：&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure><p>你可以在字符串中使用<code>$&#123;expression&#125;</code>将表达式的值放在字符串中。如果<code>expression</code>是一个变量标识, 那么你可以省略<code>&#123;&#125;</code>, 你可以使用对象的<code>toString()</code>方法获取相应的字符串对象。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;string interpolation&#x27;</span>;</span><br><span class="line"><span class="comment">/// <span class="language-markdown">== 如果两个字符串序列一样,那么会返回true</span></span></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27;Dart has <span class="subst">$s</span>, which is very handy.&#x27;</span> ==</span><br><span class="line">    <span class="string">&#x27;Dart has string interpolation, &#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;which is very handy.&#x27;</span>);</span><br><span class="line"><span class="keyword">assert</span>(<span class="string">&#x27;That deserves all caps. &#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;<span class="subst">$&#123;s.toUpperCase()&#125;</span> is very handy!&#x27;</span> ==</span><br><span class="line">    <span class="string">&#x27;That deserves all caps. &#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;STRING INTERPOLATION is very handy!&#x27;</span>);</span><br></pre></td></tr></table></figure><p>你也可以使用相邻字符串即使他们不在一行或者<code>+</code>来连接字符串。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">&#x27;String &#x27;</span></span><br><span class="line">    <span class="string">&#x27;concatenation&#x27;</span></span><br><span class="line">    <span class="string">&quot; works even over line breaks.&quot;</span>;</span><br><span class="line"><span class="keyword">assert</span>(s1 ==</span><br><span class="line">    <span class="string">&#x27;String concatenation works even over &#x27;</span></span><br><span class="line">        <span class="string">&#x27;line breaks.&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">&#x27;The + operator &#x27;</span> + <span class="string">&#x27;works, as well.&#x27;</span>;</span><br><span class="line"><span class="keyword">assert</span>(s2 == <span class="string">&#x27;The + operator works, as well.&#x27;</span>);</span><br></pre></td></tr></table></figure><p>另外一种创建多行字符串的方法是: 使用三个单引号<code>&#39;</code>或者三个双引号’”‘创建字符串。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">You can create</span></span><br><span class="line"><span class="string">multi-line strings like this one.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">&quot;&quot;&quot;This is also a</span></span><br><span class="line"><span class="string">multi-line string.&quot;&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><p>你可以在字符串前面加上<code>r</code>创建一个原始字符串。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">r&#x27;In a raw string, not even \n gets special treatment.&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="bool"><a href="#bool" class="headerlink" title=" bool "></a><font color=orange> bool </font></h3><p>Dart中布尔有<code>true</code>和<code>false</code>, 它们都是编译时常量。</p><p>Dart是类型安全的, 这意味着你不能使用<code>if (nonbooleanValue)</code>或者<code>assert (nonbooleanValue)</code>进行判断, 如果需要判断请使用下面的方式:<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Check for an empty string.</span></span><br><span class="line"><span class="keyword">var</span> fullName = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">assert</span>(fullName.isEmpty);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for zero.</span></span><br><span class="line"><span class="keyword">var</span> hitPoints = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">assert</span>(hitPoints &lt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for null.</span></span><br><span class="line"><span class="keyword">var</span> unicorn;</span><br><span class="line"><span class="keyword">assert</span>(unicorn == <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check for NaN.</span></span><br><span class="line"><span class="keyword">var</span> iMeantToDoThis = <span class="number">0</span> / <span class="number">0</span>;</span><br><span class="line"><span class="keyword">assert</span>(iMeantToDoThis.isNaN);</span><br></pre></td></tr></table></figure></p><h3 id="List"><a href="#List" class="headerlink" title=" List "></a><font color=orange> List </font></h3><p>大多数语言中叫<code>Collection</code>或者<code>Array</code>, 在Dart中类名是<code>List</code>。</p><ul><li>常用属性<ul><li>length: 长度</li><li>reversed: 反转</li><li>isEmpty: 是否为空</li><li>isNotEmpty: 是否为非空</li></ul></li><li>常用方法<ul><li>add(xxx): 添加元素</li><li>addAll(xxx): 从List里面添加所有元素</li><li>indexOf(xxx): 查找元素</li><li>remove(xxx): 删除元素</li><li>removeAt(xxx): 根据下标删除元素</li><li>fillRange(xxx): 修改</li><li>insert(index,value): 指定位置插入   </li><li>insertAll(index,list): 指定位置插入List</li><li>toList(xxx): 转为List</li><li>join(xxx): 转换成字符串</li><li>forEach: 循环</li><li>map</li><li>where</li><li>any</li><li>every</li></ul></li><li>相关其他类方法<ul><li>split(xxxx): 字符串转成List</li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">print</span>(list1.length);</span><br><span class="line"><span class="keyword">var</span> list2 = &lt;<span class="built_in">String</span>&gt;[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> constantList = <span class="keyword">const</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">constantList[<span class="number">0</span>] = <span class="number">5</span>;  <span class="comment">// 错误的</span></span><br><span class="line">constantList = [<span class="number">2</span>, <span class="number">3</span>]; <span class="comment">//正确 [2, 3]</span></span><br><span class="line">constantList[<span class="number">0</span>] = <span class="number">5</span>;  <span class="comment">// 再次修改正确 [5, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list2 = <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();</span><br></pre></td></tr></table></figure><p>Dart 2.3支持 <code>...</code>、<code>...?</code>操作符, 同时可以使用<code>collection if</code>和<code>collection for</code>构建集合。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> list2 = [<span class="number">0</span>, ...list1];  <span class="comment">//[0, 1, 2, 3]</span></span><br><span class="line"><span class="keyword">assert</span>(list2.length == <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list3;</span><br><span class="line"><span class="comment">// list为null时不会插入</span></span><br><span class="line"><span class="keyword">var</span> list4 = [<span class="number">0</span>, ...?list3]; <span class="comment">//[0]</span></span><br><span class="line"><span class="keyword">assert</span>(list4.length == <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断为true后再添加</span></span><br><span class="line"><span class="keyword">var</span> promoActive = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">var</span> nav = [</span><br><span class="line">  <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Furniture&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Plants&#x27;</span>,</span><br><span class="line">  <span class="keyword">if</span> (promoActive) <span class="string">&#x27;Outlet&#x27;</span></span><br><span class="line">];</span><br><span class="line"><span class="comment">// 将listOfInts修改后放入新集合</span></span><br><span class="line"><span class="keyword">var</span> listOfInts = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> listOfStrings = [</span><br><span class="line">  <span class="string">&#x27;#0&#x27;</span>,</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> listOfInts) <span class="string">&#x27;#<span class="subst">$i</span>&#x27;</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title=" Set "></a><font color=orange> Set </font></h3><p><code>Set</code>是一个无序不重复的集合。和List一样在Dart 2.3版本开始支持<code>...</code>、<code>...?</code>、<code>condiction if</code>和<code>condiction for</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> halogens = &#123;<span class="string">&#x27;fluorine&#x27;</span>, <span class="string">&#x27;chlorine&#x27;</span>, <span class="string">&#x27;bromine&#x27;</span>, <span class="string">&#x27;iodine&#x27;</span>, <span class="string">&#x27;astatine&#x27;</span>&#125;;</span><br><span class="line">halogens.add(<span class="string">&#x27;first&#x27;</span>);</span><br><span class="line"><span class="built_in">print</span>(halogens.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个空的set</span></span><br><span class="line"><span class="keyword">var</span> names = &lt;<span class="built_in">String</span>&gt;&#123;&#125;;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; names = &#123;&#125;;</span><br><span class="line"><span class="comment">//这创建的是map</span></span><br><span class="line"><span class="keyword">var</span> map = &#123;&#125;;</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title=" Map "></a><font color=orange> Map </font></h3><p>通常来说, Map包含key、value对, key是唯一的。往Map中设置key-value时, 存在key则是修改, 不存在key则是添加。当从Map中根据key取value时, 不存在的key会返回<font color=red>null</font>。和List一样在Dart 2.3版本开始支持<code>...</code>、<code>...?</code>、<code>condiction if</code>和<code>condiction for</code>。</p><ul><li>常用属性<ul><li>keys: 获取所有key的值</li><li>values: 获取所有value的值</li><li>isEmpty: 是否为空</li><li>isNotEmpty: 是否不为空</li></ul></li><li>常用方法<ul><li>remove(xxx): 删除指定key的数据</li><li>addAll(xxx): 合并</li><li>containsValue(xxx): 是否包含值</li><li>forEach: 循环</li><li>map</li><li>where</li><li>any</li><li>every</li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gifts = &#123;</span><br><span class="line">  <span class="comment">// Key:    Value</span></span><br><span class="line">  <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;partridge&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;second&#x27;</span>: <span class="string">&#x27;turtledoves&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;fifth&#x27;</span>: <span class="string">&#x27;golden rings&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">print</span>(gifts.length);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nobleGases = &#123;</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;helium&#x27;</span>,</span><br><span class="line">  <span class="number">10</span>: <span class="string">&#x27;neon&#x27;</span>,</span><br><span class="line">  <span class="number">18</span>: <span class="string">&#x27;argon&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span> person = &#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span>:<span class="number">20</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.forEach((key,value)&#123;            </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">$key</span>---<span class="subst">$value</span>&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果Map中不存在key, 那么取值时会返回<code>null</code>。</p><h3 id="runes"><a href="#runes" class="headerlink" title=" runes "></a><font color=orange> runes </font></h3><p>Dart中表示UTF-32编码的字符串。<br>通常的表达方式是<code>\uxxxx</code>, <code>xxxx</code>表示4位16进制数。特殊情下如果多于或少于4位16进制数使用<code>&#123;&#125;</code>括起来。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> heart = <span class="string">&#x27;\u2665&#x27;</span>;  <span class="comment">//♥</span></span><br><span class="line"><span class="keyword">var</span> laughing = <span class="string">&#x27;\u&#123;1f600&#125;&#x27;</span>; <span class="comment">//😆</span></span><br></pre></td></tr></table></figure><p>如果你需要读写单个 Unicode 字符，可以使用 characters 包中定义的 characters getter。它将返回 Characters 作为一系列 grapheme clusters 的字符串。下面是使用 characters API 的样例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:characters/characters.dart&#x27;</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> hi = <span class="string">&#x27;Hi 🇩🇰&#x27;</span>;</span><br><span class="line"><span class="built_in">print</span>(hi);</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The end of the string: <span class="subst">$&#123;hi.substring(hi.length - <span class="number">1</span>)&#125;</span>&#x27;</span>);</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The last character: <span class="subst">$&#123;hi.characters.last&#125;</span>\n&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="symbols"><a href="#symbols" class="headerlink" title=" symbols "></a><font color=orange> symbols </font></h3><p>一个Symbols对象是Dart项目中的一个操作符或者标示符。你可能无需使用symbols, 但是对于通过名称指向标识的APIs却是有价值的。<br>使用<code>#identifier</code>来使用一个标识的symbols。symbols是编译时常量。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#radix</span><br><span class="line">#bar</span><br></pre></td></tr></table></figure></p><h2 id="Functions"><a href="#Functions" class="headerlink" title=" Functions "></a><font color=orange> Functions </font></h2><p>在Dart中<code>Function</code>也是对象, 这意味着你可以赋值<code>Function</code>给变量或者作为参数传递给其他Function。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> isNoble(<span class="built_in">int</span> atomicNumber) &#123;</span><br><span class="line">  <span class="keyword">return</span> _nobleGases[atomicNumber] != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以省略返回值类型或形参类型, 该函数同样可以正常运行, 建议最好还是指定类型</span></span><br><span class="line">isNoble(atomicNumber) &#123;</span><br><span class="line">  <span class="keyword">return</span> _nobleGases[atomicNumber] != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如果函数只包含一个表达式, 那么可以使用<code>=&gt;</code>简写的语法。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> isNoble(<span class="built_in">int</span> atomicNumber) =&gt; _nobleGases[atomicNumber] != <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><br>一个Dart函数可以包括两种类型的参数: 必要参数(required)和可选参数(optional)。必要参数放在前面, 可选参数放在后面。可选命名参数可以使用<code>@required</code>修饰表示它是必须的。</p><h3 id="可选参数"><a href="#可选参数" class="headerlink" title=" 可选参数 "></a><font color=orange> 可选参数 </font></h3><p>可选参数可以是可选命名参数: <code>Optional named parameters</code>或者可选位置参数: <code>Optional positional parameters</code>, 在同一个函数中, 不能同时使用。</p><h4 id="命名参数"><a href="#命名参数" class="headerlink" title=" 命名参数 "></a><font color=orange> 命名参数 </font></h4><p>Dart中定义Funtion时使用<code>&#123;param1, param2, ...&#125;</code>来定义可选命名参数, 同时可以使用<code>@required</code>表示它是必须的。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> printValue(&#123;<span class="built_in">Object</span> value1, <span class="built_in">Object</span> value2&#125;) &#123;</span><br><span class="line">  <span class="keyword">if</span> (value1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="built_in">print</span>(value1.toString());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (value2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="built_in">print</span>(value2.toString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> heart = <span class="string">&#x27;\u2665&#x27;</span>; <span class="comment">//♥</span></span><br><span class="line">  <span class="keyword">var</span> laughing = <span class="string">&#x27;\u&#123;1f600&#125;&#x27;</span>; <span class="comment">//😆</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">//调用printValue时未使用@required参数都是可选的</span></span><br><span class="line">  printValue();</span><br><span class="line">  printValue(value1: heart);</span><br><span class="line">  printValue(value2: laughing);</span><br><span class="line">  printValue(value1: heart, value2: laughing);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用@required, 那么调用时必须要传入该参数</span></span><br><span class="line"><span class="keyword">const</span> Scrollbar(&#123;Key key, <span class="meta">@required</span> Widget child&#125;)</span><br></pre></td></tr></table></figure><h4 id="可选位置参数"><a href="#可选位置参数" class="headerlink" title=" 可选位置参数 "></a><font color=orange> 可选位置参数 </font></h4><p>Dart中定义Funtion时使用<code>[]</code>包裹住参数来定义可选位置参数。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> heart = <span class="string">&#x27;\u2665&#x27;</span>; <span class="comment">//♥</span></span><br><span class="line">  <span class="keyword">var</span> laughing = <span class="string">&#x27;\u&#123;1f600&#125;&#x27;</span>; <span class="comment">//😆</span></span><br><span class="line">  </span><br><span class="line">  printValue(heart);</span><br><span class="line">  printValue(heart, laughing);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> printValue(<span class="built_in">Object</span> value1, [<span class="built_in">Object</span> value2]) &#123;</span><br><span class="line">  <span class="built_in">print</span>(value1.toString());</span><br><span class="line">  <span class="keyword">if</span> (value2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(value2.toString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参数默认值"><a href="#参数默认值" class="headerlink" title=" 参数默认值 "></a><font color=orange> 参数默认值 </font></h4><p>Dart中定义函数使用<code>=</code>来给可选名称变量或者可选位置变量一个默认值, 该默认值必须是编译时常量, 如果没有默认值, 那么默认值是<font color=red>null</font>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> heart = <span class="string">&#x27;\u2665&#x27;</span>; <span class="comment">//♥</span></span><br><span class="line">  <span class="keyword">var</span> laughing = <span class="string">&#x27;\u&#123;1f600&#125;&#x27;</span>; <span class="comment">//😆</span></span><br><span class="line">  </span><br><span class="line">  printValue(heart);</span><br><span class="line">  printValue(heart, laughing);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> printValue(<span class="built_in">Object</span> value1, [<span class="built_in">Object</span> value2 = <span class="string">&quot;2&quot;</span>]) &#123;</span><br><span class="line">  <span class="built_in">print</span>(value1.toString());</span><br><span class="line">  <span class="keyword">if</span> (value2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="built_in">print</span>(value2.toString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-主函数"><a href="#main-主函数" class="headerlink" title=" main()主函数 "></a><font color=orange> main()主函数 </font></h3><p>每个App必须要有一个主函数<code>main()</code>, 返回值为<code>void</code>, 它有一个可选的<code>List&lt;String&gt;</code>类型的参数<code>arguments</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="comment">//code</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; arguments) &#123;</span><br><span class="line">  <span class="comment">//code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数作为参数传递"><a href="#函数作为参数传递" class="headerlink" title=" 函数作为参数传递 "></a><font color=orange> 函数作为参数传递 </font></h3><p>你可以把函数作为参数传递给另外一个函数。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> printElement(<span class="built_in">int</span> element) &#123;</span><br><span class="line">  <span class="built_in">print</span>(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">list.forEach(printElement);</span><br></pre></td></tr></table></figure><h4 id="函数定义为变量"><a href="#函数定义为变量" class="headerlink" title=" 函数定义为变量 "></a><font color=orange> 函数定义为变量 </font></h4><p>Dart执行将函数定义为一个变量。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> func = (<span class="built_in">int</span> element) =&gt; <span class="built_in">print</span>(element);</span><br><span class="line">  </span><br><span class="line">  func(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title=" 匿名函数 "></a><font color=orange> 匿名函数 </font></h3><p>匿名函数就是没有方法名的函数。<br>定义语法: </p><blockquote><p>   ([[Type] param1[, …]]) {<br>   &nbsp;&nbsp;codeBlock;<br>   };</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = [<span class="string">&#x27;apples&#x27;</span>, <span class="string">&#x27;bananas&#x27;</span>, <span class="string">&#x27;oranges&#x27;</span>];</span><br><span class="line">list.forEach((item) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$&#123;list.indexOf(item)&#125;</span>: <span class="subst">$item</span>&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title=" 作用域 "></a><font color=orange> 作用域 </font></h3><p>Dart中定义的非静态变量的作用域一般是它所在的<code>&#123;&#125;</code>内。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> topLevel = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> insideMain = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> myFunction() &#123;</span><br><span class="line">    <span class="keyword">var</span> insideFunction = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> nestedFunction() &#123;</span><br><span class="line">      <span class="keyword">var</span> insideNestedFunction = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">assert</span>(topLevel);</span><br><span class="line">      <span class="keyword">assert</span>(insideMain);</span><br><span class="line">      <span class="keyword">assert</span>(insideFunction);</span><br><span class="line">      <span class="keyword">assert</span>(insideNestedFunction);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title=" 闭包 "></a><font color=orange> 闭包 </font></h3><p>闭包是一个函数对象，它可以访问范围内的变量，甚至可以使用函数范围外的变量。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span> makeAdder(<span class="built_in">num</span> addBy) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">num</span> i) =&gt; addBy + i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="comment">// Create a function that adds 2.</span></span><br><span class="line">  <span class="keyword">var</span> add2 = makeAdder(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create a function that adds 4.</span></span><br><span class="line">  <span class="keyword">var</span> add4 = makeAdder(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">assert</span>(add2(<span class="number">3</span>) == <span class="number">5</span>);</span><br><span class="line">  <span class="keyword">assert</span>(add4(<span class="number">3</span>) == <span class="number">7</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dart中全局函数、静态方法以及实例方法"><a href="#Dart中全局函数、静态方法以及实例方法" class="headerlink" title=" Dart中全局函数、静态方法以及实例方法 "></a><font color=orange> Dart中全局函数、静态方法以及实例方法 </font></h3><p>函数的相等问题。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> foo() &#123;&#125; <span class="comment">// A top-level function</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> bar() &#123;&#125; <span class="comment">// A static method</span></span><br><span class="line">  <span class="keyword">void</span> baz() &#123;&#125; <span class="comment">// An instance method</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> x;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Comparing top-level functions.</span></span><br><span class="line">  x = foo;</span><br><span class="line">  <span class="keyword">assert</span>(foo == x); <span class="comment">//true</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">// Comparing static methods.</span></span><br><span class="line">  x = A.bar;</span><br><span class="line">  <span class="keyword">assert</span>(A.bar == x); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Comparing instance methods.</span></span><br><span class="line">  <span class="keyword">var</span> v = A(); <span class="comment">// Instance #1 of A</span></span><br><span class="line">  <span class="keyword">var</span> w = A(); <span class="comment">// Instance #2 of A</span></span><br><span class="line">  <span class="keyword">var</span> y = w;</span><br><span class="line">  x = w.baz;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// These closures refer to the same instance (#2),</span></span><br><span class="line">  <span class="comment">// so they&#x27;re equal.</span></span><br><span class="line">  <span class="keyword">assert</span>(y.baz == x); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// These closures refer to different instances,</span></span><br><span class="line">  <span class="comment">// so they&#x27;re unequal.</span></span><br><span class="line">  <span class="keyword">assert</span>(v.baz != w.baz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title=" 函数的返回值 "></a><font color=orange> 函数的返回值 </font></h3><p>所有的函数都有返回值, 没有显示返回语句的函数最后一行默认执行<font color=red>return null;</font>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(foo() == <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h2 id="Operators"><a href="#Operators" class="headerlink" title=" Operators "></a><font color=orange> Operators </font></h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title=" 算术运算符 "></a><font color=orange> 算术运算符 </font></h3><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>+</code></td><td style="text-align:center">加</td></tr><tr><td style="text-align:center"><code>-</code></td><td style="text-align:center">减</td></tr><tr><td style="text-align:center"><code>-expr</code></td><td style="text-align:center">表示负数</td></tr><tr><td style="text-align:center"><code>*</code></td><td style="text-align:center">乘</td></tr><tr><td style="text-align:center"><code>/</code></td><td style="text-align:center">除</td></tr><tr><td style="text-align:center"><code>~/</code></td><td style="text-align:center">除, 返回整数</td></tr><tr><td style="text-align:center"><code>%</code></td><td style="text-align:center">求余</td></tr><tr><td style="text-align:center"><code>++var</code></td><td style="text-align:center">自增, 表达式取<code>var+1</code>的值</td></tr><tr><td style="text-align:center"><code>var++</code></td><td style="text-align:center">自增, 表达式取<code>var</code>的值</td></tr><tr><td style="text-align:center"><code>--var</code></td><td style="text-align:center">自减, 表达式取<code>var-1</code>的值</td></tr><tr><td style="text-align:center"><code>var--</code></td><td style="text-align:center">自减, 表达式取<code>var</code>的值</td></tr></tbody></table><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title=" 关系运算符 "></a><font color=orange> 关系运算符 </font></h3><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>==</code></td><td style="text-align:center">等于, 特殊情况下两个对象完全相同可以使用<code>identical()</code>方法, 如果<code>==</code>两边都为<code>null</code>返回<code>true</code>, 如果两个有一个为<code>null</code>, 另一个不为<code>null</code>返回<code>false</code>。同样的你也可以重新<code>==</code>方法。</td></tr><tr><td style="text-align:center"><code>!=</code></td><td style="text-align:center">不等于</td></tr><tr><td style="text-align:center"><code>&gt;</code></td><td style="text-align:center">大于</td></tr><tr><td style="text-align:center"><code>&gt;=</code></td><td style="text-align:center">大于等于</td></tr><tr><td style="text-align:center"><code>&lt;</code></td><td style="text-align:center">小于</td></tr><tr><td style="text-align:center"><code>&lt;=</code></td><td style="text-align:center">小于等于</td></tr></tbody></table><h3 id="类型操作符"><a href="#类型操作符" class="headerlink" title=" 类型操作符 "></a><font color=orange> 类型操作符 </font></h3><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>as</code></td><td style="text-align:center">1、强制类型转换(可能会抛出异常) 2、库别名</td></tr><tr><td style="text-align:center"><code>is</code></td><td style="text-align:center">判断对象是某种类型</td></tr><tr><td style="text-align:center"><code>is!</code></td><td style="text-align:center">判断对象不是某种类型</td></tr></tbody></table><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (emp <span class="keyword">is</span> Person) &#123;</span><br><span class="line">  <span class="comment">// Type check</span></span><br><span class="line">  emp.firstName = <span class="string">&#x27;Bob&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果emp是null或者不是Person类型那么会抛出异常。</span></span><br><span class="line">(emp <span class="keyword">as</span> Person).firstName = <span class="string">&#x27;Bob&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="赋值操作符"><a href="#赋值操作符" class="headerlink" title=" 赋值操作符 "></a><font color=orange> 赋值操作符 </font></h3><table><thead><tr><th style="text-align:center">描述</th><th style="text-align:center">操作符</th></tr></thead><tbody><tr><td style="text-align:center"><code>=</code></td><td style="text-align:center">赋值</td></tr><tr><td style="text-align:center"><code>??=</code></td><td style="text-align:center"><code>a ??= b</code>, 如果a为null, 赋值b给a, 否则不赋值</td></tr><tr><td style="text-align:center"><code>–=</code></td><td style="text-align:center"><code>a -= b</code>等价于 <code>a = a - b</code></td></tr><tr><td style="text-align:center"><code>/=</code></td><td style="text-align:center"><code>a /= b</code>等价于 <code>a = a / b</code></td></tr><tr><td style="text-align:center"><code>%=</code></td><td style="text-align:center"><code>a %= b</code>等价于 <code>a = a % b</code></td></tr><tr><td style="text-align:center"><code>&gt;&gt;=</code></td><td style="text-align:center"><code>a &gt;&gt;= b</code>等价于 <code>a = a &gt;&gt; b</code></td></tr><tr><td style="text-align:center"><code>^=</code></td><td style="text-align:center"><code>a ^= b</code>等价于 <code>a = a ^ b</code></td></tr><tr><td style="text-align:center"><code>&amp;=</code></td><td style="text-align:center"><code>a &amp;= b</code>等价于 <code>a = a &amp; b</code></td></tr><tr><td style="text-align:center">&#124;=</td><td style="text-align:center">a &#124;= b等价于 a = a &#124; b</td></tr><tr><td style="text-align:center"><code>+=</code></td><td style="text-align:center"><code>a += b</code>等价于 <code>a = a + b</code></td></tr><tr><td style="text-align:center"><code>*=</code></td><td style="text-align:center"><code>a *= b</code>等价于 <code>a = a * b</code></td></tr><tr><td style="text-align:center"><code>~/=</code></td><td style="text-align:center"><code>a ~/= b</code>等价于 <code>a = a ~/ b</code></td></tr></tbody></table><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title=" 逻辑操作符 "></a><font color=orange> 逻辑操作符 </font></h3><table><thead><tr><th style="text-align:center">描述</th><th style="text-align:center">操作符</th></tr></thead><tbody><tr><td style="text-align:center"><code>!expr</code></td><td style="text-align:center">逻辑非</td></tr><tr><td style="text-align:center">&#124;&#124;</td><td style="text-align:center">逻辑或</td></tr><tr><td style="text-align:center"><code>&amp;&amp;</code></td><td style="text-align:center">逻辑与</td></tr></tbody></table><h3 id="位移操作符"><a href="#位移操作符" class="headerlink" title=" 位移操作符 "></a><font color=orange> 位移操作符 </font></h3><table><thead><tr><th style="text-align:center">描述</th><th style="text-align:center">操作符</th></tr></thead><tbody><tr><td style="text-align:center"><code>&amp;</code></td><td style="text-align:center">按位与</td></tr><tr><td style="text-align:center"><code>^</code></td><td style="text-align:center">按位异或</td></tr><tr><td style="text-align:center">&#124;</td><td style="text-align:center">按位或</td></tr><tr><td style="text-align:center"><code>~expr</code></td><td style="text-align:center">补位</td></tr><tr><td style="text-align:center"><code>&lt;&lt;</code></td><td style="text-align:center">左位移</td></tr><tr><td style="text-align:center"><code>&gt;&gt;</code></td><td style="text-align:center">右位移</td></tr></tbody></table><h3 id="条件操作符"><a href="#条件操作符" class="headerlink" title=" 条件操作符 "></a><font color=orange> 条件操作符 </font></h3><table><thead><tr><th style="text-align:center">描述</th><th style="text-align:center">操作符</th></tr></thead><tbody><tr><td style="text-align:center"><code>condition ? expr1 : expr2</code></td><td style="text-align:center">条件为true取值<code>expr1</code>, 否则取值<code>expr2</code></td></tr><tr><td style="text-align:center"><code>expr1 ?? expr2</code></td><td style="text-align:center">如果<code>expr1</code>不为null返回<code>expr1</code>, 否则返回<code>expr2</code></td></tr></tbody></table><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> playerName(<span class="built_in">String</span> name) =&gt; name ?? <span class="string">&#x27;Guest&#x27;</span>;</span><br><span class="line"><span class="comment">// Slightly longer version uses ?: operator.</span></span><br><span class="line"><span class="built_in">String</span> playerName(<span class="built_in">String</span> name) =&gt; name != <span class="keyword">null</span> ? name : <span class="string">&#x27;Guest&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Very long version uses if-else statement.</span></span><br><span class="line"><span class="built_in">String</span> playerName(<span class="built_in">String</span> name) &#123;</span><br><span class="line">  <span class="keyword">if</span> (name != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Guest&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="级联运算符"><a href="#级联运算符" class="headerlink" title=" 级联运算符 (..) "></a><font color=orange> 级联运算符 (..) </font></h3><p><code>Cascade(..)</code>允许你多次操作同一个对象, 你可以调用函数, 也可以访问属性。值得注意的是, 如果一个方法返回值为<code>void</code>的方法则不能使用级联运算符。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">querySelector</span>(<span class="string">&#x27;#confirm&#x27;</span>) <span class="comment">// Get an object.</span></span><br><span class="line">  ..text = <span class="string">&#x27;Confirm&#x27;</span> <span class="comment">// Use its members.</span></span><br><span class="line">  ..classes.add(<span class="string">&#x27;important&#x27;</span>)</span><br><span class="line">  ..onClick.listen((e) =&gt; <span class="built_in">window</span>.alert(<span class="string">&#x27;Confirmed!&#x27;</span>));</span><br></pre></td></tr></table></figure></p><h3 id="其他操作符"><a href="#其他操作符" class="headerlink" title=" 其他操作符 "></a><font color=orange> 其他操作符 </font></h3><table><thead><tr><th style="text-align:center">描述</th><th style="text-align:center">操作符</th></tr></thead><tbody><tr><td style="text-align:center"><code>()</code></td><td style="text-align:center">函数应用, 调用一个函数</td></tr><tr><td style="text-align:center"><code>[index]</code></td><td style="text-align:center">从List中根据下标取值</td></tr><tr><td style="text-align:center"><code>[key]</code></td><td style="text-align:center">从Map中根据key取值</td></tr><tr><td style="text-align:center"><code>.</code></td><td style="text-align:center">从对象中取属性值</td></tr><tr><td style="text-align:center"><code>?.</code></td><td style="text-align:center">从对象中取属性值, 如果对象为null那么取的值也为null</td></tr></tbody></table><h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title=" 流程控制语句 "></a><font color=orange> 流程控制语句 </font></h2><h3 id="if-else"><a href="#if-else" class="headerlink" title=" if-else "></a><font color=orange> if-else </font></h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isRaining()) &#123;</span><br><span class="line">  you.bringRainCoat();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (isSnowing()) &#123;</span><br><span class="line">  you.wearJacket();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  car.putTopDown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for"><a href="#for" class="headerlink" title=" for "></a><font color=orange> for </font></h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="built_in">StringBuffer</span>(<span class="string">&#x27;Dart is fun&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  message.write(<span class="string">&#x27;!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="捕获变量"><a href="#捕获变量" class="headerlink" title=" 捕获变量 "></a><font color=orange> 捕获变量 </font></h4><p>Dart中for循环中的闭包(匿名函数)可以捕捉下标。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> callbacks = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">    callbacks.add(() =&gt; <span class="built_in">print</span>(i));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(callbacks);</span><br><span class="line">  callbacks.forEach((c) =&gt; c());</span><br><span class="line">  callbacks[<span class="number">0</span>]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for-in"><a href="#for-in" class="headerlink" title=" for-in "></a><font color=orange> for-in </font></h4><p>Dart同样支持<code>for-in</code>: </p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> collection = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> collection) &#123;</span><br><span class="line">  <span class="built_in">print</span>(x); <span class="comment">// 0 1 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="while和-do-while"><a href="#while和-do-while" class="headerlink" title=" while和 do-while "></a><font color=orange> while和 do-while </font></h3><p>注意不要忘了do-while后的分号<code>;</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (!isDone()) &#123;</span><br><span class="line">  doSomething();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  printLine();</span><br><span class="line">&#125; <span class="keyword">while</span> (!atEndOfPage());</span><br></pre></td></tr></table></figure><h3 id="break和continue"><a href="#break和continue" class="headerlink" title=" break和continue "></a><font color=orange> break和continue </font></h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (shutDownRequested()) <span class="keyword">break</span>;</span><br><span class="line">  processIncomingRequests();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; candidates.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> candidate = candidates[i];</span><br><span class="line">  <span class="keyword">if</span> (candidate.yearsExperience &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  candidate.interview();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Switch-和-case"><a href="#Switch-和-case" class="headerlink" title=" Switch 和 case "></a><font color=orange> Switch 和 case </font></h3><p><code>Switch</code> 语句在 Dart 中使用 <code>==</code>来比较整数、字符串或编译时常量，比较的两个对象必须是同一个类型且不能是子类并且没有重写 <code>==</code> 操作符。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> command = <span class="string">&#x27;OPEN&#x27;</span>;</span><br><span class="line"><span class="keyword">switch</span> (command) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;CLOSED&#x27;</span>:</span><br><span class="line">    executeClosed();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;PENDING&#x27;</span>:</span><br><span class="line">    executePending();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;APPROVED&#x27;</span>:</span><br><span class="line">    executeApproved();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;DENIED&#x27;</span>:</span><br><span class="line">    executeDenied();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;OPEN&#x27;</span>:</span><br><span class="line">    executeOpen();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    executeUnknown();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//空case 继续执行</span></span><br><span class="line"><span class="keyword">var</span> command = <span class="string">&#x27;CLOSED&#x27;</span>;</span><br><span class="line"><span class="keyword">switch</span> (command) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;CLOSED&#x27;</span>: <span class="comment">// Empty case falls through.</span></span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;NOW_CLOSED&#x27;</span>:</span><br><span class="line">    <span class="comment">// Runs for both CLOSED and NOW_CLOSED.</span></span><br><span class="line">    executeNowClosed();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非空case 使用continue和label继续执行</span></span><br><span class="line"><span class="keyword">var</span> command = <span class="string">&#x27;CLOSED&#x27;</span>;</span><br><span class="line"><span class="keyword">switch</span> (command) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;CLOSED&#x27;</span>:</span><br><span class="line">    executeClosed();</span><br><span class="line">    <span class="keyword">continue</span> nowClosed;</span><br><span class="line">  <span class="comment">// Continues executing at the nowClosed label.</span></span><br><span class="line"></span><br><span class="line">  nowClosed:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;NOW_CLOSED&#x27;</span>:</span><br><span class="line">    <span class="comment">// Runs for both CLOSED and NOW_CLOSED.</span></span><br><span class="line">    executeNowClosed();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="断言Assert"><a href="#断言Assert" class="headerlink" title=" 断言Assert "></a><font color=orange> 断言Assert </font></h3><p>在开发中你可以使用<code>assert(condition, optionalMessage);</code>, 当condition为false时, 会打断语句的执行。<code>Debug</code>模式会执行, release生产环境不会执行。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span>(urlString.startsWith(<span class="string">&#x27;https&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(urlString.startsWith(<span class="string">&#x27;https&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;URL (<span class="subst">$urlString</span>) should start with &quot;https&quot;.&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="异常Exceptions"><a href="#异常Exceptions" class="headerlink" title=" 异常Exceptions "></a><font color=orange> 异常Exceptions </font></h2><p>Dart可以<code>thorw</code>和<code>catch</code>异常, 异常如果没有<code>catch</code>, 那么有可能会导致应用程序终止。<br>Dart中所有的异常都是<code>unchecked exceptions</code>, 方法不一定会声明其所抛出的异常并且你也不会被要求捕获任何异常。</p><h3 id="throw"><a href="#throw" class="headerlink" title=" throw "></a><font color=orange> throw </font></h3><p>Dart中你可以把任何非null对象作为异常抛出, 注意: 生产环境一般抛出<code>Error</code>或<code>Exception</code>类型的异常。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> FormatException(<span class="string">&#x27;Expected at least 1 section&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> <span class="string">&#x27;Out of llamas!&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="Catch"><a href="#Catch" class="headerlink" title=" Catch "></a><font color=orange> Catch </font></h3><p>捕捉或捕获异常, 阻止异常传播(当然你也可以重新抛出异常)。<br>当你需要知道异常类型时你可以使用<code>on</code>, 当你需要使用异常对象时, 你可以使用<code>catch</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  breedMoreLlamas();</span><br><span class="line">&#125; <span class="keyword">on</span> OutOfLlamasException &#123;</span><br><span class="line">  <span class="comment">// A specific exception</span></span><br><span class="line">  buyMoreLlamas();</span><br><span class="line">&#125; <span class="keyword">on</span> Exception <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// Anything else that is an exception</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Unknown exception: <span class="subst">$e</span>&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// No specified type, handles all</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Something really unknown: <span class="subst">$e</span>&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Catch的参数"><a href="#Catch的参数" class="headerlink" title=" Catch的参数 "></a><font color=orange> Catch的参数 </font></h4><p>catch可以有一个或者两个参数, 第一个参数是异常对象, 第二个参数是堆栈信息。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">&#125; <span class="keyword">on</span> Exception <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Exception details:\n <span class="subst">$e</span>&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e, s) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Exception details:\n <span class="subst">$e</span>&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Stack trace:\n <span class="subst">$s</span>&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="rethrow"><a href="#rethrow" class="headerlink" title=" rethrow "></a><font color=orange> rethrow </font></h4><p>你也可以使用<code>rethrow</code>重新抛出该异常。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> misbehave() &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">dynamic</span> foo = <span class="keyword">true</span>;</span><br><span class="line">    <span class="built_in">print</span>(foo++); <span class="comment">// Runtime error</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;misbehave() partially handled <span class="subst">$&#123;e.runtimeType&#125;</span>.&#x27;</span>);</span><br><span class="line">    <span class="keyword">rethrow</span>; <span class="comment">// Allow callers to see the exception.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    misbehave();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;main() finished handling <span class="subst">$&#123;e.runtimeType&#125;</span>.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Finally"><a href="#Finally" class="headerlink" title=" Finally "></a><font color=orange> Finally </font></h3><p>不管有没有异常最后都会执行<code>finally</code>中语句。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  breedMoreLlamas();</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Error: <span class="subst">$e</span>&#x27;</span>); <span class="comment">// Handle the exception first.</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  cleanLlamaStalls(); <span class="comment">// Then clean up.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title=" 类 "></a><font color=orange> 类 </font></h2><p>Dart中所有对象都一个类的实例, 他们都继承于<code>Object</code>类。<code>Object</code>类是所有类(除了Object类本身)的超类。</p><h3 id="使用对象中属性、方法"><a href="#使用对象中属性、方法" class="headerlink" title=" 使用对象中属性、方法 "></a><font color=orange> 使用对象中属性、方法 </font></h3><p>使用<code>.</code>或者<code>?.</code>来访问对象中的实例属性或者方法。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = Point(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the value of the instance variable y.</span></span><br><span class="line">p.y = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the value of y.</span></span><br><span class="line"><span class="keyword">assert</span>(p.y == <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoke distanceTo() on p.</span></span><br><span class="line"><span class="built_in">num</span> distance = p.distanceTo(Point(<span class="number">4</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// If p is non-null, set its y value to 4.</span></span><br><span class="line">p?.y = <span class="number">4</span>;</span><br></pre></td></tr></table></figure><h3 id="使用构造函数"><a href="#使用构造函数" class="headerlink" title=" 使用构造函数 "></a><font color=orange> 使用构造函数 </font></h3><p>从Dart 2开始, <code>new</code>是可选的。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = Point(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = Point.fromJson(&#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Point.fromJson(&#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>&#125;);</span><br></pre></td></tr></table></figure><p>一些类提供常量构造函数, 在构造函数签使用<code>const</code>关键字来创建编译时常量。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">const</span> ImmutablePoint(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">const</span> ImmutablePoint(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(identical(a, b)); <span class="comment">// They are the same instance!</span></span><br></pre></td></tr></table></figure><h3 id="对象的类型"><a href="#对象的类型" class="headerlink" title=" 对象的类型 "></a><font color=orange> 对象的类型 </font></h3><p>获取一个对象的运行时类型使用对象的<code>runtimeType</code>属性。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The type of a is <span class="subst">$&#123;a.runtimeType&#125;</span>&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="实例变量"><a href="#实例变量" class="headerlink" title=" 实例变量 "></a><font color=orange> 实例变量 </font></h3><p>所有未初始化的实例变量都是null。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> x; <span class="comment">// Declare instance variable x, initially null.</span></span><br><span class="line">  <span class="built_in">num</span> y; <span class="comment">// Declare y, initially null.</span></span><br><span class="line">  <span class="built_in">num</span> z = <span class="number">0</span>; <span class="comment">// Declare z, initially 0.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有实例变量隐式生成getter方法, 一个非<code>final</code>的实例变量默认还会隐式生成setter方法。</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title=" 构造函数 "></a><font color=orange> 构造函数 </font></h3><p>创建一个类名相同的函数(额外的标识符是可选的), 声明一个构造函数。<br><code>this</code>关键字表示当前对象。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> x, y;</span><br><span class="line"></span><br><span class="line">  Point(<span class="built_in">num</span> x, <span class="built_in">num</span> y) &#123;</span><br><span class="line">    <span class="comment">// There&#x27;s a better way to do this, stay tuned.</span></span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以使用语法糖来进行快速创建构造函数。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> x, y;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在构造函数体执行前用于设置 x 和 y 的语法糖.</span></span><br><span class="line">  Point(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title=" 默认构造函数 "></a><font color=orange> 默认构造函数 </font></h4><p>如果你没有声明构造函数，那么 Dart 会自动生成一个无参数的构造函数并且该构造函数会调用其父类的无参数构造方法。如果存在有参数的构造函数, 那么就不会有默认的无参构造函数。</p><h4 id="构造函数不能继承"><a href="#构造函数不能继承" class="headerlink" title=" 构造函数不能继承 "></a><font color=orange> 构造函数不能继承 </font></h4><p>构造函数是不能继承的, 这意味着假如在父类中定义了一个命名构造函数, 如果你想在子类中同样有相同名称的命名构造函数, 那么你实现该命名构造函数。</p><h4 id="命名构造函数"><a href="#命名构造函数" class="headerlink" title=" 命名构造函数 "></a><font color=orange> 命名构造函数 </font></h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> x, y;</span><br><span class="line"></span><br><span class="line">  Point(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Named constructor</span></span><br><span class="line">  Point.origin() &#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    y = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类定义构造函数时默认先调用父类的构造函数, 当父类没有无参的构造函数时, 你必须手动调用父类有参构造函数之一。<br>你需要使用<code>冒号(:)</code>在构造函数体前面。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> firstName;</span><br><span class="line"></span><br><span class="line">  Person.fromJson(<span class="built_in">Map</span> data) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;in Person&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Person does not have a default constructor;</span></span><br><span class="line">  <span class="comment">// you must call super.fromJson(data).</span></span><br><span class="line">  Employee.fromJson(<span class="built_in">Map</span> data) : <span class="keyword">super</span>.fromJson(data) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;in Employee&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="初始化器列表"><a href="#初始化器列表" class="headerlink" title=" 初始化器列表 "></a><font color=orange> 初始化器列表 </font></h4><p>除了调用父类构造函数, 你还有使用初始化器列表初始化变量在构造函数体执行之前。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> x, y;</span><br><span class="line">  <span class="comment">// Initializer list sets instance variables before</span></span><br><span class="line">  <span class="comment">// the constructor body runs.</span></span><br><span class="line">  Point.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">num</span>&gt; json)</span><br><span class="line">      : x = json[<span class="string">&#x27;x&#x27;</span>],</span><br><span class="line">        y = json[<span class="string">&#x27;y&#x27;</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;In Point.fromJson(): (<span class="subst">$x</span>, <span class="subst">$y</span>)&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">num</span> x;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">num</span> y;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">num</span> distanceFromOrigin;</span><br><span class="line"></span><br><span class="line">  Point(x, y)</span><br><span class="line">      : x = x,</span><br><span class="line">        y = y,</span><br><span class="line">        distanceFromOrigin = sqrt(x * x + y * y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">  <span class="built_in">print</span>(p.distanceFromOrigin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重定向构造函数"><a href="#重定向构造函数" class="headerlink" title=" 重定向构造函数 "></a><font color=orange> 重定向构造函数 </font></h4><p>当一个类中有多个构造函数, 其他构造函数可以调用当前类的其他构造函数。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> x, y;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The main constructor for this class.</span></span><br><span class="line">  Point(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Delegates to the main constructor.</span></span><br><span class="line">  Point.alongXAxis(<span class="built_in">num</span> x) : <span class="keyword">this</span>(x, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="常量构造函数"><a href="#常量构造函数" class="headerlink" title=" 常量构造函数 "></a><font color=orange> 常量构造函数 </font></h4><p>如果你生成的对象永远不会变化, 你可以使这些对象编译时常量。你只需定义一个<code>const</code>构造函数, 然后设置所有实例变量<code>final</code>。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImmutablePoint</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> ImmutablePoint origin =</span><br><span class="line">      <span class="keyword">const</span> ImmutablePoint(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">num</span> x, y;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ImmutablePoint(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="工厂构造函数"><a href="#工厂构造函数" class="headerlink" title=" 工厂构造函数 "></a><font color=orange> 工厂构造函数 </font></h4><p>使用<code>factory</code>关键字定义工厂构造函数时, 并不需要一直创建新的实例对象。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">bool</span> mute = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// _cache is library-private, thanks to</span></span><br><span class="line">  <span class="comment">// the _ in front of its name.</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Logger&gt; _cache =</span><br><span class="line">      &lt;<span class="built_in">String</span>, Logger&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> Logger(<span class="built_in">String</span> name) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_cache.containsKey(name)) &#123;</span><br><span class="line">      <span class="keyword">return</span> _cache[name];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> logger = Logger._internal(name);</span><br><span class="line">      _cache[name] = logger;</span><br><span class="line">      <span class="keyword">return</span> logger;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Logger._internal(<span class="keyword">this</span>.name);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> log(<span class="built_in">String</span> msg) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mute) <span class="built_in">print</span>(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title=" 方法 "></a><font color=orange> 方法 </font></h3><p>方法是函数提供一个对象的行为。</p><h4 id="实例方法"><a href="#实例方法" class="headerlink" title=" 实例方法 "></a><font color=orange> 实例方法 </font></h4><p>实例方法可以访问实例变量和实例方法。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> x, y;</span><br><span class="line"></span><br><span class="line">  Point(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">num</span> distanceTo(Point other) &#123;</span><br><span class="line">    <span class="keyword">var</span> dx = x - other.x;</span><br><span class="line">    <span class="keyword">var</span> dy = y - other.y;</span><br><span class="line">    <span class="keyword">return</span> sqrt(dx * dx + dy * dy);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Setter和Getter方法"><a href="#Setter和Getter方法" class="headerlink" title=" Setter和Getter方法"></a><font color=orange> Setter和Getter方法</font></h4><p>Setter和Getter方法, 每个实例变量都会有一个隐式Getter方法, 根据实际情况生成隐式Setter方法, 当然也可以使用关键字<code>set</code>和<code>get</code>自己实现Getter和Setter方法。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> left, top, width, height;</span><br><span class="line"></span><br><span class="line">  Rectangle(<span class="keyword">this</span>.left, <span class="keyword">this</span>.top, <span class="keyword">this</span>.width, <span class="keyword">this</span>.height);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Define two calculated properties: right and bottom.</span></span><br><span class="line">  <span class="built_in">num</span> <span class="keyword">get</span> right =&gt; left + width;</span><br><span class="line">  <span class="keyword">set</span> right(<span class="built_in">num</span> value) =&gt; left = value - width;</span><br><span class="line">  <span class="built_in">num</span> <span class="keyword">get</span> bottom =&gt; top + height;</span><br><span class="line">  <span class="keyword">set</span> bottom(<span class="built_in">num</span> value) =&gt; top = value - height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> rect = Rectangle(<span class="number">3</span>, <span class="number">4</span>, <span class="number">20</span>, <span class="number">15</span>);</span><br><span class="line">  <span class="keyword">assert</span>(rect.left == <span class="number">3</span>);</span><br><span class="line">  rect.right = <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">assert</span>(rect.left == <span class="number">-8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title=" 抽象方法"></a><font color=orange> 抽象方法</font></h4><p>实例变量、Getter、Setter都可以是抽象的, 抽象方法只能存在于抽象类中。抽象方法一般交给子类实现。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Doer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Define instance variables and methods...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> doSomething(); <span class="comment">// Define an abstract method.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EffectiveDoer</span> <span class="keyword">extends</span> <span class="title">Doer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> doSomething() &#123;</span><br><span class="line">    <span class="comment">// Provide an implementation, so the method is not abstract here...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title=" 抽象类 "></a><font color=orange> 抽象类 </font></h3><p>使用关键字<code>abstract</code>定义抽象类, 它一般用于定义接口。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractContainer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Define constructors, fields, methods...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> updateChildren(); <span class="comment">// Abstract method.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="隐式接口"><a href="#隐式接口" class="headerlink" title=" 隐式接口 "></a><font color=orange> 隐式接口 </font></h3><p>每一个类都隐式地定义了一个接口并实现了该接口，这个接口包含所有这个类的实例成员以及这个类所实现的其它接口。如果想要创建一个 A 类支持调用 B 类的 API 且不想继承 B 类，则可以实现 B 类的接口。</p><p>一个类可以通过关键字 <code>implements</code> 来实现一个或多个接口并实现每个接口定义的 API：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A person. The implicit interface contains greet().</span></span><br><span class="line"><span class="comment">// Person 类的隐式接口中包含 greet() 方法。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// _name 变量同样包含在接口中，但它只是库内可见的。</span></span><br><span class="line">  <span class="keyword">final</span> _name;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造函数不在接口中。</span></span><br><span class="line">  Person(<span class="keyword">this</span>._name);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// greet() 方法在接口中。</span></span><br><span class="line">  <span class="built_in">String</span> greet(<span class="built_in">String</span> who) =&gt; <span class="string">&#x27;你好，<span class="subst">$who</span>。我是<span class="subst">$_name</span>。&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Person 接口的一个实现。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Impostor</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">get</span> _name =&gt; <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> greet(<span class="built_in">String</span> who) =&gt; <span class="string">&#x27;你好<span class="subst">$who</span>。你知道我是谁吗？&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> greetBob(Person person) =&gt; person.greet(<span class="string">&#x27;小芳&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(greetBob(Person(<span class="string">&#x27;小芸&#x27;</span>)));</span><br><span class="line">  <span class="built_in">print</span>(greetBob(Impostor()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现多个接口时:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> <span class="keyword">implements</span> <span class="title">Comparable</span>, <span class="title">Location</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="继承类"><a href="#继承类" class="headerlink" title=" 继承类 "></a><font color=orange> 继承类 </font></h3><p>使用关键字<code>extends</code>来创建子类, <code>super</code>指向它的父类。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Television</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> turnOn() &#123;</span><br><span class="line">    _illuminateDisplay();</span><br><span class="line">    _activateIrSensor();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartTelevision</span> <span class="keyword">extends</span> <span class="title">Television</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> turnOn() &#123;</span><br><span class="line">    <span class="keyword">super</span>.turnOn();</span><br><span class="line">    _bootNetworkInterface();</span><br><span class="line">    _initializeMemory();</span><br><span class="line">    _upgradeApps();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重写方法"><a href="#重写方法" class="headerlink" title=" 重写方法 "></a><font color=orange> 重写方法 </font></h4><p>使用<code>@override</code>注解重写方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartTelevision</span> <span class="keyword">extends</span> <span class="title">Television</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> turnOn() &#123;...&#125;</span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重写操作符"><a href="#重写操作符" class="headerlink" title=" 重写操作符 "></a><font color=orange> 重写操作符 </font></h4><p>重写<code>operators</code>, 下面的操作符都是可以重写的</p><table><tr><td> &lt; </td><td> + </td><td> | </td><td> [] </td></tr><tr><td> &gt; </td><td> / </td><td> ^ </td><td> []= </td></tr><tr><td> &lt;= </td><td> ~/ </td><td> &amp; </td><td> ~ </td></tr><tr><td> &gt;= </td><td> * </td><td> &lt;&lt; </td><td> == </td></tr><tr><td> – </td><td> % </td><td> &gt;&gt; </td><td> </td></tr></table><p><code>!=</code>是不能重写的, 它只是相当于<code>!(expr1 ==expr2)</code>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> x, y;</span><br><span class="line"></span><br><span class="line">  Vector(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line"></span><br><span class="line">  Vector <span class="keyword">operator</span> +(Vector v) =&gt; Vector(x + v.x, y + v.y);</span><br><span class="line">  Vector <span class="keyword">operator</span> -(Vector v) =&gt; Vector(x - v.x, y - v.y);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Operator == and hashCode not shown. For details, see note below.</span></span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">final</span> v = Vector(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">final</span> w = Vector(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">assert</span>(v + w == Vector(<span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">  <span class="keyword">assert</span>(v - w == Vector(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你重写了<code>==</code>操作符, 你同时需要重写<code>hashCode</code>方法: </p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> firstName, lastName;</span><br><span class="line"></span><br><span class="line">  Person(<span class="keyword">this</span>.firstName, <span class="keyword">this</span>.lastName);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Override hashCode using strategy from Effective Java,</span></span><br><span class="line">  <span class="comment">// Chapter 11.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">int</span> <span class="keyword">get</span> hashCode &#123;</span><br><span class="line">    <span class="built_in">int</span> result = <span class="number">17</span>;</span><br><span class="line">    result = <span class="number">37</span> * result + firstName.hashCode;</span><br><span class="line">    result = <span class="number">37</span> * result + lastName.hashCode;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// You should generally implement operator == if you</span></span><br><span class="line">  <span class="comment">// override hashCode.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">operator</span> ==(<span class="built_in">dynamic</span> other) &#123;</span><br><span class="line">    <span class="keyword">if</span> (other <span class="keyword">is</span>! Person) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Person person = other;</span><br><span class="line">    <span class="keyword">return</span> (person.firstName == firstName &amp;&amp;</span><br><span class="line">        person.lastName == lastName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> p1 = Person(<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> p2 = Person(<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Smith&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> p3 = <span class="string">&#x27;not a person&#x27;</span>;</span><br><span class="line">  <span class="keyword">assert</span>(p1.hashCode == p2.hashCode);</span><br><span class="line">  <span class="keyword">assert</span>(p1 == p2);</span><br><span class="line">  <span class="keyword">assert</span>(p1 != p3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="noSuchMethod"><a href="#noSuchMethod" class="headerlink" title=" noSuchMethod() "></a><font color=orange> noSuchMethod() </font></h4><p>当你调用了一个对象的不存在的实例变量或者方法时, 重写<code>noSuchMethod</code>即可检测到。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Unless you override noSuchMethod, using a</span></span><br><span class="line">  <span class="comment">// non-existent member results in a NoSuchMethodError.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> noSuchMethod(Invocation invocation) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;You tried to use a non-existent member: &#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;<span class="subst">$&#123;invocation.memberName&#125;</span>&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般情况下, 你无法调用未实现的类, 除非下面几种情况:<br>1、调用者静态类型是<code>dynamic</code><br>2、调用者类型是静态的, 但是定义了未实现的方法(如抽象类), 同时实现了<code>noSuchMethod()</code>方法, 并且和<code>Object</code>中的不一样。</p><h4 id="Extension"><a href="#Extension" class="headerlink" title=" Extension "></a><font color=orange> Extension </font></h4><p>使用<code>extension</code>关键字可以定义方法、getter、setter和operator等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">extension NumberParsing on String &#123;</span><br><span class="line">  int parseInt() &#123;</span><br><span class="line">    return int.parse(this);</span><br><span class="line">  &#125;</span><br><span class="line">  double parseDouble() &#123;</span><br><span class="line">    return double.parse(this);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title=" 枚举类型 "></a><font color=orange> 枚举类型 </font></h3><p>使用<code>enum</code>关键字定义枚举, 枚举中的值有一个<code>index</code>的getter属性, 该属性返回该枚举值的从<code>0</code>开始的位置。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123; red, green, blue &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(Color.red.index == <span class="number">0</span>);</span><br><span class="line"><span class="keyword">assert</span>(Color.green.index == <span class="number">1</span>);</span><br><span class="line"><span class="keyword">assert</span>(Color.blue.index == <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>获取所有枚举值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Color&gt; colors = Color.values;</span><br><span class="line">assert(colors[2] == Color.blue);</span><br></pre></td></tr></table></figure><p>在<code>switch</code>中可以使用枚举值:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aColor = Color.blue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (aColor) &#123;</span><br><span class="line">  <span class="keyword">case</span> Color.red:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Red as roses!&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> Color.green:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Green as grass!&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>: <span class="comment">// Without this, you see a WARNING.</span></span><br><span class="line">    <span class="built_in">print</span>(aColor); <span class="comment">// &#x27;Color.blue&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="混入-mixin"><a href="#混入-mixin" class="headerlink" title=" 混入(mixin) "></a><font color=orange> 混入(mixin) </font></h3><p>它是一种可以在多个类中重复使用另外同一个类代码的方式。使用关键字<code>with</code>跟随一个或多个<code>mixin</code>名称, 使用<code>mixin</code>定义mixins, 并且可以使用关键字<code>on</code>来指定哪些类可以使用该Mixin类。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mixin</span> Musical <span class="keyword">on</span> Musician &#123;</span><br><span class="line">  <span class="built_in">bool</span> canPlayPiano = <span class="keyword">false</span>;</span><br><span class="line">  <span class="built_in">bool</span> canCompose = <span class="keyword">false</span>;</span><br><span class="line">  <span class="built_in">bool</span> canConduct = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> entertainMe() &#123;</span><br><span class="line">    <span class="keyword">if</span> (canPlayPiano) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;Playing piano&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (canConduct) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;Waving hands&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;Humming to self&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Musician</span> <span class="keyword">extends</span> <span class="title">Performer</span> <span class="title">with</span> <span class="title">Musical</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Maestro</span> <span class="keyword">extends</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">    <span class="title">with</span> <span class="title">Musical</span>, <span class="title">Aggressive</span>, <span class="title">Demented</span> </span>&#123;</span><br><span class="line">  Maestro(<span class="built_in">String</span> maestroName) &#123;</span><br><span class="line">    name = maestroName;</span><br><span class="line">    canConduct = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态变量和静态方法"><a href="#静态变量和静态方法" class="headerlink" title=" 静态变量和静态方法"></a><font color=orange> 静态变量和静态方法</font></h3><p>使用<code>static</code>来定义静态变量和静态方法, 静态变量只有在使用的时候才会初始化一次, 它是编译时常量。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> initialCapacity = <span class="number">16</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> printCapacity() &#123;</span><br><span class="line">  <span class="comment">// ···</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">assert</span>(Queue.initialCapacity == <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="泛型"><a href="#泛型" class="headerlink" title=" 泛型 "></a><font color=orange> 泛型 </font></h2><p>如果你看的API文档基本类型List,你会发现实际上是Lit<E>类型。&lt;…&gt;符号标志着作为一个通用的列表(或参数化), 一个有正式类型的参数。按照惯例,大多数类型变量单字母的名字,如E T, S、K、V。<br>当你使用了泛型List, 你就不能添加其他类型的对象到List中。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">names.addAll([<span class="string">&#x27;Seth&#x27;</span>, <span class="string">&#x27;Kathy&#x27;</span>, <span class="string">&#x27;Lars&#x27;</span>]);</span><br><span class="line">names.add(<span class="number">42</span>); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure></p><p>使用泛型可以减少重复代码<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Cache</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  T getByKey(<span class="built_in">String</span> key);</span><br><span class="line">  <span class="keyword">void</span> setByKey(<span class="built_in">String</span> key, T value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="集合字面量"><a href="#集合字面量" class="headerlink" title=" 集合字面量 "></a><font color=orange> 集合字面量 </font></h3><p>List、Set使用<code>&lt;type&gt;</code>, Map使用<code>&lt;Type, Type&gt;</code>字面量定义泛型集合。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = &lt;<span class="built_in">String</span>&gt;[<span class="string">&#x27;Seth&#x27;</span>, <span class="string">&#x27;Kathy&#x27;</span>, <span class="string">&#x27;Lars&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> uniqueNames = &lt;<span class="built_in">String</span>&gt;&#123;<span class="string">&#x27;Seth&#x27;</span>, <span class="string">&#x27;Kathy&#x27;</span>, <span class="string">&#x27;Lars&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> pages = &lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;&#123;</span><br><span class="line">  <span class="string">&#x27;index.html&#x27;</span>: <span class="string">&#x27;Homepage&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;robots.txt&#x27;</span>: <span class="string">&#x27;Hints for web robots&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;humans.txt&#x27;</span>: <span class="string">&#x27;We are people, not machines&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="使用构造函数创建泛型集合"><a href="#使用构造函数创建泛型集合" class="headerlink" title=" 使用构造函数创建泛型集合 "></a><font color=orange> 使用构造函数创建泛型集合 </font></h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">set</span> = <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line"><span class="keyword">var</span> map = <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;();</span><br></pre></td></tr></table></figure><h3 id="泛型集合的类型"><a href="#泛型集合的类型" class="headerlink" title=" 泛型集合的类型 "></a><font color=orange> 泛型集合的类型 </font></h3><p>Dart中泛型的类型是具体化的, 这意味着运行时你可以判断该类型, 在Java中你无法判断。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">names.addAll([<span class="string">&#x27;Seth&#x27;</span>, <span class="string">&#x27;Kathy&#x27;</span>, <span class="string">&#x27;Lars&#x27;</span>]);</span><br><span class="line"><span class="built_in">print</span>(names <span class="keyword">is</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h3 id="限制参数类型"><a href="#限制参数类型" class="headerlink" title=" 限制参数类型 "></a><font color=orange> 限制参数类型 </font></h3><p>当我们使用泛型时, 希望限定某些类型可以使用<code>extends</code>关键字。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">SomeBaseClass</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// Implementation goes here...</span></span><br><span class="line">  <span class="built_in">String</span> toString() =&gt; <span class="string">&quot;Instance of &#x27;Foo&lt;<span class="subst">$T</span>&gt;&#x27;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Extender</span> <span class="keyword">extends</span> <span class="title">SomeBaseClass</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line"><span class="keyword">var</span> someBaseClassFoo = Foo&lt;SomeBaseClass&gt;();</span><br><span class="line"><span class="keyword">var</span> extenderFoo = Foo&lt;Extender&gt;();</span><br><span class="line"><span class="keyword">var</span> foo = Foo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fooObject = Foo&lt;<span class="built_in">Object</span>&gt;(); <span class="comment">// 错误的写法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title=" 泛型方法 "></a><font color=orange> 泛型方法 </font></h3><p>Dart同样支持泛型方法或者泛型函数。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">T first&lt;T&gt;(List&lt;T&gt; ts) &#123;</span><br><span class="line">  // Do some initial work or error checking, then...</span><br><span class="line">  T tmp = ts[0];</span><br><span class="line">  // Do some additional checking or processing...</span><br><span class="line">  return tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="资源库和可见性"><a href="#资源库和可见性" class="headerlink" title=" 资源库和可见性 "></a><font color=orange> 资源库和可见性 </font></h2><p>资源库<code>Library</code>和<code>import</code>可以方便的构建一个模块化和可共享的代码库。它不仅仅提供API, 以下划线(_)开始的标示符都只在该资源库中可见。每个Dart应用都是一个资源库。</p><h3 id="内置库导入"><a href="#内置库导入" class="headerlink" title=" 内置库导入 "></a><font color=orange> 内置库导入 </font></h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:html&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="其他库导入"><a href="#其他库导入" class="headerlink" title=" 其他库导入 "></a><font color=orange> 其他库导入 </font></h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:test/test.dart&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="指定库前缀"><a href="#指定库前缀" class="headerlink" title=" 指定库前缀 "></a><font color=orange> 指定库前缀 </font></h3><p>如果你导入了两个包含了相同标识的库, 那么你可以使用库前缀来区别他们。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:lib1/lib1.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:lib2/lib2.dart&#x27;</span> <span class="keyword">as</span> lib2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uses Element from lib1.</span></span><br><span class="line"><span class="built_in">Element</span> element1 = <span class="built_in">Element</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uses Element from lib2.</span></span><br><span class="line">lib2.<span class="built_in">Element</span> element2 = lib2.<span class="built_in">Element</span>();</span><br></pre></td></tr></table></figure></p><h3 id="导入库的一部分"><a href="#导入库的一部分" class="headerlink" title=" 导入库的一部分 "></a><font color=orange> 导入库的一部分 </font></h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Import only foo.</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:lib1/lib1.dart&#x27;</span> <span class="keyword">show</span> foo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Import all names EXCEPT foo.</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:lib2/lib2.dart&#x27;</span> <span class="keyword">hide</span> foo;</span><br></pre></td></tr></table></figure><h3 id="延迟加载库"><a href="#延迟加载库" class="headerlink" title=" 延迟加载库 "></a><font color=orange> 延迟加载库 </font></h3><p>延迟加载库运行应用程序在需要的时候加载库, 以下情况你可以使用延迟加载:<br>1、减少应用程序初始启动时间<br>2、例如执行A/B测试, 测试各种算法的不同实现<br>3、加载很少使用的功能, 例如可选的屏幕和对话框<br>目前只有dart2js支持延迟加载, Flutter暂不支持.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先使用`deferred as`导入库</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:greetings/hello.dart&#x27;</span> <span class="keyword">deferred</span> <span class="keyword">as</span> hello;</span><br><span class="line"></span><br><span class="line">Future greet() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="comment">//然后调用oadLibrary()方法, 该方法你多次调用, 但是只会加载库一次</span></span><br><span class="line">  <span class="keyword">await</span> hello.loadLibrary();</span><br><span class="line">  hello.printGreeting();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异步函数"><a href="#异步函数" class="headerlink" title=" 异步函数 "></a><font color=orange> 异步函数 </font></h2><p>关键字<code>async</code>和<code>await</code>可以用于异步编程, 使用<code>await</code>的方法或者函数必须是<code>async</code>。尽管异步函数可以处理耗时操作，但是它并不会等待这些耗时操作完成，异步函数执行时会在其遇到第一个 <code>await</code> 表达式的时候返回一个 <code>Future</code> 对象，然后等待 <code>await</code> 表达式执行完毕后继续执行。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Future checkVersion() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> version = <span class="keyword">await</span> lookUpVersion();</span><br><span class="line">  <span class="comment">// Do something with version</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="异常"><a href="#异常" class="headerlink" title=" 异常 "></a><font color=orange> 异常 </font></h3><p>使用<code>try-catch-finally</code>处理异常和清理相关资源。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Future checkVersion() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="keyword">var</span> entrypoint = <span class="keyword">await</span> findEntrypoint();</span><br><span class="line"> <span class="keyword">var</span> exitCode = <span class="keyword">await</span> runExecutable(entrypoint, args);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">// React to inability to look up the version</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="await返回值"><a href="#await返回值" class="headerlink" title=" await返回值 "></a><font color=orange> await返回值 </font></h3><p><code>await expr</code>返回值都是Future类型的, 如果不是该类型, 系统会自动包装成Future类型。</p><h3 id="声明异步函数"><a href="#声明异步函数" class="headerlink" title=" 声明异步函数 "></a><font color=orange> 声明异步函数 </font></h3><p>在函数声明中使用<code>async</code>即可声明该函数为异步函数, 该函数返回值不用返回Future对象, Dart会自动包装。如果没有没有返回值, 确保返回<code>Furhure&lt;Void&gt;</code>类型。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步函数</span></span><br><span class="line"><span class="built_in">String</span> lookUpVersion() =&gt; <span class="string">&#x27;1.0.0&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异步函数</span></span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; lookUpVersion() <span class="keyword">async</span> =&gt; <span class="string">&#x27;1.0.0&#x27;</span>;</span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; lookUpVersion() <span class="keyword">async</span> &#123; </span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;1.0.0&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="可调用类"><a href="#可调用类" class="headerlink" title=" 可调用类 "></a><font color=orange> 可调用类 </font></h2><p>实现<code>call()</code>函数, 允许对象的实例像函数一样调用, 参数随意。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WannabeFunction</span> </span>&#123;</span><br><span class="line">  call(<span class="built_in">String</span> a, <span class="built_in">String</span> b) =&gt; <span class="string">&#x27;<span class="subst">$a</span> <span class="subst">$b</span>!&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> wf = <span class="keyword">new</span> WannabeFunction();</span><br><span class="line">  <span class="keyword">var</span> out = wf(<span class="string">&quot;Hi&quot;</span>,<span class="string">&quot;there&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$out</span>&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="类型定义"><a href="#类型定义" class="headerlink" title=" 类型定义 "></a><font color=orange> 类型定义 </font></h2><p>使用<code>typedef</code>给<code>Function</code>命名, 这样可以保留相关的类型信息。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> Compare = <span class="built_in">int</span> <span class="built_in">Function</span>(<span class="built_in">Object</span> a, <span class="built_in">Object</span> b);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortedCollection</span> </span>&#123;</span><br><span class="line">  Compare compare;</span><br><span class="line"></span><br><span class="line">  SortedCollection(<span class="keyword">this</span>.compare);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单的不完整实现。</span></span><br><span class="line"><span class="built_in">int</span> sort(<span class="built_in">Object</span> a, <span class="built_in">Object</span> b) =&gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  SortedCollection coll = SortedCollection(sort);</span><br><span class="line">  <span class="keyword">assert</span>(coll.compare <span class="keyword">is</span> <span class="built_in">Function</span>);</span><br><span class="line">  <span class="keyword">assert</span>(coll.compare <span class="keyword">is</span> Compare);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>typedef</code>时可以使用泛型:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> Compare&lt;T&gt; = <span class="built_in">int</span> <span class="built_in">Function</span>(T a, T b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> sort(<span class="built_in">int</span> a, <span class="built_in">int</span> b) =&gt; a - b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">assert</span>(sort <span class="keyword">is</span> Compare&lt;<span class="built_in">int</span>&gt;); <span class="comment">// True!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="元数据"><a href="#元数据" class="headerlink" title=" 元数据 "></a><font color=orange> 元数据 </font></h2><p>元数据注解以 <code>@</code> 开头，其后紧跟一个编译时常量（比如 deprecated）或者调用一个常量构造函数。Dart 中有两个注解是所有代码都可以使用的：<code>@deprecated</code> 和 <code>@override</code>。你也可以自定义注解: </p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> todo;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> who;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> what;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> Todo(<span class="keyword">this</span>.who, <span class="keyword">this</span>.what);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;todo.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Todo</span>(<span class="string">&#x27;seth&#x27;</span>, <span class="string">&#x27;make this do something&#x27;</span>)</span><br><span class="line"><span class="keyword">void</span> doSomething() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;do something&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/images/iOS/Flutter004.jpg&quot; alt=&quot;hello&quot; style=&quot;width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;Flutter使用Dart来编写框架和widget, Dart可以使用&lt;a href=&quot;https://dartpad.dartlang.org&quot;&gt;DartPad&lt;/a&gt;来快速学习, 而无需搭建相关环境, 国内用户可以访问&lt;a href=&quot;https://dartpad.cn&quot;&gt;DartPad.cn&lt;/a&gt;。DartPad支持&lt;code&gt;dart:* libraries&lt;/code&gt;, 但是不支持&lt;code&gt;dart:io&lt;/code&gt;以及&lt;code&gt;packages&lt;/code&gt;。 如果你需要使用&lt;code&gt;dart:io&lt;/code&gt;那么你需要使用&lt;a href=&quot;https://dart.dev/tools/sdk&quot;&gt;Dart SDK&lt;/a&gt;, 如果你需要使用&lt;code&gt;packages&lt;/code&gt;那么你需要使用&lt;a href=&quot;https://dart.dev/platforms&quot;&gt;平台&lt;/a&gt;, 对于开发移动应用, 你可以安装Flutter。&lt;/p&gt;
&lt;p&gt;这里学习一下主要的Dart功能, 从变量、操作符、类到资源库。 如果你有其他语言基础, 那么学习Dart会很轻松。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/tags/Flutter/"/>
    
      <category term="Dart" scheme="http://yoursite.com/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>Flutter02之填坑指南</title>
    <link href="http://yoursite.com/2019/05/05/Flutter/Flutter02%E4%B9%8B%E5%A1%AB%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2019/05/05/Flutter/Flutter02之填坑指南/</id>
    <published>2019-05-05T09:02:02.000Z</published>
    <updated>2023-06-25T08:04:02.615Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/images/iOS/Flutter002.jpg" alt="hello" style="width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"/></p><p><a href="https://flutter.dev/">Flutter</a>是Google推出的移动UI框架, 可以快速在iOS和Android上构建高质量的原生用户界面。</p><p>本文主要记录相关Flutter遇到的坑!!!</p><span id="more"></span><h1 id="1、Flutter卡在Running-“flutter-packages-get”-in-project-name…"><a href="#1、Flutter卡在Running-“flutter-packages-get”-in-project-name…" class="headerlink" title=" 1、Flutter卡在Running “flutter packages get” in project_name… "></a><font color=orange> 1、Flutter卡在<strong>Running “flutter packages get” in project_name…</strong> </font></h1><p>当创建项目/运行项目时<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Running &quot;flutter packages get&quot; in project_name...</span><br></pre></td></tr></table></figure></p><p><a href="https://flutter.dev/community/china">官方解决</a>办法</p><blockquote><p>export PUB_HOSTED_URL=<a href="https://pub.flutter-io.cn">https://pub.flutter-io.cn</a><br>export FLUTTER_STORAGE_BASE_URL=<a href="https://storage.flutter-io.cn">https://storage.flutter-io.cn</a></p></blockquote><h1 id="2、Android项目运行时出错"><a href="#2、Android项目运行时出错" class="headerlink" title=" 2、Android项目运行时出错 "></a><font color=orange> 2、Android项目运行时出错 </font></h1><h1 id="卡在Initializing-gradle…"><a href="#卡在Initializing-gradle…" class="headerlink" title=" 卡在Initializing gradle… "></a><font color=orange> 卡在<strong>Initializing gradle…</strong> </font></h1><p>运行时会卡在<code>Initializing gradle...</code>, 此时因为Android项目会用到<code>Gradle</code>, 如果没有FQ,下载速度会非常慢, 此时我们可以在项目中的<code>android/gradle/wrapper/gradle-wrapper.properties</code>中查看<code>gradle</code>版本号以及<a href="http://services.gradle.org/distributions/">地址</a>, 我们可以手动下载然后解压到<code>~/.gradle/wrapper/dists/</code>中。</p><h1 id="3、卡在Running-‘gradle-assembleDebug"><a href="#3、卡在Running-‘gradle-assembleDebug" class="headerlink" title=" 3、卡在Running ‘gradle assembleDebug "></a><font color=orange> 3、卡在<strong>Running ‘gradle assembleDebug</strong> </font></h1><p>运行时会卡在<code>Running &#39;gradle assembleDebug</code>, 因为Gradle的Maven仓库在国外, 可以使用阿里云的镜像地址。</p><pre><code>* 修改项目中`android/build.gradle`文件</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        //修改的地方</span><br><span class="line">        //google()</span><br><span class="line">        //jcenter()</span><br><span class="line">        maven &#123; url &#x27;https://maven.aliyun.com/repository/google&#x27; &#125;</span><br><span class="line">        maven &#123; url &#x27;https://maven.aliyun.com/repository/jcenter&#x27; &#125;</span><br><span class="line">        maven &#123; url &#x27;http://maven.aliyun.com/nexus/content/groups/public&#x27; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &#x27;com.android.tools.build:gradle:3.2.1&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        //修改的地方</span><br><span class="line">        //google()</span><br><span class="line">        //jcenter()</span><br><span class="line">        maven &#123; url &#x27;https://maven.aliyun.com/repository/google&#x27; &#125;</span><br><span class="line">        maven &#123; url &#x27;https://maven.aliyun.com/repository/jcenter&#x27; &#125;</span><br><span class="line">        maven &#123; url &#x27;http://maven.aliyun.com/nexus/content/groups/public&#x27; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rootProject.buildDir = &#x27;../build&#x27;</span><br><span class="line">subprojects &#123;</span><br><span class="line">    project.buildDir = &quot;$&#123;rootProject.buildDir&#125;/$&#123;project.name&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">subprojects &#123;</span><br><span class="line">    project.evaluationDependsOn(&#x27;:app&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task clean(type: Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>* 修改Flutter的配置文件, 该文件在`Flutter安装目录/packages/flutter_tools/gradle/flutter.gradle`</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        //修改的地方</span><br><span class="line">        //google()</span><br><span class="line">        //jcenter()</span><br><span class="line">        maven &#123; url &#x27;https://maven.aliyun.com/repository/google&#x27; &#125;</span><br><span class="line">        maven &#123; url &#x27;https://maven.aliyun.com/repository/jcenter&#x27; &#125;</span><br><span class="line">        maven &#123; url &#x27;http://maven.aliyun.com/nexus/content/groups/public&#x27; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &#x27;com.android.tools.build:gradle:3.2.1&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、使用Text时报错No-Directionality-widget-found-RichText-widgets-require-a-Directionality-widget-ancestor"><a href="#4、使用Text时报错No-Directionality-widget-found-RichText-widgets-require-a-Directionality-widget-ancestor" class="headerlink" title=" 4、使用Text时报错No Directionality widget found.RichText widgets require a Directionality widget ancestor. "></a><font color=orange> 4、使用Text时报错No Directionality widget found.RichText widgets require a Directionality widget ancestor. </font></h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(Container(</span><br><span class="line">    color: Colors.white,</span><br><span class="line">    child: Center(</span><br><span class="line">      child: Text(</span><br><span class="line">        <span class="string">&#x27;Flutter&#x27;</span>,</span><br><span class="line">        style: TextStyle(</span><br><span class="line">          color: Colors.purple,</span><br><span class="line">          fontSize: <span class="number">40</span></span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>错误提示</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">flutter: The following assertion was thrown building Text(<span class="string">&quot;Flutter&quot;</span>, inherit: <span class="keyword">true</span>, color:</span><br><span class="line">flutter: MaterialColor(primary value: Color(<span class="number">0xff9c27b0</span>)), size: <span class="number">40.0</span>):</span><br><span class="line">flutter: No Directionality widget found.</span><br><span class="line">flutter: RichText widgets require a Directionality widget ancestor.</span><br><span class="line">flutter: The specific widget that could not find a Directionality ancestor was:</span><br><span class="line">flutter:   RichText</span><br><span class="line">flutter: The ownership chain <span class="keyword">for</span> the affected widget <span class="keyword">is</span>: <span class="string">&quot;RichText ← Text ← Center ← [root]&quot;</span></span><br><span class="line">flutter: Typically, the Directionality widget <span class="keyword">is</span> introduced by the MaterialApp or WidgetsApp widget at the</span><br><span class="line">flutter: top of your application widget tree. It determines the ambient reading direction and <span class="keyword">is</span> used, <span class="keyword">for</span></span><br><span class="line">flutter: example, to determine how to lay out text, how to interpret <span class="string">&quot;start&quot;</span> and <span class="string">&quot;end&quot;</span> values, and to resolve</span><br><span class="line">flutter: EdgeInsetsDirectional, AlignmentDirectional, and other *Directional objects.</span><br></pre></td></tr></table></figure><p>错误中提示, 方向性组件找不到, 这是因为外层的Widget无法确定Text的文本排列方向, 所有之类只要给Text添加一个<code>textDirection</code>属性值或者使用<code>Directionality</code>包裹<code>Text</code>, 并设置<code>Directionality</code>的<code>textDirection</code>。</p><h2 id="5、Waiting-for-another-flutter-command-to-release-the-startup-lock…或者创建Flutter项目时卡主"><a href="#5、Waiting-for-another-flutter-command-to-release-the-startup-lock…或者创建Flutter项目时卡主" class="headerlink" title=" 5、Waiting for another flutter command to release the startup lock…或者创建Flutter项目时卡主 "></a><font color=orange> 5、Waiting for another flutter command to release the startup lock…或者创建Flutter项目时卡主 </font></h2><p>可以终止dart进程, 然后重启IDE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#Linux</span><br><span class="line">killall -9 dart</span><br><span class="line"></span><br><span class="line">#window</span><br><span class="line">taskkill /F /IM dart.ext</span><br></pre></td></tr></table></figure><p>也可以删除flutter安装目录下的<code>bin/cache/lockfile</code>来解决, 然后重启IDE。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/images/iOS/Flutter002.jpg&quot; alt=&quot;hello&quot; style=&quot;width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://flutter.dev/&quot;&gt;Flutter&lt;/a&gt;是Google推出的移动UI框架, 可以快速在iOS和Android上构建高质量的原生用户界面。&lt;/p&gt;
&lt;p&gt;本文主要记录相关Flutter遇到的坑!!!&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/tags/Flutter/"/>
    
      <category term="资料整理" scheme="http://yoursite.com/tags/%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Flutter01之初体验</title>
    <link href="http://yoursite.com/2019/04/25/Flutter/Flutter01%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2019/04/25/Flutter/Flutter01之初体验/</id>
    <published>2019-04-25T01:34:32.000Z</published>
    <updated>2023-06-25T08:03:47.018Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/images/iOS/Flutter001.jpg" alt="hello" style="width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"/></p><p><a href="https://flutter.dev/">Flutter</a>是Google推出的移动UI框架, 可以快速在iOS和Android上构建高质量的原生用户界面。国内可以访问<a href="https://flutter-io.cn">Flutter中文社区</a>。</p><p><a href="/2019/05/05/Flutter/Flutter填坑指南/">Flutter遇到的问题</a></p><span id="more"></span><h1 id="安装Flutter"><a href="#安装Flutter" class="headerlink" title=" 安装Flutter "></a><font color=orange> 安装Flutter </font></h1><p>Flutter可以安装在<code>Windows</code>、<code>macOS</code>和<code>Linux</code>平台上, 可以参考<a href="https://flutter.dev/docs/get-started/install">官方安装向导</a>。</p><p>这里我介绍一下在<strong>macOS</strong>上面安装Flutter的步骤, 以及安装Android Studio等。</p><h2 id="系统需求"><a href="#系统需求" class="headerlink" title=" 系统需求 "></a><font color=orange> 系统需求 </font></h2><ul><li>操作系统: macOS (64-bit)</li><li>磁盘空间: 700 MB (不包含IDE和工具).</li><li>命令: bash、curl、git 2.x、mkdir、rm、unzip、which</li></ul><h2 id="安装FLutterSDK"><a href="#安装FLutterSDK" class="headerlink" title=" 安装FLutterSDK "></a><font color=orange> 安装FLutterSDK </font></h2><ul><li>1、下载FLutter SDK, 截止目前(2019-04-25), 最新版本是v1.2.1<ul><li><a href="https://flutter.dev/docs/development/tools/sdk/releases?tab=macos">下载地址</a></li></ul></li><li>2、解压到安装目录, 我一般安装到/usr/local/bin<blockquote><p>cd /usr/local/bin<br>unzip ~/Downloads/flutter_macos_v1.2.1-stable.zip</p></blockquote></li><li>3、修改<code>/etc/porfile</code>文件, 在文件末尾添加<blockquote><p>export PATH=/usr/local/bin/flutter/bin:$PATH</p></blockquote></li><li>4、使修改配置生效<blockquote><p>source /etc/profile</p></blockquote></li><li>5、预下载(可选)<blockquote><p>flutter precache</p></blockquote></li></ul><h2 id="运行Flutter-医生"><a href="#运行Flutter-医生" class="headerlink" title=" 运行Flutter 医生 "></a><font color=orange> 运行Flutter 医生 </font></h2><p>该命令可以检查当前机器的Flutter环境、Android环境、iOS环境等。</p><blockquote><p>flutter doctor</p></blockquote><p>结果如下:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[✓] Flutter (Channel stable, v1.2.1, on Mac OS X 10.14.2 18C54, locale</span><br><span class="line">    zh-Hans-CN)</span><br><span class="line">[!] Android toolchain - develop for Android devices (Android SDK version 28.0.3)</span><br><span class="line">    ! Some Android licenses not accepted.  To resolve this, run: flutter doctor</span><br><span class="line">      --android-licenses</span><br><span class="line">[✓] iOS toolchain - develop for iOS devices (Xcode 10.1)</span><br><span class="line">[!] Android Studio (version 3.4)</span><br><span class="line">    ✗ Flutter plugin not installed; this adds Flutter specific functionality.</span><br><span class="line">    ✗ Dart plugin not installed; this adds Dart specific functionality.</span><br><span class="line">[✓] Connected device (1 available)</span><br><span class="line"></span><br><span class="line">! Doctor found issues in 2 categories.</span><br></pre></td></tr></table></figure></p><p>Flutter默认使用Google 分析工具提交使用报告和崩溃信息等, 在国内由于墙的原因或者不想上传可以关闭。</p><blockquote><p>关闭<br>flutter config –no-analytics<br>开启<br>flutter config –analytics</p></blockquote><h2 id="iOS"><a href="#iOS" class="headerlink" title=" iOS "></a><font color=orange> iOS </font></h2><h3 id="安装Xcode并配置"><a href="#安装Xcode并配置" class="headerlink" title=" 安装Xcode并配置 "></a><font color=orange> 安装Xcode并配置 </font></h3><ul><li>1、安装Xcode, 需要9.0以后版本</li><li>2、配置Xcode命令行使用最新安装的Xcode<blockquote><p>sudo xcode-select –switch /Applications/Xcode.app/Contents/Developer</p></blockquote></li><li>3、打开Xcode一次确保Xcode许可协议签署,或者命令行运行:  <blockquote><p>sudo xcodebuild -license</p></blockquote></li></ul><h3 id="iOS-simulator"><a href="#iOS-simulator" class="headerlink" title=" iOS simulator "></a><font color=orange> iOS simulator </font></h3><p>运行下面命令打开一个iOS模拟器</p><blockquote><p>open -a Simulator</p></blockquote><h3 id="iOS-设备"><a href="#iOS-设备" class="headerlink" title=" iOS 设备 "></a><font color=orange> iOS 设备 </font></h3><ul><li>1、安装homebrew<blockquote><p>/usr/bin/ruby -e “$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;">https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</a></p></blockquote></li><li>2、更新homebrew<blockquote><p>brew update</p></blockquote></li><li>3、安装其他工具<blockquote><p>brew install –HEAD usbmuxd<br>brew link usbmuxd<br>brew install –HEAD libimobiledevice<br>brew install ideviceinstaller ios-deploy cocoapods<br>pod setup</p></blockquote></li><li>4、运行Flutter项目中的ios/Runner.xcworkspace, 给项目设置Bundle Identifier、证书和描述文件等</li><li>5、使用数据线连接iPhone到电脑, 并信任电脑</li><li>6、运行<code>flutter run</code></li></ul><h2 id="Android"><a href="#Android" class="headerlink" title=" Android "></a><font color=orange> Android </font></h2><h3 id="安装Android-Studio"><a href="#安装Android-Studio" class="headerlink" title=" 安装Android Studio "></a><font color=orange> 安装Android Studio </font></h3><ul><li>1、<a href="https://developer.android.com/studio">官网</a>下载安装Android Sdudio</li><li>2、打开Android Studio, 然后安装通过<code>Android Studio Setup Wizard</code>页面</li><li>3、Android授权, 运行下面命令<blockquote><p>flutter doctor –android-licenses</p></blockquote></li><li>4、Android Studio安装<code>Flutter</code>和<code>Dark</code>插件, 打开<code>Android Studio</code>—&gt;打开偏好设置<code>Preferences</code>—&gt;插件<code>Plugins</code>—&gt;搜索Flutter—&gt;安装Flutter插件—&gt;重启Android Studio</li></ul><h3 id="Android-emulator"><a href="#Android-emulator" class="headerlink" title=" Android emulator "></a><font color=orange> Android emulator </font></h3><ul><li>1、开启VM acceleration</li><li>2、打开<code>Android Studio</code>—&gt;<code>Configure</code>—&gt;<code>AVD Manager</code>—&gt;<code>Create Virtual Device</code></li><li>3、选择一个设备然后点击<code>Next</code></li><li>4、首先下载镜像, 然后选择一个或者多个镜像, 点击<code>Next</code></li><li>5、在<code>Verify Configuartion</code>页面中的<code>Graphics</code>选项选择<code>Hardware - GLES 2.0</code>后点击<code>Finish</code></li><li>6、在<code>Android Virtual Device Manager</code>页面启动添加的模拟器</li></ul><h3 id="Android-设备"><a href="#Android-设备" class="headerlink" title=" Android 设备 "></a><font color=orange> Android 设备 </font></h3><ul><li>1、允许开发者选项和USB调试</li><li>2、如果是Windows, 安装<code>Google USB Driver</code></li><li>3、使用USB线连接电脑, 并信任电脑</li><li>4、在命令行中输入下面的命令并允许, 检测你的设备<blockquote><p>   flutter devices</p></blockquote></li></ul><h1 id="创建Flutter项目"><a href="#创建Flutter项目" class="headerlink" title=" 创建Flutter项目 "></a><font color=orange> 创建Flutter项目 </font></h1><p>目前创建Flutter项目支持一下几种方式: </p><h2 id="Android-Studio-IntelliJ"><a href="#Android-Studio-IntelliJ" class="headerlink" title=" Android Studio/IntelliJ "></a><font color=orange> Android Studio/IntelliJ </font></h2><ul><li>1.1、选择<code>New Flutter Project</code></li><li>1.2、选择<code>Flutter application</code></li><li>1.3、确保<code>Flutter SDK Path</code>正确</li><li>1.4、填写项目名称、描述以及项目存储位置</li><li>1.5、点击完成</li></ul><h2 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title=" Visual Studio Code "></a><font color=orange> Visual Studio Code </font></h2><ul><li>2.1、<code>View</code>—&gt;<code>Command Palette</code></li><li>2.2、Type<code>Flutter</code>, 选择<code>Flutter: New Project</code></li><li>2.3、填写项目名称、描述以及项目存储位置</li><li>2.4、点击完成</li></ul><h2 id="Terminal-amp-editor"><a href="#Terminal-amp-editor" class="headerlink" title=" Terminal &amp; editor "></a><font color=orange> Terminal &amp; editor </font></h2><ul><li>3.1、进入项目存放目录, 创建项目<blockquote><p>mkdir -p ~/Desktop/Flutter<br>cd ~/Desktop/Flutter<br>flutter create myApp</p></blockquote></li><li>3.2、打开模拟器<blockquote><p>设备<br>flutter devices<br>模拟器<br>flutter emulators<br>flutter emulators –launch emulatorid</p></blockquote></li><li>3.2、运行<blockquote><p>当前只打开一个模拟器时, 直接运行<br>flutter run<br>在所有模拟器运行<br>flutter run -d all<br>指定模拟器运行<br>flutter run -d deviceId</p></blockquote></li></ul><h1 id="运行效果"><a href="#运行效果" class="headerlink" title=" 运行效果 "></a><font color=orange> 运行效果 </font></h1><center><br><img src="/assets/images/iOS/flutter_demo_app.png" alt="运行效果" style="width: 100%; text-align: center; display: block;"/><br></center>    ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/images/iOS/Flutter001.jpg&quot; alt=&quot;hello&quot; style=&quot;width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://flutter.dev/&quot;&gt;Flutter&lt;/a&gt;是Google推出的移动UI框架, 可以快速在iOS和Android上构建高质量的原生用户界面。国内可以访问&lt;a href=&quot;https://flutter-io.cn&quot;&gt;Flutter中文社区&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/2019/05/05/Flutter/Flutter填坑指南/&quot;&gt;Flutter遇到的问题&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flutter" scheme="http://yoursite.com/tags/Flutter/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>iOS之App瘦身实践</title>
    <link href="http://yoursite.com/2019/02/01/iOS/iOS%E4%B9%8BApp%E7%98%A6%E8%BA%AB/"/>
    <id>http://yoursite.com/2019/02/01/iOS/iOS之App瘦身/</id>
    <published>2019-02-01T01:19:34.000Z</published>
    <updated>2023-06-25T07:46:07.095Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/images/iOS/iOS_App_thinning.jpg" alt="hello" style="width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"/></p><p>随着时间的推移、项目开发和迭代, App包体积越来越大, App瘦身势在必行!</p><span id="more"></span><h2 id="分析App的组成"><a href="#分析App的组成" class="headerlink" title=" 分析App的组成 "></a><font color=orange> 分析App的组成 </font></h2><ul><li>资源文件<ul><li>数据库、配置文件、数据文件</li><li>字体文件</li><li>图片</li></ul></li><li>源代码</li></ul><h3 id="生成LinkMap"><a href="#生成LinkMap" class="headerlink" title=" 生成LinkMap"></a><font color=orange> 生成LinkMap</font></h3><p>通过生成<code>LinkMap</code>文件可以分析生成ipa包的内容组成:<br><code>Xcode</code>—&gt;<code>TARGETS</code>—&gt;<code>Build Settings</code>—&gt;<code>搜索Link Map</code>—&gt;在<code>Write Link Map File</code>中把Debug中的值改为YES, Release中改为NO—&gt;在<code>Path to Link Map File</code>中是生成文件的路径, 一般默认在<code>~/Library/Developer/Xcode/DerivedData/XXX-eumsvrzbvgfofvbfsoqokmjprvuh/Build/Intermediates.noindex/XXX.build/Debug-iphoneos/XXX.build/XXX-LinkMap-normal-arm64.txt</code></p><p>LinkMap会包含每个可执行文件的偏移量及大小，所以可以很方便的知道每个可执行文件的大小。可以通过<a href="https://github.com/huanxsd/LinkMap">LinkMap分析工具</a>快速分析App内组成。</p><h2 id="图片"><a href="#图片" class="headerlink" title=" 图片 "></a><font color=orange> 图片 </font></h2><h3 id="图片压缩"><a href="#图片压缩" class="headerlink" title=" 图片压缩 "></a><font color=orange> 图片压缩 </font></h3><p>图片是相当占用资源的, 对于一些比较大的图片, 我们可以无损压缩一下, 这样可以节约60%的图片大小的空间。</p><ul><li>在线压缩<ul><li><a href="https://tinypng.com/">tinypng</a></li></ul></li><li>软件工具<ul><li><a href="https://github.com/ImageOptim/ImageOptim">ImageOptim</a></li></ul></li></ul><h3 id="查找未使用的图片"><a href="#查找未使用的图片" class="headerlink" title=" 查找未使用的图片 "></a><font color=orange> 查找未使用的图片 </font></h3><p>以下两种方式删除图片时都需要谨慎, 最好删除之前项目中搜索一下。</p><ul><li>方式一: 通过<code>ack</code>命令自己写一个脚本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">判断是否安装了ack命令, 没有则安装</span></span><br><span class="line">function checkAckAndInstall() &#123;</span><br><span class="line">  if hash ack ; then</span><br><span class="line">    eturn 1</span><br><span class="line">  else</span><br><span class="line">    echo &quot;brew install ack&quot;</span><br><span class="line">    echo &quot;brew install ack&quot; &gt;&gt; $logFile</span><br><span class="line">    `brew install ack`</span><br><span class="line">    if [[ $? = &quot;0&quot; ]]; then</span><br><span class="line">      echo &quot;安装ack失败&quot;</span><br><span class="line">      echo &quot;Install ack failed!&quot; &gt;&gt; $logFile</span><br><span class="line">      return 0</span><br><span class="line">    else</span><br><span class="line">      echo &quot;install ack success&quot;</span><br><span class="line">      echo &quot;Install ack success&quot; &gt;&gt; $logFile</span><br><span class="line">      return 1</span><br><span class="line">    fi</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkAckAndInstall</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装出错</span></span><br><span class="line">if [[ $? -eq 0 ]]; then</span><br><span class="line">  echo &quot;ACK命令未安装并且brew install ack失败, 请先安装ack&quot;</span><br><span class="line">  exit</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查找所有图片</span></span><br><span class="line">for i in `find . -name &quot;*.png&quot; -o -name &quot;*.jpg&quot; -o -name &quot;*.jpeg&quot; -o -name &quot;*.gif&quot;`; do</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">图片名</span></span><br><span class="line">  file=`basename -s .jpg &quot;$i&quot; | xargs basename -s .png | xargs basename -s @2x | xargs basename -s @3x`</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">查找</span></span><br><span class="line">  result=`ack -i &quot;$file&quot;`</span><br><span class="line"><span class="meta prompt_">  #</span><span class="language-bash">如果查找结果为空</span></span><br><span class="line">  if [ -z &quot;$result&quot; ]; then</span><br><span class="line">    echo &quot;发现未使用图片: $i&quot;</span><br><span class="line">  fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ul><li>方式二: <a href="https://github.com/tinymind/LSUnusedResources">LSUnusedResources</a></li></ul><h2 id="字体"><a href="#字体" class="headerlink" title=" 字体 "></a><font color=orange> 字体 </font></h2><h3 id="系统字体"><a href="#系统字体" class="headerlink" title=" 系统字体 "></a><font color=orange> 系统字体 </font></h3><p>系统字体, 但不在预装字体列表中, 注意: 退出当前控制器或者App重启后都需要重新下载</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用字体的PostScript名字创建一个Dictionary    NSMutableDictionary *attrs = [NSMutableDictionary dictionaryWithObjectsAndKeys:fontName, kCTFontNameAttribute, nil];</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 创建一个字体描述对象CTFontDescriptorRef</span></span><br><span class="line"><span class="built_in">CTFontDescriptorRef</span> desc = <span class="built_in">CTFontDescriptorCreateWithAttributes</span>((__bridge <span class="built_in">CFDictionaryRef</span>)attrs);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//将字体描述对象放到一个NSMutableArray中</span></span><br><span class="line"><span class="built_in">NSMutableArray</span> *descs = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:<span class="number">0</span>];</span><br><span class="line">[descs addObject:(__bridge <span class="type">id</span>)desc];</span><br><span class="line"><span class="built_in">CFRelease</span>(desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配字体</span></span><br><span class="line"><span class="built_in">CTFontDescriptorMatchFontDescriptorsWithProgressHandler</span>((__bridge <span class="built_in">CFArrayRef</span>)descs, <span class="literal">NULL</span>, ^<span class="type">bool</span>(<span class="built_in">CTFontDescriptorMatchingState</span> state, <span class="built_in">CFDictionaryRef</span>  _Nonnull progressParameter) &#123;</span><br><span class="line">        </span><br><span class="line">  <span class="keyword">if</span> (state == kCTFontDescriptorMatchingDidBegin) &#123;<span class="comment">//字体已经匹配</span></span><br><span class="line">        </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state == kCTFontDescriptorMatchingDidFinish) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!errorDuringDownload) &#123;</span><br><span class="line">      <span class="comment">//下载完成</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">BOOL</span>)<span class="literal">YES</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="自定义字体"><a href="#自定义字体" class="headerlink" title=" 自定义字体 "></a><font color=orange> 自定义字体 </font></h3><p>字体文件相对来说比较大, 我们可以把字体文件放在服务器, 使用的时候从服务器下载后再使用。可以一次下载多次使用.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下载字体后, 本地沙盒路径</span></span><br><span class="line"><span class="built_in">NSURL</span> *fontUrl = [<span class="built_in">NSURL</span> fileURLWithPath:path];</span><br><span class="line"><span class="built_in">CGDataProviderRef</span> fontDataProvider = <span class="built_in">CGDataProviderCreateWithURL</span>((__bridge <span class="built_in">CFURLRef</span>)fontUrl);    </span><br><span class="line"><span class="built_in">CGFontRef</span> fontRef = <span class="built_in">CGFontCreateWithDataProvider</span>(fontDataProvider);</span><br><span class="line"><span class="built_in">CGDataProviderRelease</span>(fontDataProvider);</span><br><span class="line"><span class="built_in">CTFontManagerRegisterGraphicsFont</span>(fontRef, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//字体名称</span></span><br><span class="line"><span class="built_in">NSString</span> *fontName = <span class="built_in">CFBridgingRelease</span>(<span class="built_in">CGFontCopyPostScriptName</span>(fontRef));</span><br><span class="line"><span class="built_in">CGFontRelease</span>(fontRef);</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title=" 代码 "></a><font color=orange> 代码 </font></h2><h3 id="第三方库"><a href="#第三方库" class="headerlink" title=" 第三方库 "></a><font color=orange> 第三方库 </font></h3><p>项目中或多或少的使用一些第三方SDK, 清理一些不使用的SDK, 或者根据需要使用精简版的SDK。</p><h3 id="bitcode"><a href="#bitcode" class="headerlink" title=" bitcode "></a><font color=orange> bitcode </font></h3><p>Xcode中要使用bitcode要求说有的SDK都必须支持bitcode, 可以在<code>Xcode</code>—&gt;<code>PROJECT</code>—&gt;<code>Build Settings</code>—&gt;搜索<code>bitcode</code>开启。</p><h3 id="未使用的类"><a href="#未使用的类" class="headerlink" title=" 未使用的类 "></a><font color=orange> 未使用的类 </font></h3><p>注意防止误删!</p><ul><li><a href="https://blog.jetbrains.com/objc/2014/01/appcode-inspections-for-your-code-perfection/">AppCode</a></li><li><a href="https://github.com/dblock/fui">Fui</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/images/iOS/iOS_App_thinning.jpg&quot; alt=&quot;hello&quot; style=&quot;width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;随着时间的推移、项目开发和迭代, App包体积越来越大, App瘦身势在必行!&lt;/p&gt;
    
    </summary>
    
    
      <category term="资料整理" scheme="http://yoursite.com/tags/%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="App瘦身" scheme="http://yoursite.com/tags/App%E7%98%A6%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>iOS自动编译打包脚本</title>
    <link href="http://yoursite.com/2018/08/26/iOS/iOS%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85%E8%84%9A%E6%9C%AC/"/>
    <id>http://yoursite.com/2018/08/26/iOS/iOS自动编译打包脚本/</id>
    <published>2018-08-26T05:37:04.000Z</published>
    <updated>2023-06-25T07:48:33.901Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/images/iOS/iOS_auto_build_ipa.jpeg" alt="hello" style="width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"/></p><p>最近闲暇时间研究了一下Xcode自动编译、打包以及通过脚本更改一个配置文件, 主要涉及的命令如下: </p><ul><li>xcpretty<ul><li>美化xcodebuild的输出日志</li></ul></li><li>xcodebuild<ul><li>苹果发布自动构建的工具</li></ul></li><li>PlistBuddy<ul><li>Mac自带的专门解析plist的小工具</li></ul></li><li>grep<ul><li>文本搜索工具</li></ul></li><li>awk<ul><li>文本分析工具</li></ul></li><li>sed<ul><li>文本编辑工具</li></ul></li></ul><p>这里只是简单介绍了这些命令的几种用法, 需要深入了解的可自行搜索学习。<br><span id="more"></span></p><h2 id="xcpretty"><a href="#xcpretty" class="headerlink" title=" xcpretty "></a><font color=orange> xcpretty </font></h2><p>xcpretty是一个针对于xcodebuild的快速和灵活的格式化程序, <a href="https://github.com/xcpretty/xcpretty">github地址</a>。</p><h3 id="安装xcpretty"><a href="#安装xcpretty" class="headerlink" title=" 安装xcpretty "></a><font color=orange> 安装xcpretty </font></h3><blockquote><p>   sudo gem install</p></blockquote><p>也可以自定义安装目录</p><blockquote><p>   gem install -n /usr/local/bin xcpretty</p></blockquote><h3 id="使用xcpretty"><a href="#使用xcpretty" class="headerlink" title=" 使用xcpretty "></a><font color=orange> 使用xcpretty </font></h3><blockquote><p>   xcodebuild [flags] | xcpretty</p></blockquote><p>或者在脚本中, 执行失败时退出</p><blockquote><p>   xcodebuild [flags] | xcpretty &amp;&amp; exit ${PIPESTATUS[0]}</p></blockquote><h2 id="grep"><a href="#grep" class="headerlink" title=" grep "></a><font color=orange> grep </font></h2><p>Linux grep命令用于查找文件里符合条件的字符串。</p><blockquote><p>   查找</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#-m1表示取第一个结果</span><br><span class="line">#-C2表示查找匹配项的下面两行</span><br><span class="line">grep [-e] &quot;要查找的字符串&quot; 文件路径 [-m1] [-C2]</span><br><span class="line">grep -E &quot;正则表达式&quot; 文件路径</span><br></pre></td></tr></table></figure><h2 id="awk"><a href="#awk" class="headerlink" title=" awk "></a><font color=orange> awk </font></h2><p>AWK是一种处理文本文件的语言，是一个强大的文本分析工具。<br>配合grep命令, 可以查找Xcode项目中的一些关键配置值。</p><blockquote><p>   分割</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#使用,分割然后输出第一个</span><br><span class="line">awk -F, &#x27;&#123;print $1&#125;&#x27; 文件路径</span><br></pre></td></tr></table></figure><blockquote><p>示例: 在当前目录中查找Xcode project项目名称, 当grep查询有多个时,可以使用-m1取第一个<br><code>$(ls | grep xcodeproj -m1 | awk -F.xcodeproj &#39;&#123;print $1&#125;&#39;)</code></p></blockquote><h2 id="sed"><a href="#sed" class="headerlink" title=" sed "></a><font color=orange> sed </font></h2><p>sed主要用来自动编辑一个或多个文件<br>此命令可以用来修改Xcode项目中的.h或者.m文件</p><blockquote><p>   打印</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查找匹配打印</span><br><span class="line">sed -n &quot;/匹配项,可以是正则表达式/p&quot; 文件路径</span><br><span class="line">#打印第四行</span><br><span class="line">sed -n 4p 文件路径</span><br></pre></td></tr></table></figure><blockquote><p>   替换行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#字符串替换</span><br><span class="line">sed -i &#x27;&#x27; -e &quot;s/被替换字符串, 可以是正则表达式/替换字符串/&quot; 文件路径</span><br></pre></td></tr></table></figure><blockquote><p>示例: 查找并替换某一个内容<br>假如有一个xxx.h文件, 目录是~/Desktop/xxx.h, 内容如下:<br><code>#define PUBLISH 1</code><br>我们需要修改为<code>#define PUBLISH 2</code><br>执行<code>sed -i &#39;&#39; -e &quot;s/^#define[ ]*PUBLISH[ ]*[0-9]*[ ]*$/#define PUBLISH 2/&quot; ~/Desktop/xxx.h</code>即可</p></blockquote><h2 id="PlistBuddy"><a href="#PlistBuddy" class="headerlink" title=" PlistBuddy "></a><font color=orange> PlistBuddy </font></h2><p>此命令可以用来修改Xcode项目中Info.plist文件中的配置。</p><blockquote><p>   打印CFBundleShortVersionString对应的值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/PlistBuddy -c &quot;print CFBundleShortVersionString&quot; plist文件路径</span><br></pre></td></tr></table></figure><blockquote><p>   修改CFBundleShortVersionString对应的值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/libexec/PlistBuddy -c &quot;Set :CFBundleShortVersionString 1.1&quot; plist文件路径</span><br></pre></td></tr></table></figure><h2 id="xcodebuild"><a href="#xcodebuild" class="headerlink" title=" xcodebuild "></a><font color=orange> xcodebuild </font></h2><h3 id="常见命令"><a href="#常见命令" class="headerlink" title=" 常见命令 "></a><font color=orange> 常见命令 </font></h3><p>这些命令可以单独使用, 无需指定<code>-project</code>、<code>-workspace</code>和<code>-scheme</code></p><blockquote><p>   使用帮助<br>   xcodebuild -help<br>   man xcodebuild</p></blockquote><blockquote><p>   查看当前目录中的Targets、Configurations和Schemes<br>   xcodebuild -list [[-project <projectname>]|[-workspace <workspacename>]] [-json]</p></blockquote><blockquote><p>   查看已安装的SDK<br>   xcodebuild -showsdks</p></blockquote><blockquote><p>   查看版本号<br>   xcodebuild -version</p></blockquote><blockquote><p>   查看简洁用法<br>   xcodebuild -usage</p></blockquote><p>默认第一个target,和默认的configuration<br>对于Xcode workspace, 需要指定<code>-workspace</code>和<code>-scheme</code><br>对于Xcode project,如果有多个project, 你需要指定<code>-project</code></p><blockquote><p>常用格式一<br>xcodebuild [-project name.xcodeproj] [[-target targetname] … | -alltargets] -configuration configurationname] -sdk [sdkfullpath | sdkname]] [action …] [buildsetting=value …] [-userdefault=value …]</p></blockquote><blockquote><p>常用格式二<br>xcodebuild [-project name.xcodeproj] -scheme schemename [[-destination destinationspecifier] …] [-destination-timeout value] -configuration configurationname] -sdk [sdkfullpath | sdkname]] [action …] buildsetting=value …] [-userdefault=value …]</p></blockquote><blockquote><p>常用格式三<br>xcodebuild -workspace name.xcworkspace -scheme schemename [[-destination destinationspecifier] …] [-destination-timeout value] -configuration configurationname] [-sdk [sdkfullpath | sdkname]] [action …] [buildsetting=value …] [-userdefault=value …]</p></blockquote><blockquote><p>常用格式四<br>xcodebuild -exportArchive -archivePath xcarchivepath -exportPath destinationpath -exportOptionsPlist path</p></blockquote><blockquote><p>Xcode project常见使用命令</p><blockquote><p>clean<br>xcodebuild clean -configuration Debug/Release -alltargets -project name.xcodeproj</p></blockquote><blockquote><p>build<br>xcodebuild build -configuration Debug/Release -project name.xcodeproj</p></blockquote><blockquote><p>archive<br>xcodebuild archive -configuration Debug/Release -project name.xcodeproj -archivePath xcarchivepath</p></blockquote><blockquote><p>导出ipa<br>xcodebuild -exportArchive -archivePath xcarchivepath -exportPath destinationpath -exportOptionsPlist path</p></blockquote></blockquote><blockquote><p>Xcode workspace常见使用命令<br>clean</p><blockquote><p>xcodebuild clean -configuration Debug/Release -alltargets -workspace name.xcworkspace -scheme schemename</p></blockquote><blockquote><p>build<br>xcodebuild build -configuration Debug/Release -workspace name.xcworkspace -scheme schemename</p></blockquote><blockquote><p>archive<br>xcodebuild archive -configuration Debug/Release -workspace name.xcworkspace -scheme schemename -archivePath xcarchivepath</p></blockquote><blockquote><p>导出ipa<br>xcodebuild -exportArchive -archivePath xcarchivepath -exportPath destinationpath -exportOptionsPlist path</p></blockquote></blockquote><h3 id="常见action"><a href="#常见action" class="headerlink" title=" 常见action "></a><font color=orange> 常见action </font></h3><blockquote><p>build<br>编译</p></blockquote><blockquote><p>build-for-testing<br>编译并且运行单元测试</p></blockquote><blockquote><p>analyze<br>分析</p></blockquote><blockquote><p>archive<br>存档</p></blockquote><blockquote><p>test</p></blockquote><blockquote><p>test-without-building</p></blockquote><blockquote><p>install-src<br>复制资源到SRCROOT</p></blockquote><blockquote><p>install<br>安装</p></blockquote><blockquote><p>clean<br>清理</p></blockquote><h3 id="exportOptionsPlist"><a href="#exportOptionsPlist" class="headerlink" title=" exportOptionsPlist "></a><font color=orange> exportOptionsPlist </font></h3><p>这个文件可以自己生成, 但是推荐使用Xcode打包编译后, 选择相应的App Store、Ad Hoc、Development导出IPA后, 导出目录中会有一个相应的<code>ExportOptions.plist</code>文件, 这样出错的几率小很多。</p><p>Available keys for -exportOptionsPlist:</p><table><thead><tr><th style="text-align:center">Key</th><th style="text-align:center">Value</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">compileBitcode</td><td style="text-align:center">Bool</td><td style="text-align:center">For non-App Store exports, should Xcode re-compile the app from bitcode? Defaults to YES.</td></tr><tr><td style="text-align:center">destination</td><td style="text-align:center">String</td><td style="text-align:center">Determines whether the app is exported locally or uploaded to Apple. Options are export or upload. The available options vary based on the selected distribution method. Defaults to export.</td></tr><tr><td style="text-align:center">embedOnDemandResourcesAssetPacksInBundle</td><td style="text-align:center">Bool</td><td style="text-align:center">For non-App Store exports, if the app uses On Demand Resources and this is YES, asset packs are embedded in the app bundle so that the app can be tested without a server to host asset packs. Defaults to YES unless onDemandResourcesAssetPacksBaseURL is specified.</td></tr><tr><td style="text-align:center">generateAppStoreInformation</td><td style="text-align:center">Bool</td><td style="text-align:center">For App Store exports, should Xcode generate App Store Information for uploading with iTMSTransporter? Defaults to NO.</td></tr><tr><td style="text-align:center">iCloudContainerEnvironment</td><td style="text-align:center">String</td><td style="text-align:center">If the app is using CloudKit, this configures the “com.apple.developer.icloud-container-environment” entitlement. Available options vary depending on the type of provisioning profile used, but may include: Development and Production.</td></tr><tr><td style="text-align:center">installerSigningCertificate</td><td style="text-align:center">String</td><td style="text-align:center">For manual signing only. Provide a certificate name, SHA-1 hash, or automatic selector to use for signing. Automatic selectors allow Xcode to pick the newest installed certificate of a particular type. The available automatic selectors are “Mac Installer Distribution” and “Developer ID Installer”. Defaults to an automatic certificate selector matching the current distribution method.</td></tr><tr><td style="text-align:center">manifest</td><td style="text-align:center">Dictionary</td><td style="text-align:center">non-App Store exports, users can download your app over the web by opening your distribution manifest file in a web browser. To generate a distribution manifest, the value of this key should be a dictionary with three sub-keys: appURL, displayImageURL, fullSizeImageURL. The additional sub-key assetPackManifestURL is required when using on-demand resources.</td></tr><tr><td style="text-align:center">method</td><td style="text-align:center">String</td><td style="text-align:center">Describes how Xcode should export the archive. Available options: app-store, validation, package, ad-hoc, enterprise, development, developer-id, and mac-application. The list of options varies based on the type of archive. Defaults to development.</td></tr><tr><td style="text-align:center">onDemandResourcesAssetPacksBaseURL</td><td style="text-align:center">String</td><td style="text-align:center">non-App Store exports, if the app uses On Demand Resources and embedOnDemandResourcesAssetPacksInBundle isn’t YES, this should be a base URL specifying where asset packs are going to be hosted. This configures the app to download asset packs from the specified URL.</td></tr><tr><td style="text-align:center">provisioningProfiles</td><td style="text-align:center">Dictionary</td><td style="text-align:center">For manual signing only. Specify the provisioning profile to use for each executable in your app. Keys in this dictionary are the bundle identifiers of executables; values are the provisioning profile name or UUID to use.</td></tr><tr><td style="text-align:center">signingCertificate</td><td style="text-align:center">String</td><td style="text-align:center">For manual signing only. Provide a certificate name, SHA-1 hash, or automatic selector to use for signing. Automatic selectors allow Xcode to pick the newest installed certificate of a particular type. The available automatic selectors are “Mac App Distribution”, “iOS Developer”, “iOS Distribution”, “Developer ID Application”, and “Mac Developer”. Defaults to an automatic certificate selector matching the current distribution method.</td></tr><tr><td style="text-align:center">signingStyle</td><td style="text-align:center">String</td><td style="text-align:center">The signing style to use when re-signing the app for distribution. Options are manual or automatic. Apps that were automatically signed when archived can be signed manually or automatically during distribution, and default to automatic. Apps that were manually signed when archived must be manually signed during distribtion, so the value of signingStyle is ignored.</td></tr><tr><td style="text-align:center">stripSwiftSymbols</td><td style="text-align:center">Bool</td><td style="text-align:center">Should symbols be stripped from Swift libraries in your IPA? Defaults to YES.</td></tr><tr><td style="text-align:center">teamID</td><td style="text-align:center">String</td><td style="text-align:center">Developer Portal team to use for this export. Defaults to the team used to build the archive.</td></tr><tr><td style="text-align:center">thinning</td><td style="text-align:center">String</td><td style="text-align:center">non-App Store exports, should Xcode thin the package for one or more device variants? Available options: <none> (Xcode produces a non-thinned universal app), <thin-for-all-variants> (Xcode produces a universal app and all available thinned variants), or a model identifier for a specific device (e.g. “iPhone7,1”). Defaults to <none>.</td></tr><tr><td style="text-align:center">uploadBitcode</td><td style="text-align:center">Bool</td><td style="text-align:center">For App Store exports, should the package include bitcode? Defaults to YES.</td></tr><tr><td style="text-align:center">uploadSymbols</td><td style="text-align:center">Bool</td><td style="text-align:center">For App Store exports, should the package include symbols? Defaults to YES.</td></tr></tbody></table><h2 id="自动上传到App-Store或者蒲公英"><a href="#自动上传到App-Store或者蒲公英" class="headerlink" title=" 自动上传到App Store或者蒲公英 "></a><font color=orange> 自动上传到App Store或者蒲公英 </font></h2><h3 id="自动上传到App-Store"><a href="#自动上传到App-Store" class="headerlink" title=" 自动上传到App Store "></a><font color=orange> 自动上传到App Store </font></h3><blockquote><p>使用altool上传, 需要ApplID和密码<br>/Applications/Xcode.app/Contents/Applications/Application\ Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool –validate-app -f ipaPath -u AppleID -p password -t ios –output-format xml</p></blockquote><h3 id="自动上传到蒲公英"><a href="#自动上传到蒲公英" class="headerlink" title=" 自动上传到蒲公英 "></a><font color=orange> 自动上传到蒲公英 </font></h3><blockquote><p>使用Shell脚本<br>curl -F “file=xxx.ipa” -F “uKey=xxx” -F “_api_key=xxx” <a href="https://qiniu-storage.pgyer.com/apiv1/app/upload">https://qiniu-storage.pgyer.com/apiv1/app/upload</a></p></blockquote><h2 id="结束"><a href="#结束" class="headerlink" title=" 结束 "></a><font color=orange> 结束 </font></h2><p>这里我就不放脚本了, 自己动手丰衣足食~~~<br>可以根据自己项目的配置, 个性化自己的打包脚本!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/images/iOS/iOS_auto_build_ipa.jpeg&quot; alt=&quot;hello&quot; style=&quot;width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;最近闲暇时间研究了一下Xcode自动编译、打包以及通过脚本更改一个配置文件, 主要涉及的命令如下: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xcpretty&lt;ul&gt;
&lt;li&gt;美化xcodebuild的输出日志&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;xcodebuild&lt;ul&gt;
&lt;li&gt;苹果发布自动构建的工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PlistBuddy&lt;ul&gt;
&lt;li&gt;Mac自带的专门解析plist的小工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;grep&lt;ul&gt;
&lt;li&gt;文本搜索工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;awk&lt;ul&gt;
&lt;li&gt;文本分析工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;sed&lt;ul&gt;
&lt;li&gt;文本编辑工具&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里只是简单介绍了这些命令的几种用法, 需要深入了解的可自行搜索学习。&lt;br&gt;
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="持续集成" scheme="http://yoursite.com/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="Xcode" scheme="http://yoursite.com/tags/Xcode/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7安装SS服务端以及相关客户端</title>
    <link href="http://yoursite.com/2018/04/19/CentOS%207%E5%AE%89%E8%A3%85Shadowsocks%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/04/19/CentOS 7安装Shadowsocks服务端以及相关的客户端使用/</id>
    <published>2018-04-19T06:40:11.000Z</published>
    <updated>2019-04-29T08:39:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近入手一个相对便宜的($8.5/年)<a href="https://www.neq3host.com">VPS服务器</a>, 支持支付宝支付, IP是纽约的, 延时大约300ms, 对于我这种要求不是很高的用户来说足够了, 用途么你懂的^.^</p><span id="more"></span><h2 id="安装CentOS服务端ss程序"><a href="#安装CentOS服务端ss程序" class="headerlink" title="安装CentOS服务端ss程序"></a><font color=orange>安装CentOS服务端ss程序</font></h2><ul><li>安装系统<ul><li>购买好之后VPS之后, 我们安装好操作系统, 选择CentOS 7.</li></ul></li><li>安装SS服务<ul><li>修改系统时间<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data -s &#x27;19/04/2018 14:40:11&#x27; //这里改成当前时间</span><br><span class="line">hwclock -w  //将修改后的时间写入硬件</span><br></pre></td></tr></table></figure></li><li>安装ss服务<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O shadowsocks-libev.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev.sh</span><br><span class="line"></span><br><span class="line">chmod +x shadowsocks-libev.sh</span><br><span class="line"></span><br><span class="line">./shadowsocks-libev.sh 2&gt;&amp;1 | tee shadowsocks-libev.log</span><br></pre></td></tr></table></figure><ul><li>安装过程中会提示设置密码、端口和加密方式(加密方式推荐chacha20, 速度快安全).</li></ul></li></ul></li><li>启动、停止、重启和状态命令<ul><li>启动：<code>/etc/init.d/shadowsocks start</code></li><li>停止：<code>/etc/init.d/shadowsocks stop</code></li><li>重启：<code>/etc/init.d/shadowsocks restart</code></li><li>查看状态：<code>/etc/init.d/shadowsocks status</code></li></ul></li></ul><h2 id="安装BBR加速服务"><a href="#安装BBR加速服务" class="headerlink" title="安装BBR加速服务"></a><font color=orange>安装BBR加速服务</font></h2><p>BBR简称TCP-BBR拥塞控制算法，目的是要尽量跑满带宽, 并且尽量不要有排队的情况, 提升VPS网速效果明显。BBR算法出自谷歌.</p><ul><li>更新系统&amp;&amp;安装内核<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum update -y</span><br><span class="line">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br><span class="line">yum --enablerepo=elrepo-kernel install kernel-ml</span><br><span class="line">grub2-set-default 0</span><br></pre></td></tr></table></figure></li><li>重启系统<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure></li><li>配置tcp<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#编辑配置文件</span><br><span class="line">vi /etc/sysctl.conf</span><br><span class="line">#加入如下两行配置信息</span><br><span class="line">net.core.default_qdisc = fq</span><br><span class="line">net.ipv4.tcp_congestion_control = bbr</span><br></pre></td></tr></table></figure></li><li>运行BBR服务<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#运行BBR服务</span><br><span class="line">sysctl -p</span><br><span class="line">#查看BBR服务是否生效</span><br><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure></li></ul><h2 id="相关客户端"><a href="#相关客户端" class="headerlink" title="相关客户端"></a><font color=orange>相关客户端</font></h2><ul><li>iOS可以使用PP助手下载安装<code>Shadowrocket</code></li><li>Mac和Windows: 使用<code>Shadowsocks客户端</code></li></ul><h3 id="CentOS-7使用ss客户端"><a href="#CentOS-7使用ss客户端" class="headerlink" title="CentOS 7使用ss客户端"></a><font color=orange>CentOS 7使用ss客户端</font></h3><ul><li>安装epel源、安装pip包管理<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install epel-release</span><br><span class="line">sudo yum -y install python-pip</span><br></pre></td></tr></table></figure></li><li>安装Shadowsocks客户端<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install shadowsocks</span><br></pre></td></tr></table></figure></li><li>配置Shadowsocks连接<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    # Shadowsocks服务器地址</span><br><span class="line">    &quot;server&quot;:&quot;x.x.x.x&quot;,</span><br><span class="line">    # Shadowsocks服务器端口</span><br><span class="line">    &quot;server_port&quot;:1035,</span><br><span class="line">    # 本地IP</span><br><span class="line">    &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    # 本地端口</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    # Shadowsocks连接密码  </span><br><span class="line">    &quot;password&quot;:&quot;password&quot;,</span><br><span class="line">    # 等待超时时间 </span><br><span class="line">    &quot;timeout&quot;:300,  </span><br><span class="line">    # 加密方式</span><br><span class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,  </span><br><span class="line">    # true或false。开启fast_open以降低延迟，但要求Linux内核在3.7+</span><br><span class="line">    &quot;fast_open&quot;: false,  </span><br><span class="line">    #工作线程数 </span><br><span class="line">    &quot;workers&quot;: 1  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置自启动 <ul><li><code>vi /etc/systemd/system/shadowsocks.service</code></li><li>添加以下内容<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks</span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStart=/usr/bin/sslocal -c /etc/shadowsocks/shadowsocks.json</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li></ul></li><li><p>开机启动、启动、重启、停止、状态</p><ul><li>开机启动: <code>systemctl enable shadowsocks.service</code></li><li>启动: <code>systemctl start shadowsocks.service</code></li><li>重启: <code>systemctl restart shadowsocks.service</code></li><li>停止: <code>systemctl stop shadowsocks.service</code></li><li>状态<code>systemctl status shadowsocks.service</code></li></ul></li><li><p>如果加密方式选择的是<code>chacha20</code>, 会启动不成功, 需要编译 libsodium 以支持 chacha20 加密方式</p><ul><li>安装相关开发工具<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall &quot;Development Tools&quot; -y</span><br><span class="line">yum install wget -y</span><br></pre></td></tr></table></figure></li><li>下载 libsodium 最新版本<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#官网地址</span><br><span class="line">wget https://download.libsodium.org/libsodium/releases/LATEST.tar.gz</span><br></pre></td></tr></table></figure></li><li>解压<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xzvf LATEST.tar.gz</span><br></pre></td></tr></table></figure></li><li>进入解压文件夹, 生成配置文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd libsodium*</span><br><span class="line"></span><br><span class="line">./configure</span><br></pre></td></tr></table></figure></li><li>编译并安装<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j8 &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li>添加运行库位置并加载运行库<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo /usr/local/lib &gt; /etc/ld.so.conf.d/usr_local_lib.conf</span><br><span class="line"></span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure></li></ul></li><li>验证Shadowsocks客户端服务是否正常运行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#会返回你的Shadowsock服务器IP</span><br><span class="line">curl --socks5 127.0.0.1:1080 http://httpbin.org/ip</span><br></pre></td></tr></table></figure></li><li>安装配置privoxy,Shadowsocks使用的socks5协议,而终端很多工具目前只支持http和https等协议，所以我们要用工具把socks5转成http协议。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install privoxy -y</span><br><span class="line">systemctl enable privoxy</span><br><span class="line">systemctl start privoxy</span><br><span class="line">systemctl status privoxy</span><br></pre></td></tr></table></figure></li><li>配置privoxy, <code>vi /etc/privoxy/config</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listen-address 127.0.0.1:8118 # 8118 是默认端口，不用改</span><br><span class="line">forward-socks5t / 127.0.0.1:1080 . #转发到本地端口，注意最后有个点, 端口是上面ss安装时的本地端口</span><br></pre></td></tr></table></figure></li><li>设置http、https代理, <code>vi /etc/profile</code>在最后添加如下信息<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PROXY_HOST=127.0.0.1</span><br><span class="line">export http_proxy=http://$PROXY_HOST:8118</span><br><span class="line">export https_proxy=http://$PROXY_HOST:8118</span><br></pre></td></tr></table></figure></li><li>重载环境变量<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li><li>测试代理<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -I www.google.com </span><br><span class="line">#查看ip信息</span><br><span class="line">curl ip.cn</span><br></pre></td></tr></table></figure></li><li>取消使用代理<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">while read var; do unset $var; done &lt; &lt;(env | grep -i proxy | awk -F= &#x27;&#123;print $1&#125;&#x27;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近入手一个相对便宜的($8.5/年)&lt;a href=&quot;https://www.neq3host.com&quot;&gt;VPS服务器&lt;/a&gt;, 支持支付宝支付, IP是纽约的, 延时大约300ms, 对于我这种要求不是很高的用户来说足够了, 用途么你懂的^.^&lt;/p&gt;
    
    </summary>
    
    
      <category term="Shadowsocks" scheme="http://yoursite.com/tags/Shadowsocks/"/>
    
      <category term="VPS" scheme="http://yoursite.com/tags/VPS/"/>
    
      <category term="翻墙" scheme="http://yoursite.com/tags/%E7%BF%BB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>Swift中真机模拟器判断</title>
    <link href="http://yoursite.com/2018/04/16/iOS/Swift%E4%B8%AD%E7%9C%9F%E6%9C%BA%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%88%A4%E6%96%AD/"/>
    <id>http://yoursite.com/2018/04/16/iOS/Swift中真机模拟器判断/</id>
    <published>2018-04-16T02:47:33.000Z</published>
    <updated>2019-04-29T08:39:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开发中经常会碰到一些库没有模拟器架构(i386,x86_64), 所以导致无法模拟器运行, 造成开发工作中相当不便。</p><span id="more"></span><h3 id="Objective-C中判断真机模拟器"><a href="#Objective-C中判断真机模拟器" class="headerlink" title="Objective-C中判断真机模拟器"></a><font color=orange>Objective-C中判断真机模拟器</font></h3><p>在Objective-C中, <code>TargetConditionals.h</code>中定义了宏<code>TARGET_OS_SIMULATOR</code>, 在模拟器SDK中值是1, 而真机中值是0.</p><p>所以, 我们可以Objective-C中使用下面的代码进行条件编译</p><blockquote><p>#if TARGET_IPHONE_SIMULATOR<br>//模拟器</p></blockquote><p>#define IS_SIMULATOR true</p><p>#else<br>//真机</p><p>#define IS_SIMULATOR false</p><p>#endif</p><h3 id="Swift中判断真机模拟器"><a href="#Swift中判断真机模拟器" class="headerlink" title="Swift中判断真机模拟器"></a><font color=orange>Swift中判断真机模拟器</font></h3><p>在Swift中<code>TARGET_IPHONE_SIMULATOR</code>已经弃用了, 如果使用下面的代码去判断会失效.</p><blockquote><p>#if !(TARGET_IPHONE_SIMULATOR)<br>//真机</p></blockquote><p>#endif</p><p>实测, 下面的宏是有效的</p><blockquote><p>#if !(arch(i386) || arch(x86_64))<br>//真机</p></blockquote><p>#else<br>//模拟器</p><p>#endif</p><p><font color=red>需要注意的是</font>: </p><blockquote><p>如果Swift项目中需要使用Objective-C代码, 那么在Objective-C代码和桥接文件中还是需要使用宏<code>TARGET_IPHONE_SIMULATOR</code>进行判断</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发中经常会碰到一些库没有模拟器架构(i386,x86_64), 所以导致无法模拟器运行, 造成开发工作中相当不便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>使用Mac自带Apache和itms-services安装ipa</title>
    <link href="http://yoursite.com/2018/04/10/iOS/%E4%BD%BF%E7%94%A8Mac%E8%87%AA%E5%B8%A6Apache%E5%92%8Citms-services%E5%AE%89%E8%A3%85ipa/"/>
    <id>http://yoursite.com/2018/04/10/iOS/使用Mac自带Apache和itms-services安装ipa/</id>
    <published>2018-04-10T03:40:09.000Z</published>
    <updated>2019-07-09T07:17:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过<code>itms-services</code>协议, 可以把企业签名分发给用户安装或者使用<code>adhoc</code>打包的ipa发送给指定用户安装。</p><span id="more"></span><h2 id="itms-services协议"><a href="#itms-services协议" class="headerlink" title=" itms-services协议 "></a><font color=orange> itms-services协议 </font></h2><h3 id="plist文件"><a href="#plist文件" class="headerlink" title=" plist文件 "></a><font color=orange> plist文件 </font></h3><p>准备下面的<code>plist</code>文件, 注意修改里面的参数</p><ul><li>ipa地址: http或者https都可以</li><li>display-image: 应用图标的57*57大小的图片url</li><li>full-size-image: 应用图标的512*512大小的图片url</li><li>bundle-identifier: 应用的Bundle Identifier</li><li>bundle-version: 应用的版本号</li><li>title: 应用名称</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>items<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>assets<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>software-package<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>修改为你的ipa地址<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>display-image<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>修改为你的App图标url 57*57<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>full-size-image<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>修改为你的App图标url 512*512<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>metadata<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-identifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>修改为你的Bundle identifier<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle-version<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>修改为你的版本号<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>kind<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>software<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>title<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>修改为你的App名称<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="安装ipa"><a href="#安装ipa" class="headerlink" title=" 安装ipa "></a><font color=orange> 安装ipa </font></h3><p>iOS 7.0以后需要把plist文件部署在<font color=red><code>HTTPS</code></font>的机器上面(没有服务器你也可以放在<a href="https://www.github.com">github</a>等上面), 然后使用下面的地址在safari中打开即可安装ipa。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a style=&quot;color:#69DEDA&quot; href=&quot;itms-services://?action=download-manifest&amp;url=https://xxx.xxx.xxx.xxx/xxx.plist&quot;&gt;</span><br><span class="line">//或者</span><br><span class="line">window.location = &quot;itms-services://?action=download-manifest&amp;url=https://xxx.xxx.xxx.xxx/xxx.plist&quot;</span><br></pre></td></tr></table></figure><h2 id="Apache"><a href="#Apache" class="headerlink" title=" Apache "></a><font color=orange> Apache </font></h2><h3 id="生成自签名SSL证书"><a href="#生成自签名SSL证书" class="headerlink" title=" 生成自签名SSL证书 "></a><font color=orange> 生成自签名SSL证书 </font></h3><ul><li>1、创建SSL证书路径</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p ~/Desktop/ssl</span><br><span class="line">cd ~/Desktop/ssl</span><br></pre></td></tr></table></figure><ul><li>2、在SSL文件夹中生成私钥</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openssl genrsa -out server.key 2048</span><br></pre></td></tr></table></figure><ul><li>3、生成自签名证书, 此步骤需要输入相关信息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openssl req -new -sha256 -x509 -days 365 -key server.key -out server.crt</span><br></pre></td></tr></table></figure><pre><code>* Country Name: 国家英文简称: 如: `CN`* Province Name: 省份名称* City Name: 城市名称* Organization Name: 组织名称* Organization Uint Name: 组织单元名称* Common Name: &lt;font color=red&gt;注意需要填写Mac的ip地址&lt;/font&gt;, 如: 192.168.1.101* Email Address: 邮箱地址</code></pre><h3 id="Apache-1"><a href="#Apache-1" class="headerlink" title=" Apache "></a><font color=orange> Apache </font></h3><p>Mac OS自带Apache, 在<code>/etc/apache2/</code>或者<code>/private/etc/apache2</code>中, 执行开启命令即可打开<code>http://localhost</code>或者<code>http://ip</code>访问了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##开启</span></span></span><br><span class="line">sudo apachectl start</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##关闭</span></span></span><br><span class="line">sudo apachectl stop</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##重启</span></span></span><br><span class="line">sudo apachectl restart</span><br></pre></td></tr></table></figure><p>Mac自带Apache的<code>rootDocument</code>默认是在<code>/Library/WebServer/Documents/</code>中, 你在配置文件中更改该路径。<br>如果不更改, 默认修改该路径会提示需要鉴定, 可以执行<code>sudo chmod 777 /Library/WebServer/Documents</code>更改权限。</p><h3 id="配置Apache的SSL"><a href="#配置Apache的SSL" class="headerlink" title=" 配置Apache的SSL "></a><font color=orange> 配置Apache的SSL </font></h3><ul><li>1、将ssl文件夹拷贝到Apache目录中</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -r ~/Desktop/ssl /etc/apache2/ssl</span><br></pre></td></tr></table></figure><ul><li>2、编辑<code>/etc/apache2/httpd.conf</code>, 去掉下面的注释。如提示无权限更改, 可以先把文件拷贝出来, 更改完成后再覆盖回去。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LoadModule ssl_module libexec/apache2/mod_ssl.so</span><br><span class="line">Include /private/etc/apache2/extra/httpd-vhosts.conf</span><br><span class="line">Include /private/etc/apache2/extra/httpd-ssl.conf</span><br><span class="line">LoadModule socache_shmcb_module libexec/apache2/mod_socache_shmcb.so</span><br></pre></td></tr></table></figure><ul><li>3、编辑<code>/etc/apache2/extra/httpd-ssl.conf</code>, 去掉下面的注释, 注意路径和你拷贝到<code>/etc/apache2</code>中的ssl证书路径一致。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SSLCertificateFile &quot;/private/etc/apache2/ssl/server.crt&quot;</span><br><span class="line">SSLCertificateKeyFile &quot;/private/etc/apache2/ssl/server.key&quot;</span><br></pre></td></tr></table></figure><ul><li>4、编辑<code>/etc/apache2/extra/httpd-vhosts.conf</code>, 修改文件为下面所示:<ul><li>ServerName: <font color=red>修改为你的地址</font></li><li>DocumentRoot: 默认是<code>&quot;/Library/WebServer/Documents&quot;</code></li><li>SSLCertificateFile和SSLCertificateKeyFile: 你拷贝进<code>/etc/apache2</code>里面的实际证书位置</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    #ServerAdmin webmaster@dummy-host2.example.com</span><br><span class="line">    DocumentRoot &quot;/Library/WebServer/Documents&quot;</span><br><span class="line">    ServerName 你的Ip地址</span><br><span class="line">    ErrorLog &quot;/private/var/log/apache2/dummy-host2.example.com-error_log&quot;</span><br><span class="line">    CustomLog &quot;/private/var/log/apache2/dummy-host2.example.com-access_log&quot; common</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:443&gt;</span><br><span class="line">  SSLEngine on</span><br><span class="line">  SSLCertificateFile /private/etc/apache2/ssl/server.crt</span><br><span class="line">  SSLCertificateKeyFile /private/etc/apache2/ssl/server.key</span><br><span class="line">  ServerName 你的Ip地址</span><br><span class="line">  DocumentRoot &quot;/Library/WebServer/Documents&quot;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><ul><li>6、重启服务, 即可访问<code>https://ip</code></li></ul><h2 id="最后的配置"><a href="#最后的配置" class="headerlink" title=" 最后的配置 "></a><font color=orange> 最后的配置 </font></h2><p>由于我们使用的自签名证书, 浏览器等无法验证其安全性, 导致浏览器提示不安全的网站, iPhone的safari安装ipa时无法安装。</p><p>将ipa、plist和生成的证书<code>~/Desktop/ssl/server.crt</code>拷贝到<code>/Library/WebServer/Documents/</code>中, 修改<code>index.html.en</code>, 注意修改里面的<code>server</code>路径和<code>plist</code>路径以及plist文件中<code>ipa</code>、图片的路径即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>安装ipa<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;color:#69DEDA&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://xx.xx.xx.xx/server.crt&quot;</span>&gt;</span>安装证书<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;6&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">style</span>=<span class="string">&quot;color:#69DEDA&quot;</span> <span class="attr">href</span>=<span class="string">&quot;itms-services://?action=download-manifest&amp;url=https://xxx.xxx.xxx/xxx.plist&quot;</span>&gt;</span>点击安装<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>将生成的<code>~/Desktop/ssl/server.crt</code>提供给用户安装。</li><li>Mac、Windows: 信任证书</li><li>iPhone<ul><li>在<font color=purple>iPhone-设置-通用-描述文件</font>中安装这个描述文件</li><li>在<font color=purple>iPhone-设置-通用-关于本机</font>中允许该证书的完全信任即可。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过&lt;code&gt;itms-services&lt;/code&gt;协议, 可以把企业签名分发给用户安装或者使用&lt;code&gt;adhoc&lt;/code&gt;打包的ipa发送给指定用户安装。&lt;/p&gt;
    
    </summary>
    
    
      <category term="资料整理" scheme="http://yoursite.com/tags/%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot</title>
    <link href="http://yoursite.com/2018/03/20/Java%20Web/Spring%20Boot/"/>
    <id>http://yoursite.com/2018/03/20/Java Web/Spring Boot/</id>
    <published>2018-03-20T02:43:59.000Z</published>
    <updated>2023-06-25T07:57:27.374Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/images/java/Spring_Boot_pic.jpg" alt="hello" style="width: 40%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"/></p><h2 id="什么是Spring-Boot"><a href="#什么是Spring-Boot" class="headerlink" title="什么是Spring Boot"></a><font color=orange>什么是Spring Boot</font></h2><p>随着动态语言的流行(Ruby、Groovy、Scala、Node.js、Python),Java开发显得格外笨重: 繁多的配置、低下的开发效率、复杂的部署流程.</p><p>Spring Boot应用而生, 它使用”习惯优于配置”的理念可以快速的搭建一个项目.使用Spring Boot很容易创建一个独立运行的(运行jar、内嵌Servlet容器)、基于Spring的项目.</p><p><a href="https://spring.io/projects/spring-boot#learn">官方文档</a></p><span id="more"></span><h2 id="Spring-Boot核心功能"><a href="#Spring-Boot核心功能" class="headerlink" title="Spring Boot核心功能"></a><font color=orange>Spring Boot核心功能</font></h2><h3 id="独立运行的Spring项目"><a href="#独立运行的Spring项目" class="headerlink" title="独立运行的Spring项目"></a><font color=orange>独立运行的Spring项目</font></h3><p>Spring Boot可以以jar包的形式独立运行, 运行一个Spring Boot项目只需通过<code>java -jar xxx.jar</code>来运行.</p><h3 id="内嵌Servlet容器"><a href="#内嵌Servlet容器" class="headerlink" title="内嵌Servlet容器"></a><font color=orange>内嵌Servlet容器</font></h3><p>Spring Boot可以选择内嵌Tomcat、Jetty或者Undertow, 这样我们无需以war包的形式部署项目.</p><h3 id="提供starter简化Maven配置"><a href="#提供starter简化Maven配置" class="headerlink" title="提供starter简化Maven配置"></a><font color=orange>提供starter简化Maven配置</font></h3><p>Spring提供了一系列的starter pom来简化Maven的依赖加载, 例如, 当你使用了spring-boot-starter-web时会自动加载相关jar包.</p><h3 id="自动配置Spring"><a href="#自动配置Spring" class="headerlink" title="自动配置Spring"></a><font color=orange>自动配置Spring</font></h3><p>Spring Boot会根据在类路径中的jar包、类, 为jar包里面的类自动配置Bean, 我们也可以自定义自动配置.</p><h3 id="准生成的应用监控"><a href="#准生成的应用监控" class="headerlink" title="准生成的应用监控"></a><font color=orange>准生成的应用监控</font></h3><p>Spring Boot提供基于http、ssh、telnet对运行时的项目进行监控.</p><h3 id="无代码生成和xml配置"><a href="#无代码生成和xml配置" class="headerlink" title="无代码生成和xml配置"></a><font color=orange>无代码生成和xml配置</font></h3><p>Spring Boot可以不借助代码来实现, 可以通过条件注解来实现, 这是Spring 4.x提供的新特性.<br>Spring 4.x提倡使用Java配置和注解配置组合, 而Spring Boot不需要任何xml配置即可实现Spring的所有配置.</p><h2 id="Spring-Boot快速开始"><a href="#Spring-Boot快速开始" class="headerlink" title="Spring Boot快速开始"></a><font color=orange>Spring Boot快速开始</font></h2><h3 id="使用网站快速构建项目"><a href="#使用网站快速构建项目" class="headerlink" title="使用网站快速构建项目"></a><font color=orange>使用网站快速构建项目</font></h3><ul><li>1、<a href="http://start.spring.io/">快速构建网址</a><ul><li>1.1、这里填写项目信息, 选择Maven项目, Java语言, Spring Boot的版本.</li><li>1.2、选择项目所用的技术, 这里每一项技术都是Spring boot的starter pom.</li><li>1.3、Generate Project下载项目</li></ul></li></ul><h3 id="使用开发工具快速构建"><a href="#使用开发工具快速构建" class="headerlink" title="使用开发工具快速构建"></a><font color=orange>使用开发工具快速构建</font></h3><ul><li>Eclipse<ul><li>新建一个项目选择<code>Spring Starter Project</code></li><li>填写项目信息和使用的技术</li></ul></li><li>Intellij IDEA<ul><li>新建一个项目选择<code>Spring Initializr</code></li><li>填写项目信息和使用的技术</li></ul></li></ul><h3 id="手工创建Spring-Boot项目"><a href="#手工创建Spring-Boot项目" class="headerlink" title="手工创建Spring Boot项目"></a><font color=orange>手工创建Spring Boot项目</font></h3><ul><li>首先创建Maven项目</li><li>修改pom.xml, 添加Spring Boot的父级依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>修改pom.xml, 在dependencies添加Web支持的<code>starter pom</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li><li>修改pom.xml, 添加Spring Boot的编译插件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring-Boot-CLI"><a href="#Spring-Boot-CLI" class="headerlink" title="Spring Boot CLI"></a><font color=orange>Spring Boot CLI</font></h2><p>Spring Boot CLI是Spring Boot提供的控制台命令工具.在Spring Boot CLI中可以跑Groovy脚本<br><a href="https://repo.spring.io/milestone/org/springframework/boot/spring-boot-cli">下载地址</a></p><h3 id="Windows下安装"><a href="#Windows下安装" class="headerlink" title="Windows下安装"></a><font color=orange>Windows下安装</font></h3><p>下载Spring-boot-cli, 设置环境变量和path即可</p><h3 id="Linux下安装"><a href="#Linux下安装" class="headerlink" title="Linux下安装"></a><font color=orange>Linux下安装</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap pivotal/tap</span><br><span class="line">brew install springboot</span><br></pre></td></tr></table></figure><h3 id="验证安装是否成功"><a href="#验证安装是否成功" class="headerlink" title="验证安装是否成功"></a><font color=orange>验证安装是否成功</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring --version</span><br></pre></td></tr></table></figure><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a><font color=orange>创建项目</font></h3><ul><li>查看现有技术列表<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring init --list</span><br></pre></td></tr></table></figure></li><li>初始化项目<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring init --build=maven --java-version=1.8 --dependencies=web --packaging=jar --boot-version=2.0.2.RELEASE --groupId=com.coppco --artifactId=springboot</span><br></pre></td></tr></table></figure></li></ul><h3 id="Spring-Boot-CLI发布一个简单服务"><a href="#Spring-Boot-CLI发布一个简单服务" class="headerlink" title="Spring Boot CLI发布一个简单服务"></a><font color=orange>Spring Boot CLI发布一个简单服务</font></h3><ul><li>新建<code>hello.groovy</code>文件, 内容如下<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TeacherController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/getTeacherInfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Teacher <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Teacher</span> <span class="variable">teacher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;29&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> teacher;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name, String age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>运行该脚本<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring run hello.groovy -- --server.port=9000</span><br></pre></td></tr></table></figure></li><li>访问对应的url即可<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/getTeacherInfo</span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring-Boot-详解"><a href="#Spring-Boot-详解" class="headerlink" title="Spring Boot 详解"></a><font color=orange>Spring Boot 详解</font></h2><h3 id="入口类和-SpringBootApplication"><a href="#入口类和-SpringBootApplication" class="headerlink" title="入口类和@SpringBootApplication"></a><font color=orange>入口类和@SpringBootApplication</font></h3><ul><li><p>入口类<br>Spring Boot通常默认有一个名为<code>*Application</code>的入口类(当然也可以更改为其他名称), 入口类有一个main方法, 这个方法其实就是一个标准的Java应用的入口方法. 在main方法中<code>SpringApplication.run(xxx.class, args)</code>启动Spring Boot应用项目.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ImportResource(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Starter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Starter.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@SpringBootApplication<br><code>@SpringBootApplication</code>是一个组合注解, 它组合了<code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code>. 而<code>@SpringBootConfiguration</code>也是一个组合注解: 它组合了<code>@Configuration</code>.<br>若不使用<code>@SpringBootApplication</code>, 则可以使用<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code>和<code>@Configuration</code>代替.<br><font color=red>Spring Boot会自动扫描<code>@SpringBootApplication</code>注解所在类的同级包以及下级包里的Bean. 建议入口类放置在<code>groupId+arctifactId</code>组合的包名下.</font></p><ul><li>@EnableAutoConfiguration<ul><li>让Spring Boot根据类路径中的jar包依赖为当前项目进行自动配置</li><li>例如: 当添加了<code>spring-boot-starter-web</code>依赖, 会自动添加<code>Tomcat</code>、<code>Spring MVC</code>的依赖.</li></ul></li></ul></li><li>@ImportResource<br>虽然Spring 4.x完全可以不使用xml方式来配置相关配置, 但是我们任然希望项目的一些配置使用xml方式来进行配置(如数据库相关的配置), 那么我们可以使用该注解引入配置文件.</li></ul><h3 id="关闭特定的自动配置"><a href="#关闭特定的自动配置" class="headerlink" title="关闭特定的自动配置"></a><font color=orange>关闭特定的自动配置</font></h3><p>使用@SpringBootApplication注解的exclude参数:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关闭数据库默认自动配置</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</span></span><br></pre></td></tr></table></figure></p><h3 id="定制Banner"><a href="#定制Banner" class="headerlink" title="定制Banner"></a><font color=orange>定制Banner</font></h3><ul><li>修改Banner<ul><li>在Spring Boot启动时会有一个默认图案</li><li>在<code>src/main/resources</code>下新建一个banner.txt</li><li>通过<a href="http://patorjk.com">图像生成网站</a>生成字符, 并拷贝到banner.txt中</li><li>再次启动项目</li></ul></li><li>关闭Banner<br>最新版本在main方法中修改: <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1: </span></span><br><span class="line"><span class="type">SpringApplication</span> <span class="variable">application</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(Starter.class);</span><br><span class="line">        application.setBannerMode(Banner.Mode.OFF);</span><br><span class="line">        application.run(args);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2:</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">SpringApplicationBuilder</span>(Starter.class)</span><br><span class="line">                .bannerMode(Banner.Mode.OFF)</span><br><span class="line">                .run(args);</span><br></pre></td></tr></table></figure></li></ul><p>如果是比较老的版本:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1: </span></span><br><span class="line"><span class="type">SpringApplication</span> <span class="variable">application</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(Starter.class);</span><br><span class="line">application.setShowBanner(<span class="literal">false</span>);</span><br><span class="line">application.run(args);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2:</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">SpringApplicationBuilder</span>(Starter.class)</span><br><span class="line">                .showBanner(<span class="literal">false</span>)</span><br><span class="line">                .run(args);</span><br></pre></td></tr></table></figure></p><h3 id="Spring-Boot的配置文件"><a href="#Spring-Boot的配置文件" class="headerlink" title="Spring Boot的配置文件"></a><font color=orange>Spring Boot的配置文件</font></h3><p>Spring Boot使用一个全局的配置文件<code>application.properties</code>或者<code>application.yml</code>放置在<code>src/main/resources</code>中.</p><p>Spring Boot不仅支持常规的properties配置文件, 还支持yaml语言的配置文件.而Intellij IDEA只对Spring Boot的properties配置提供自动提示功能, 所以推荐使用properties进行配置.</p><h4 id="更改默认配置"><a href="#更改默认配置" class="headerlink" title="更改默认配置"></a><font color=orange>更改默认配置</font></h4><p>如将Tomcat默认端口号8080更改为9090, 并将默认访问路径从<code>/</code>更改为<code>/hello</code>.<br>最新版本的Spring Boot在<code>application.properties</code>中添加:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#端口</span><br><span class="line">server.port=9090</span><br><span class="line">#访问路径</span><br><span class="line">server.servlet.context-path=/hello</span><br></pre></td></tr></table></figure></p><p>其他的很多属性都可以修改.</p><h4 id="Spring-Boot使用xml配置"><a href="#Spring-Boot使用xml配置" class="headerlink" title="Spring Boot使用xml配置"></a><font color=orange>Spring Boot使用xml配置</font></h4><p>以前方式的xml配置也是支持的,  在入口类上使用<code>@ImportResource</code>注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource(&quot;classpath:applicationContext.xml&quot;)</span></span><br></pre></td></tr></table></figure></p><h3 id="starter-pom"><a href="#starter-pom" class="headerlink" title="starter pom"></a><font color=orange>starter pom</font></h3><p>Spring Boot为我们提供了简化企业级开发绝大多数场景的starter pom, 只要使用了对应的starter pom, Spring Boot就会自动配置Bean.</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">spring-boot-starter</td><td style="text-align:center">SpringBoot核心starter，包含自动配置、日志、yaml配置文件的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-actuator</td><td style="text-align:center">用于使用Spring Boot的Actuator，它提供了production ready功能来帮助你监控和管理应用程序</td></tr><tr><td style="text-align:center">spring-boot-starter-activemq</td><td style="text-align:center">用于使用Apache ActiveMQ实现JMS消息</td></tr><tr><td style="text-align:center">spring-boot-starter-amqp</td><td style="text-align:center">用于使用Spring AMQP和Rabbit MQ</td></tr><tr><td style="text-align:center">spring-boot-starter-aop</td><td style="text-align:center">使用Spring-AOP和AspectJ支持面向切面编程</td></tr><tr><td style="text-align:center">spring-boot-starter-artemis</td><td style="text-align:center">使用Apache Artemis实现JMS消息</td></tr><tr><td style="text-align:center">spring-boot-starter-batch</td><td style="text-align:center">对Spring Batch的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-cache</td><td style="text-align:center">用于使用Spring框架的缓存支持</td></tr><tr><td style="text-align:center">spring-boot-starter-cloud-connectors</td><td style="text-align:center">对云平台（Cloud Foundry、Heroku）提供的服务提供简化的连接方式</td></tr><tr><td style="text-align:center">spring-boot-starter-data-cassandra</td><td style="text-align:center">用于使用分布式数据库 - Cassandra和Spring Data Cassandra</td></tr><tr><td style="text-align:center">spring-boot-starter-data-couchbase</td><td style="text-align:center">用于使用基于文档的数据库Couchbase和Spring Data Couchbase</td></tr><tr><td style="text-align:center">spring-boot-starter-data-elasticsearch</td><td style="text-align:center">通过Spring Data Elasticsearch提供对Elasticsearch的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-data-jpa</td><td style="text-align:center">对JPA的支持，包含Spring-data-jpa、Spring-orm和Hibernate</td></tr><tr><td style="text-align:center">spring-boot-starter-data-ldap</td></tr><tr><td style="text-align:center">spring-boot-starter-data-mongodb</td><td style="text-align:center">用于使用基于文档的数据库MongoDB和Spring Data MongoDB</td></tr><tr><td style="text-align:center">spring-boot-starter-data-neo4j</td><td style="text-align:center">用于使用图数据库Neo4j和Spring Data Neo4j</td></tr><tr><td style="text-align:center">spring-boot-starter-data-redis</td><td style="text-align:center">通过Spring-data-redis提供对Redis的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-data-rest</td><td style="text-align:center">通过Spring-data-rest-webmvc将Spring Data repository暴露为REST形式的服务</td></tr><tr><td style="text-align:center">spring-boot-starter-data-solr</td><td style="text-align:center">通过Spring-data-solr提供对Apache Solr的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-freemarker</td><td style="text-align:center">对freemarker模板引擎的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-groovy-templates</td><td style="text-align:center">对groovy模板引擎的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-hateoas</td><td style="text-align:center">用于使用Spring MVC和Spring HATEOAS实现基于超媒体的RESTful web应用</td></tr><tr><td style="text-align:center">spring-boot-starter-integration</td><td style="text-align:center">对系统集成框架Spinrg-integration的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-jdbc</td><td style="text-align:center">对JDBC数据库的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-jersey</td><td style="text-align:center">用于使用JAX-RS和Jersey构建RESTful web应用，可使用spring-boot-starter-web替代</td></tr><tr><td style="text-align:center">spring-boot-starter-jooq</td><td style="text-align:center">用于使用JOOQ访问SQL数据库，可使用springboot-starter-data-jpa或spring-boot-starter-jdbc替代</td></tr><tr><td style="text-align:center">spring-boot-starter-jta-atomikos</td><td style="text-align:center">通过atomikos对分布式事务的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-jta-bitronix</td><td style="text-align:center">通过bitronix对分布式事务的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-jta-narayana</td><td style="text-align:center">Spring Boot Narayana JTA Starter</td></tr><tr><td style="text-align:center">spring-boot-starter-log4j2</td><td style="text-align:center">支持使用Log4J日志框架</td></tr><tr><td style="text-align:center">spring-boot-starter-logging</td><td style="text-align:center">用于使用Logback记录日志，默认的日志starter</td></tr><tr><td style="text-align:center">spring-boot-starter-mail</td><td style="text-align:center">用于使用Java Mail和Spring框架email发送支持</td></tr><tr><td style="text-align:center">spring-boot-starter-mobile</td><td style="text-align:center">对Spring mobile的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-mustache</td><td style="text-align:center">对mustache模板引擎的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-security</td><td style="text-align:center">对Spring sercurity的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-social-facebook</td><td style="text-align:center">通过Spring-social-facebook提供对Facebook的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-social-linkin</td><td style="text-align:center">通过Spring-social-linkin提供对Linkin的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-social-twitter</td><td style="text-align:center">通过Spring-social-twitter提供对Twitter的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-test</td><td style="text-align:center">对常用的测试框架JUnit、Hamcrest和Mockito的支持，包含Spring-tests模块</td></tr><tr><td style="text-align:center">spring-boot-starter-thymeleaf</td><td style="text-align:center">对thymeleaf引擎的支持，包含于Spring整合的配置</td></tr><tr><td style="text-align:center">spring-boot-starter-tomcat</td><td style="text-align:center">SpringBoot默认的Servlet容器</td></tr><tr><td style="text-align:center">spring-boot-starter-jetty</td><td style="text-align:center">使用Jetty作为Servlet容器</td></tr><tr><td style="text-align:center">spring-boot-starter-undertow</td><td style="text-align:center">使用Undertow作为Servlet容器</td></tr><tr><td style="text-align:center">spring-bootstarter-remote-shell</td><td style="text-align:center">用于通过SSH，使用CRaSH远程shell监控，管理你的应用</td></tr><tr><td style="text-align:center">spring-boot-starter-validation</td><td style="text-align:center">用于使用Hibernate Validator实现Java Bean校验</td></tr><tr><td style="text-align:center">spring-boot-starter-web</td><td style="text-align:center">用于使用Spring MVC构建web应用，包括RESTful。Tomcat是默认的内嵌容器</td></tr><tr><td style="text-align:center">spring-boot-starter-web-services</td><td style="text-align:center">对Spring Web Services的支持</td></tr><tr><td style="text-align:center">spring-boot-starter-websocket</td><td style="text-align:center">对websocket开发的支持</td></tr></tbody></table><h3 id="外部配置"><a href="#外部配置" class="headerlink" title="外部配置"></a><font color=orange>外部配置</font></h3><h4 id="命令行参数配置"><a href="#命令行参数配置" class="headerlink" title="命令行参数配置"></a><font color=orange>命令行参数配置</font></h4><p>Spring Boot可以是基于jar包运行的, 打成jar包运行的可以修改端口等<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xx.jar --service.port=9090</span><br></pre></td></tr></table></figure></p><h4 id="常规属性配置"><a href="#常规属性配置" class="headerlink" title="常规属性配置"></a><font color=orange>常规属性配置</font></h4><h5 id="Spring-Boot导入资源文件方式1"><a href="#Spring-Boot导入资源文件方式1" class="headerlink" title="Spring Boot导入资源文件方式1"></a><font color=orange>Spring Boot导入资源文件方式1</font></h5><p>直接在<code>application.properties</code>中添加字段即可, 然后使用<code>@Value(&quot;$&#123;key&#125;&quot;)</code>取即可</p><h5 id="Spring-Boot导入资源文件方式2"><a href="#Spring-Boot导入资源文件方式2" class="headerlink" title="Spring Boot导入资源文件方式2"></a><font color=orange>Spring Boot导入资源文件方式2</font></h5><p>新建xxx.properties, 使用<code>@PropertySource</code>注解导入, 然后再使用<code>@Value(&quot;$&#123;key&#125;&quot;)</code>取即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&quot;classpath:xxx.properties&quot;)</span></span><br></pre></td></tr></table></figure></p><h4 id="类型安全的配置"><a href="#类型安全的配置" class="headerlink" title="类型安全的配置"></a><font color=orange>类型安全的配置</font></h4><p>除了<code>@Value(&quot;$&#123;key&#125;&quot;)</code>注解注入每个值外, Spring Boot还提供使用<code>@ConfigurationProperties</code>将properties中的属性和一个Bean及其属性关联.</p><ul><li>首先在入口类添加哪个类进行配置<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;Teacher.class&#125;)</span></span><br></pre></td></tr></table></figure></li><li>如果入口类没有添加<code>@EnableConfigurationProperties</code>需要在Bean类那边添加<code>@Configuration</code>或者<code>@Component</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;teacher&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在Bean类上边添加<code>@ConfigurationProperties</code>并指定前缀</li><li>有时候会出现中文编码问题<ul><li>在<code>application.properties</code>中添加相关配置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#设置spring-boot 编码格式</span><br><span class="line">banner.charset=UTF-8</span><br><span class="line">server.tomcat.uri-encoding=UTF-8</span><br><span class="line">spring.http.encoding.charset=UTF-8</span><br><span class="line">spring.http.encoding.enabled=true</span><br><span class="line">spring.http.encoding.force=true</span><br><span class="line">spring.messages.encoding=UTF-8</span><br></pre></td></tr></table></figure></li><li>修改properties的文件编码类型为utf-8</li><li>Intellij IDEA依次打开<code>File</code> -&gt; <code>Settings</code> -&gt; <code>Editor</code> -&gt; <code>File Encodings</code>, 将<code>Properties Files (*.properties)</code>下的<code>Default encoding for properties files</code>设置为<code>UTF-8</code>，将<code>Transparent native-to-ascii conversion</code>前的勾选上。</li><li>重启Intellij IDEA即可.</li></ul></li></ul><h3 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a><font color=orange>日志配置</font></h3><p>Spring Boot支持Java Util Logging、Log4J、Log4J2和Logback作为日志框架, 默认情况下, Spring Boot使用Logback作为日志框架.<br>在<code>application.properties</code>中修改相关配置:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#日志级别</span><br><span class="line">logging.level.org.springframework.web=DEBUG</span><br><span class="line">#日志文件</span><br><span class="line">logging.file=log.txt</span><br></pre></td></tr></table></figure></p><h3 id="Profile配置"><a href="#Profile配置" class="headerlink" title="Profile配置"></a><font color=orange>Profile配置</font></h3><p>Profile是Spring 用来针对不同的环境对不同的配置提供支持的, 全局Profile配置使用<code>application-&#123;profile&#125;.properties</code>(如application-dev.properties和application-product.properties), 通过在<code>application.properties</code>中设置来激活对应的环境.<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#激活</span><br><span class="line">spring.profiles.active=dev</span><br><span class="line">#spring.profiles.active=product</span><br></pre></td></tr></table></figure></p><h2 id="Spring-Boot的Web开发"><a href="#Spring-Boot的Web开发" class="headerlink" title="Spring Boot的Web开发"></a><font color=orange>Spring Boot的Web开发</font></h2><p>Spring Boot提供了spring-boot-starter-web为Web开发予以支持, 它为我们提供了嵌入的Tomcat以及Spring MVC的依赖. 而Web相关的自动配置在<code>spring-boot-autoconfigure</code>的<code>org.springframework.boot.autoconfigure.web</code>下</p><h3 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a><font color=orange>模板引擎</font></h3><p>Spring Boot提供了大量模板引擎, 包含FreeMarker、Groovy、Thymeleaf、Velocity和Mustache. Spring Boot推荐使用Thymeleaf作为模板引擎, 因为Thymeleaf提供了完美的Spring MVC支持.</p><h4 id="Thymeleaf基础知识"><a href="#Thymeleaf基础知识" class="headerlink" title="Thymeleaf基础知识"></a><font color=orange>Thymeleaf基础知识</font></h4><ul><li>首先添加依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>通过<code>xmlns:th=http://wwww.thymeleaf.org</code>命名空间, 将静态页面转为动态页面, 需要进行动态处理的元素将使用<code>th:</code>为前缀.</li><li>引用Web静态资源: <code>@&#123;jquery-1.10.2.min.js&#125;</code></li><li>访问model中的属性: 通过<code>$&#123;name&#125;</code></li><li>迭代: 使用<code>th:each=&quot;person:$&#123;people&#125;&quot;</code></li><li>判断: <code>$&#123;not #lists.isEmpty(people)&#125;</code>判断perple是否为空, 还支持<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>等</li><li>JavaScript中访问model: <code>[[$&#123;name&#125;]]</code></li></ul><h4 id="与SpringMVC的整合"><a href="#与SpringMVC的整合" class="headerlink" title="与SpringMVC的整合"></a><font color=orange>与SpringMVC的整合</font></h4><ul><li>xml配置方式<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;templateResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.templateresolver.ServletContextTemplateResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;servletContext&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;servletContext&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.html&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateMode&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HTML5&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;engine&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring4.SpringTemplateEngine&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateResolver&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;templateResolver&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.thymeleaf.spring4.view.ThymeleafViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateEngine&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;engine&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>Java配置方式, 在配置类中<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ServletContext servletContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ServletContextTemplateResolver <span class="title function_">templateResolver</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ServletContextTemplateResolver</span> <span class="variable">servletContextTemplateResolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextTemplateResolver</span>(servletContext);</span><br><span class="line">    servletContextTemplateResolver.setPrefix(<span class="string">&quot;/WEB-INF/&quot;</span>);</span><br><span class="line">    servletContextTemplateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line">    servletContextTemplateResolver.setTemplateMode(<span class="string">&quot;HTML5&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> servletContextTemplateResolver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SpringTemplateEngine <span class="title function_">templateEngine</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SpringTemplateEngine</span> <span class="variable">engine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringTemplateEngine</span>();</span><br><span class="line">    engine.setTemplateResolver(templateResolver());</span><br><span class="line">    <span class="keyword">return</span> engine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ThymeleafViewResolver <span class="title function_">thymeleafViewResolver</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ThymeleafViewResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThymeleafViewResolver</span>();</span><br><span class="line">    resolver.setTemplateEngine(templateEngine());</span><br><span class="line">    <span class="keyword">return</span> resolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="与Spring-Boot的整合"><a href="#与Spring-Boot的整合" class="headerlink" title="与Spring Boot的整合"></a><font color=orange>与Spring Boot的整合</font></h4><p>Spring Boot和Thymeleaf整合很简单, Spring Boot会通过<code>org.springframework.autoconfigure.thymeleaf</code>包对Thymeleaf进行自动配置, 通过ThymeleafProperties源码我们可以看出, 在<code>application.properties</code>中可以通过<code>spring.thymeleaf</code>开头进行配置, 没有时会有默认值.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(&quot;spring.thymeleaf&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThymeleafProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Charset</span> <span class="variable">DEFAULT_ENCODING</span> <span class="operator">=</span> StandardCharsets.UTF_8;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_SUFFIX</span> <span class="operator">=</span> <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Web相关配置"><a href="#Web相关配置" class="headerlink" title="Web相关配置"></a><font color=orange>Web相关配置</font></h3><h4 id="Spring-Boot相关的自动配置"><a href="#Spring-Boot相关的自动配置" class="headerlink" title="Spring Boot相关的自动配置"></a><font color=orange>Spring Boot相关的自动配置</font></h4><ul><li>自动配置的ViewResolver<ul><li>ContentNegotiatingViewResolver: 代理给不同的ViewResolver来处理不同的view</li><li>BeanNameViewResolver: 会根据返回的字符串找对应的Bean的视图进行渲染</li><li>InternalResourceViewResolver: 很常用的ViewResolver, 通过设置前缀、后缀等得到实际页面</li></ul></li><li>自动配置的静态资源, 在自动配置类的<code>addResourceHandlers</code>方法中定义了如下自动配置<ul><li>类路径文件: <code>/static</code>、<code>/public</code>、<code>/resources</code>和<code>/META-INF/resources</code>文件夹下的静态文件直接映射为<code>/**</code>, 可以通过<code>http:/localhost:8080/**</code>访问.</li><li>webjar: webjar就是将常用的脚本框架封装在jar包中的jar包, 把<code>/META-INF/resources/webjars/</code>下的静态文件映射为<code>/webjar/**</code>, 可以通过<code>http:/localhost:8080/webjar/**</code>访问.</li></ul></li><li>自动配置的Formatter和Converter<ul><li>只要我们定义了Converter、GenericConverter和Formatter接口的实现类的Bean, 这些Bean会自动注册到Spring MVC中.</li></ul></li><li>自动配置的HTTPMessageConverters<ul><li>默认会加载<code>ByteArrayHttpMessageConverter</code>、<code>StringHttpMessageConverter</code>、<code>ResourceHttpMessageConverter</code>、<code>SourceHTTPMessageConverter</code>、<code>AllEncompassingFormHTTPMessageConverter</code>以及如果jackson的jar存在<code>MappingJackson2HTTPMessageConverter</code>和<code>MappingJackson2XmlHTTPMessageConverter</code>、gson的jar存在<code>GsonHTTPMessageConverter</code></li><li>自己新增时, 在配置类上<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> HttpMessageConverter <span class="title function_">fastJsonHttpMessageConverters</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1.需要定义一个Convert转换消息的对象</span></span><br><span class="line">    <span class="type">FastJsonHttpMessageConverter</span> <span class="variable">fastConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastJsonHttpMessageConverter</span>();</span><br><span class="line">    <span class="comment">//2.添加fastjson的配置信息，比如是否要格式化返回的json数据</span></span><br><span class="line">    <span class="type">FastJsonConfig</span> <span class="variable">fastJsonConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastJsonConfig</span>();</span><br><span class="line">    fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);</span><br><span class="line">    <span class="comment">//3.在convert中添加配置信息</span></span><br><span class="line">    fastConverter.setFastJsonConfig(fastJsonConfig);</span><br><span class="line">    <span class="keyword">return</span> fastConverter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.extendMessageConverters(converters);</span><br><span class="line">    converters.add(fastJsonHttpMessageConverters());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>静态首页的支持, 将静态index.html放在如下目录时, 会自定映射<ul><li><code>classpath:/META-INF/resources/index.html</code></li><li><code>classpath:/resources/index.html</code></li><li><code>classpath:/static/index.html</code></li><li><code>classpath:/public/index.html</code></li><li>其他目录可以在配置类中<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;</span><br><span class="line">    registry.addViewController(<span class="string">&quot;/index&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">    registry.addViewController(<span class="string">&quot;/upload&quot;</span>).setViewName(<span class="string">&quot;upload&quot;</span>);</span><br><span class="line">    registry.addViewController(<span class="string">&quot;/async&quot;</span>).setViewName(<span class="string">&quot;async&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring-Boot自定义配置"><a href="#Spring-Boot自定义配置" class="headerlink" title="Spring Boot自定义配置"></a><font color=orange>Spring Boot自定义配置</font></h4>如果Spring Boot自动配置不满足我们的需求, 那么我们可以自己定义MVC的配置.</li></ul></li><li>使用<code>@Configuration</code>注解和<code>@EnableWebMvc</code>注解</li><li>定义配置类继承<code>WebMvcConfigurerAdapter</code>重新相关方法(新版本实现<code>WebMvcConfigurer</code>接口), 无需<code>@EnableWebMvc</code>注解</li></ul><h4 id="注册Servlet、Filter、Listener"><a href="#注册Servlet、Filter、Listener" class="headerlink" title="注册Servlet、Filter、Listener"></a><font color=orange>注册Servlet、Filter、Listener</font></h4><ul><li>方式1、当时使用嵌入式Servlet容器时, 通过声明Spring Boot自动注册<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">pulic xxServlet <span class="title function_">xxServlet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">xxSevlet</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">pulic xxFilter <span class="title function_">xxFilter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">xxFilter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>方式2、注册ServletRegistrationBean、FilterRegistrationBean、ServletListenerRegistrationBean<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ServletRegistrationBean <span class="title function_">servletRegistrationBean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>(<span class="keyword">new</span> <span class="title class_">XXServlet</span>(), <span class="string">&quot;/xx/*&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FilterRegistrationBean <span class="title function_">filterRegistrationBean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">FilterRegistrationBean</span> <span class="variable">fileterBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">    fileterBean.setFilter(<span class="keyword">new</span> <span class="title class_">XXFilter</span>());</span><br><span class="line">    fileterBean.setOrder(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> fileterBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring-Boot容器配置"><a href="#Spring-Boot容器配置" class="headerlink" title="Spring Boot容器配置"></a><font color=orange>Spring Boot容器配置</font></h2><p>Spring Boot默认容器是Tomcat, 当然也可以使用Jetty、Undertow等, 配置属性在<code>org.springframework.boot.autoconfigure.web.ServerProperties</code>中做了定义, 我们只需要在<code>application.properties</code>中做配置即可, 通用的配置是以<code>server</code>作为前缀, 而Tomcat配置是以<code>server.tomcat</code>作为前缀.</p><h3 id="application-properties配置文件"><a href="#application-properties配置文件" class="headerlink" title="application.properties配置文件"></a><font color=orange><code>application.properties</code>配置文件</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.port=8080 #配置程序端口, 默认8080</span><br><span class="line">server.session-timeout= #用户session过期时间, 秒为单位</span><br><span class="line">server.context-path=/ #访问路径, 默认/</span><br><span class="line">server.tomcat.uri-encoding=UTF-8 #配置Tomcat编码</span><br></pre></td></tr></table></figure><h3 id="代码配置"><a href="#代码配置" class="headerlink" title="代码配置"></a><font color=orange>代码配置</font></h3><p>通用的配置类可以实现<code>EmbeddedServletContainerCustomizer</code>接口的类, 若要直接配置Tomcat、Jetty、Undertow则可以直接定义<code>TomcatEmbeddedServletContainerFactory</code>、<code>JettyEmbeddedServletContainerFactory</code>、<code>UndertowEmbeddedServletContainerFactory</code>的Bean.</p><ul><li><p>新建类(如果该类在配置类中, 注意需要添加<code>static</code>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomServletContainer</span> <span class="keyword">implements</span> <span class="title class_">EmbeddedServletContainerCustomizer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customize</span><span class="params">(ConfigurableEmbeddedServletContainer container)</span> &#123;</span><br><span class="line">        containner.setPort(<span class="number">8090</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用特定的Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> EmbeddedServletContainerFactory <span class="title function_">servletContainer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">TomcatEmbeddedServletContainerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TomcatEmbeddedServletContainerFactory</span>;</span><br><span class="line">    factory.setPort(<span class="number">8090</span>);</span><br><span class="line">    <span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="内置Tomcat不支持JSP"><a href="#内置Tomcat不支持JSP" class="headerlink" title="内置Tomcat不支持JSP"></a><font color=orange>内置Tomcat不支持JSP</font></h3><p>内置容器是Tomcat不支持JSP页面, 需要添加额外的包才能支持:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h3 id="替换Tomcat"><a href="#替换Tomcat" class="headerlink" title="替换Tomcat"></a><font color=orange>替换Tomcat</font></h3><p>Spring Boot默认使用Tomcat作为内嵌Servlet容器, 如果需要替换其他容器, 那么可以在<code>pom.xml</code>移除Tomcat的依赖并添加其他容器的依赖.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="配置证书SSL"><a href="#配置证书SSL" class="headerlink" title="配置证书SSL"></a><font color=orange>配置证书SSL</font></h3><ul><li>生成证书<ul><li>自签名证书(浏览器会显示未认证): 使用JDK工具生成<code>keytool -genkey -alias tomcat -keyalg RSA</code></li><li>认证的SSL证书(推荐): <a href="https://common-buy.aliyun.com/?spm=5176.7968328.911106.btn1.16a41232t0DJYw&amp;commodityCode=cas#/buy">阿里云</a>、腾讯云都可以免费生成.</li></ul></li><li>Spring Boot配置SSL<ul><li>将生成<code>.keystore</code>拷贝到项目目录中</li><li>在<code>application.properties</code>中添加SSL配置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server.prot=8443</span><br><span class="line">server.ssl.key-store=classpath:.keystore</span><br><span class="line">server.ssl.key-store-password=xxxxx</span><br><span class="line">server.ssl.keyStoreType=JKS</span><br><span class="line">server.ssl.keyAlias:tomcat</span><br></pre></td></tr></table></figure></li></ul></li><li>http转向https<br>在入口类中添加: <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Starter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是spring boot 1.5.X以下版本的 添加了这个，下一个就不用添加了</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> EmbeddedServletContainerFactory <span class="title function_">servletContainer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">TomcatEmbeddedServletContainerFactory</span> <span class="variable">tomcat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TomcatEmbeddedServletContainerFactory</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">postProcessContext</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">                <span class="type">SecurityConstraint</span> <span class="variable">securityConstraint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecurityConstraint</span>();</span><br><span class="line">                securityConstraint.setUserConstraint(<span class="string">&quot;CONFIDENTIAL&quot;</span>);</span><br><span class="line">                <span class="type">SecurityCollection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecurityCollection</span>();</span><br><span class="line">                collection.addPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">                securityConstraint.addCollection(collection);</span><br><span class="line">                context.addConstraint(securityConstraint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        tomcat.addAdditionalTomcatConnectors(httpConnector()); <span class="comment">// 添加http</span></span><br><span class="line">        <span class="keyword">return</span> tomcat;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这是spring boot 2.0.X版本的 添加这个，上一个就不用添加了</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletWebServerFactory <span class="title function_">servletContainer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">TomcatServletWebServerFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TomcatServletWebServerFactory</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">postProcessContext</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">                <span class="type">SecurityConstraint</span> <span class="variable">securityConstraint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecurityConstraint</span>();</span><br><span class="line">                securityConstraint.setUserConstraint(<span class="string">&quot;CONFIDENTIAL&quot;</span>);</span><br><span class="line">                <span class="type">SecurityCollection</span> <span class="variable">collection</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecurityCollection</span>();</span><br><span class="line">                collection.addPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">                securityConstraint.addCollection(collection);</span><br><span class="line">                context.addConstraint(securityConstraint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        factory.addAdditionalTomcatConnectors(httpConnector());</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//配置http</span></span><br><span class="line">    <span class="keyword">private</span> Connector <span class="title function_">httpConnector</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Connector</span> <span class="variable">connector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Connector</span>(<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span>);</span><br><span class="line">        <span class="type">Http11NioProtocol</span> <span class="variable">http11NioProtocol</span> <span class="operator">=</span> (Http11NioProtocol) connector.getProtocolHandler();</span><br><span class="line">        connector.setScheme(<span class="string">&quot;http&quot;</span>);</span><br><span class="line">        connector.setPort(<span class="number">8080</span>);</span><br><span class="line">        connector.setSecure(<span class="literal">false</span>);</span><br><span class="line">        connector.setRedirectPort(<span class="number">8443</span>);</span><br><span class="line">        <span class="comment">//设置最大线程数</span></span><br><span class="line">        http11NioProtocol.setMaxThreads(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//设置初始线程数  最小空闲线程数</span></span><br><span class="line">        http11NioProtocol.setMinSpareThreads(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//设置超时</span></span><br><span class="line">        http11NioProtocol.setConnectionTimeout(<span class="number">5000</span>);</span><br><span class="line">        <span class="keyword">return</span> connector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Favicon配置"><a href="#Favicon配置" class="headerlink" title="Favicon配置"></a><font color=orange>Favicon配置</font></h3><p>Spring Boot提供了一个默认的Favicon.</p><h4 id="关闭Favicon"><a href="#关闭Favicon" class="headerlink" title="关闭Favicon"></a><font color=orange>关闭Favicon</font></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.mvc.favicon.enabled=false</span><br></pre></td></tr></table></figure><h4 id="自定义Favicon"><a href="#自定义Favicon" class="headerlink" title="自定义Favicon"></a><font color=orange>自定义Favicon</font></h4><p>只需要把自己的<code>favicon.ico</code>(文件名不能更改)文件放在<code>类路径根目录</code>、<code>类路径META-INF/resources/</code>、<code>类路径resources/</code>、<code>类路径static/</code>或者<code>类路径public/</code>下即可.</p><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a><font color=orange>WebSocket</font></h3><p>请移步<a href="">这里</a>, 关于WebSocket的服务器端以及iOS连接Websocket的实现.</p><h2 id="Spring-Boot中的事务"><a href="#Spring-Boot中的事务" class="headerlink" title="Spring Boot中的事务"></a><font color=orange>Spring Boot中的事务</font></h2><h3 id="Spring中的事务"><a href="#Spring中的事务" class="headerlink" title="Spring中的事务"></a><font color=orange>Spring中的事务</font></h3><ul><li>编程式事务(不推荐)</li><li>基于TransactionProxyFactoryBean的事务(不推荐)</li><li>基于AspectJ的声明式事务<ul><li>使用<code>xml配置文件</code>方式<ul><li>配置事务管理器Bean<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>配置事务通知(事务的增强)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;</span><br><span class="line">    &lt;tx:attributes&gt;</span><br><span class="line">        &lt;tx:method name=&quot;save*&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;insert*&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;delete*&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;update*&quot; propagation=&quot;REQUIRED&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;find*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;select*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;tx:method name=&quot;get*&quot; propagation=&quot;SUPPORTS&quot; read-only=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;/tx:attributes&gt;</span><br><span class="line">&lt;/tx:advice&gt;</span><br></pre></td></tr></table></figure></li><li>配置切面<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--切面--&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut=&quot;execution(* com.coppco.service.*.*(..))&quot;/&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li>使用<code>注解</code>方式<ul><li>配置事务管理器Bean<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>开启注解事务<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启注解事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li>在需要使用事务的类上添加注解<code>@Transactional</code>即可<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">@Service</span><br><span class="line">public class AccountService &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="Spring-Boot中的事务-1"><a href="#Spring-Boot中的事务-1" class="headerlink" title="Spring Boot中的事务"></a><font color=orange>Spring Boot中的事务</font></h3><p>使用<code>@EnableTransactionManagement</code>注解在配置类上来开启声明式事务的支持, Spring容器会自动扫描注解了<code>@Transactional</code>的方法和类.</p><ul><li>注解在类上: 所有public方法都开启事务</li><li>注解在方法上: 该方法开启注解</li><li>同时类上和方法上都存在: 类级别的注解会重载方法级别的注解</li></ul><h2 id="Spring-Boot开发部署"><a href="#Spring-Boot开发部署" class="headerlink" title="Spring Boot开发部署"></a><font color=orange>Spring Boot开发部署</font></h2><h3 id="Spring-Boot热部署"><a href="#Spring-Boot热部署" class="headerlink" title="Spring Boot热部署"></a><font color=orange>Spring Boot热部署</font></h3><p>当我们修改了类或者配置文件时, 需要生效会重新运行, 会很麻烦.<br>Spring Boot1.3版本以后可以使用热部署方便很多.</p><h4 id="模板热部署"><a href="#模板热部署" class="headerlink" title="模板热部署"></a><font color=orange>模板热部署</font></h4><p>Spring Boot模板引擎默认都是开启缓存的, 可以在<code>application.properties</code>中关闭缓存<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#thymeleaf缓存</span><br><span class="line">spring.thymeleaf.cache=false</span><br><span class="line">#FreeMarker缓存</span><br><span class="line">spring.freemarker.cache=false</span><br><span class="line">#Groovy缓存</span><br><span class="line">spring.groovy.template.cache=false</span><br><span class="line">#Velocity缓存</span><br><span class="line">spring.velocity.cache=false</span><br></pre></td></tr></table></figure></p><h4 id="Java类和配置文件"><a href="#Java类和配置文件" class="headerlink" title="Java类和配置文件"></a><font color=orange>Java类和配置文件</font></h4><ul><li>1、pom.xml添加Maven依赖<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 热部署 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li>2、pom.xml中插件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;fork&gt;true&lt;/fork&gt;//该配置必须</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure></li><li>3、开启Intellij IDEA自动Build功能 <ul><li><code>setting</code> – <code>Build, Execution, Deployment</code> – <code>Compiler</code> – <code>Build project automatically</code>勾选上</li></ul></li><li>4、<code>command + option + shift + /</code> – <code>Registry</code> – <code>compiler.automake.allow.when.app.running</code> – 勾选即可.</li><li>5、重新编译后, 在修改后保存时会重新加载.</li></ul><h3 id="Spring-Boot常规部署"><a href="#Spring-Boot常规部署" class="headerlink" title="Spring Boot常规部署"></a><font color=orange>Spring Boot常规部署</font></h3><h4 id="jar包形式"><a href="#jar包形式" class="headerlink" title="jar包形式"></a><font color=orange>jar包形式</font></h4><ul><li>打包: 当我们新建Spring Boot项目的时候, 选择打包方式是<code>jar</code>, 只需使用maven插件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure></li><li>运行: <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xx.jar</span><br></pre></td></tr></table></figure></li><li>Linux下运行软件通常把它注册为服务, 需要修改<code>pom.xml</code>后重新打包<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;configuration&gt;</span><br><span class="line">                &lt;fork&gt;true&lt;/fork&gt;</span><br><span class="line">                &lt;executable&gt;true&lt;/executable&gt;</span><br><span class="line">            &lt;/configuration&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure></li><li>Linux下部署<ul><li>安装JDK<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh jdk-8u51-linux-x64.rpm</span><br></pre></td></tr></table></figure></li><li>参考<a href="https://docs.spring.io/spring-boot/docs/2.0.0.M7/reference/htmlsingle/#deployment-service">官方文档设置</a></li><li>基于<code>init.d</code>(CentOS 6.6)注册服务<ul><li>注册服务, springbootDemo就是服务名, 项目日志在<code>/home/log/springbootDemo.log</code>下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /home/apps/springbootDemo-0.0.1-SNAPSHOT.jar /etc/init.d/springbootDemo</span><br></pre></td></tr></table></figure></li><li>启动服务<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#启动服务</span><br><span class="line">service springbootDemo start</span><br><span class="line">#停止服务</span><br><span class="line">service springbootDemo stop</span><br><span class="line">#服务状态</span><br><span class="line">service springbootDemo status</span><br><span class="line">#开机启动</span><br><span class="line">chkconfig springbootDemo on</span><br></pre></td></tr></table></figure></li></ul></li><li>基于<code>systemd(CnetOS 7)</code>注册服务<ul><li>注册服务, 在<code>/etc/systemd/system/</code>目录下新建<code>springbootDemo.service</code>, 实际中需要修改Description和ExexStart<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=springbootDemo </span><br><span class="line">After=syslog.target</span><br><span class="line"></span><br><span class="line">[service]</span><br><span class="line">User=root</span><br><span class="line">ExexStart=/home/apps/springbootDemo-0.0.1-SNAPSHOT.jar</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li>相关命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#启动服务</span><br><span class="line">systemctl start springbootDemo.service</span><br><span class="line">#停止服务</span><br><span class="line">systemctl stop springbootDemo.service</span><br><span class="line">#服务状态</span><br><span class="line">systemctl status springbootDemo.service</span><br><span class="line">#开机启动</span><br><span class="line">systemctl enable springbootDemo.service</span><br><span class="line">#日志</span><br><span class="line">journalctl -u pringbootDemo.service</span><br></pre></td></tr></table></figure><h4 id="war包形式"><a href="#war包形式" class="headerlink" title="war包形式"></a><font color=orange>war包形式</font></h4></li></ul></li></ul></li><li>如果<code>pom.xml</code>文件打包方式为<code>war</code>, 可以直接使用Maven插件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure></li><li>如果<code>pom.xml</code>文件打包方式为<code>jar</code><ul><li>首先修改<code>pom.xml</code>, 把打包方式改为war<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;war&lt;/packaging&gt;</span><br></pre></td></tr></table></figure></li><li>覆盖默认的容器依赖<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li>新增ServletInitializer类<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class ServletInitializer extends SpringBootServletInitializer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) &#123;</span><br><span class="line">        return application.sources(xxx.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Spring-Boot整合Mybatis"><a href="#Spring-Boot整合Mybatis" class="headerlink" title="Spring Boot整合Mybatis"></a><font color=orange>Spring Boot整合Mybatis</font></h2><h3 id="首先导入相关依赖以及Mybatis-generator插件"><a href="#首先导入相关依赖以及Mybatis-generator插件" class="headerlink" title="首先导入相关依赖以及Mybatis-generator插件"></a><font color=orange>首先导入相关依赖以及Mybatis-generator插件</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;artifactId&gt;JustChat&lt;/artifactId&gt;</span><br><span class="line">        &lt;groupId&gt;com.coppco&lt;/groupId&gt;</span><br><span class="line">        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;artifactId&gt;JustChat-dao&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.coppco&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;JustChat-common&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">             &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--druid--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.1.0&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 分页插件 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.5&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- 热部署 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.3.5&lt;/version&gt;</span><br><span class="line">                &lt;dependencies&gt;</span><br><span class="line">                    &lt;dependency&gt;</span><br><span class="line">                        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">                        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">                        &lt;version&gt;5.1.39&lt;/version&gt;</span><br><span class="line">                    &lt;/dependency&gt;</span><br><span class="line">                    &lt;dependency&gt;</span><br><span class="line">                        &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">                        &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;</span><br><span class="line">                        &lt;version&gt;1.3.5&lt;/version&gt;</span><br><span class="line">                    &lt;/dependency&gt;</span><br><span class="line">                &lt;/dependencies&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;Generate MyBatis Artifacts&lt;/id&gt;</span><br><span class="line">                        &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;generate&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;!--允许移动生成的文件 --&gt;</span><br><span class="line">                    &lt;verbose&gt;true&lt;/verbose&gt;</span><br><span class="line">                    &lt;!-- 是否覆盖 --&gt;</span><br><span class="line">                    &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">                    &lt;!-- 自动生成的配置 --&gt;</span><br><span class="line">                    &lt;configurationFile&gt;src/main/resources/generatorConfig.xml&lt;/configurationFile&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;fork&gt;true&lt;/fork&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;                        </span><br></pre></td></tr></table></figure><h3 id="在src-main-resources-中新建配置文件generatorConfig-xml"><a href="#在src-main-resources-中新建配置文件generatorConfig-xml" class="headerlink" title="在src/main/resources/中新建配置文件generatorConfig.xml"></a><font color=orange>在<code>src/main/resources/</code>中新建配置文件<code>generatorConfig.xml</code></font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--导入properties文件--&gt;</span><br><span class="line">    &lt;!--&lt;properties  resource=&quot;schemeone/properties/mysql/mysql.properties&quot;/&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context id=&quot;localTable&quot; targetRuntime=&quot;MyBatis3&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--生成的Bean会实现Serializable接口--&gt;</span><br><span class="line">        &lt;plugin type=&quot;org.mybatis.generator.plugins.SerializablePlugin&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span><br><span class="line">            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">                        connectionURL=&quot;jdbc:mysql://localhost:3306/justchat&quot; userId=&quot;root&quot;</span><br><span class="line">                        password=&quot;123456&quot;&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- &lt;jdbcConnection driverClass=&quot;oracle.jdbc.OracleDriver&quot;</span><br><span class="line">            connectionURL=&quot;jdbc:oracle:thin:@127.0.0.1:1521:yycg&quot;</span><br><span class="line">            userId=&quot;yycg&quot;</span><br><span class="line">            password=&quot;yycg&quot;&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和</span><br><span class="line">            NUMERIC 类型解析为java.math.BigDecimal --&gt;</span><br><span class="line">        &lt;javaTypeResolver&gt;</span><br><span class="line">            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/javaTypeResolver&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- targetProject:生成PO类的位置, targetProject: 存放生成文件的目录  --&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage=&quot;com.coppco.common.pojo&quot;</span><br><span class="line">                            targetProject=&quot;../JustChat-common/src/main/java&quot;&gt;</span><br><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">            &lt;!-- 从数据库返回的值被清理前后的空格 --&gt;</span><br><span class="line">            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/javaModelGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- targetProject:mapper映射文件生成的位置 --&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage=&quot;mapper&quot;</span><br><span class="line">                         targetProject=&quot;src/main/resources&quot;&gt;</span><br><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/sqlMapGenerator&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- targetPackage：mapper接口生成的位置 --&gt;</span><br><span class="line">        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot;</span><br><span class="line">                             targetPackage=&quot;com.coppco.mapper&quot;</span><br><span class="line">                             targetProject=&quot;src/main/java&quot;&gt;</span><br><span class="line">            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span><br><span class="line">            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">        &lt;/javaClientGenerator&gt;</span><br><span class="line">        &lt;!-- 指定数据库表 --&gt;</span><br><span class="line">        &lt;table schema=&quot;&quot; tableName=&quot;user&quot;&gt;</span><br><span class="line">            &lt;!--重新命名--&gt;</span><br><span class="line">            &lt;!--&lt;columnOverride column=&quot;create_time&quot; property=&quot;createTime&quot; /&gt;--&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;table schema=&quot;&quot; tableName=&quot;userToken&quot;&gt;&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">        &lt;table schema=&quot;&quot; tableName=&quot;userLogs&quot;&gt;&lt;/table&gt;</span><br><span class="line">        &lt;!-- 有些表的字段需要指定java类型</span><br><span class="line">         &lt;table schema=&quot;&quot; tableName=&quot;&quot;&gt;</span><br><span class="line">            &lt;columnOverride column=&quot;&quot; javaType=&quot;&quot; /&gt;</span><br><span class="line">        &lt;/table&gt; --&gt;</span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><h3 id="在application-properties中添加数据源等相关配置"><a href="#在application-properties中添加数据源等相关配置" class="headerlink" title="在application.properties中添加数据源等相关配置"></a><font color=orange>在<code>application.properties</code>中添加数据源等相关配置</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#####   datasource  #####</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/justchat</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=123456</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">#使用druid数据源</span><br><span class="line">spring.datasource.type=com.alibaba.druid.pool.DruidDataSource</span><br><span class="line"></span><br><span class="line">################               MyBatis               ################</span><br><span class="line">#配置模型包路径</span><br><span class="line">mybatis.type-aliases-package=com.coppco.common.pojo</span><br><span class="line">#配置.xml文件路径</span><br><span class="line">mybatis.mapper-locations=classpath:mapper/*.xml</span><br><span class="line">#配置自定义类型处理</span><br><span class="line">mybatis.type-handlers-package=com.coppco.common.messageHandle</span><br></pre></td></tr></table></figure><h3 id="在Spring-Boot入口类添加Mapper扫描"><a href="#在Spring-Boot入口类添加Mapper扫描" class="headerlink" title="在Spring Boot入口类添加Mapper扫描"></a><font color=orange>在Spring Boot入口类添加Mapper扫描</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@MapperScan(&quot;com.coppco.mapper&quot;)</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class JustChatServiceApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(JustChatServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MyBatis类型处理器"><a href="#MyBatis类型处理器" class="headerlink" title="MyBatis类型处理器"></a><font color=orange>MyBatis类型处理器</font></h3><p>有时候, 我们希望从数据库里面读取数据时, 如性别等一些类型自动转成枚举, 此时我们可以使用MyBatis自带的类型处理器.</p><ul><li><code>org.apache.ibatis.type.EnumTypeHandler&lt;E&gt;</code><ul><li>直接存储枚举的name值</li></ul></li><li><code>org.apache.ibatis.type.EnumOrdinalTypeHandler&lt;E&gt;</code> <ul><li>直接存储枚举的顺序值</li></ul></li><li>自定义类型处理器继承<code>BaseTypeHandler&lt;E&gt;</code><ul><li>自定义存储值类型</li></ul></li></ul><h4 id="MyBatis提供的枚举类型处理器"><a href="#MyBatis提供的枚举类型处理器" class="headerlink" title="MyBatis提供的枚举类型处理器"></a><font color=orange>MyBatis提供的枚举类型处理器</font></h4><p>当使用系统提供的类型处理器时, 需要我们在<code>XXXMapper.xml</code>中对应的类型添加<code>typeHandler</code>:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;insertUser&quot; parameterType=&quot;User&quot;&gt;</span><br><span class="line">    insert into user(id,userName,status)</span><br><span class="line">    values(#&#123;id&#125;,  #&#123;userName&#125;,#&#123;status, typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line">或者</span><br><span class="line">&lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;User&quot;&gt;</span><br><span class="line">    &lt;id column=&quot;id&quot; property=&quot;userId&quot; jdbcType=&quot;INTEGER&quot; /&gt;</span><br><span class="line">    &lt;result column=&quot;status&quot; property=&quot;status&quot; typeHandler=&quot;org.apache.ibatis.type.EnumOrdinalTypeHandler&quot;/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure></p><h4 id="自定义类型处理器"><a href="#自定义类型处理器" class="headerlink" title="自定义类型处理器"></a><font color=orange>自定义类型处理器</font></h4><h5 id="定义枚举"><a href="#定义枚举" class="headerlink" title="定义枚举"></a><font color=orange>定义枚举</font></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.common.enums.message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聊天消息类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Jackson中 枚举和json相互转换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@JsonFormat(shape = JsonFormat.Shape.OBJECT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ChatMessageType</span> &#123;</span><br><span class="line"></span><br><span class="line">    text(<span class="string">&quot;01&quot;</span>, <span class="string">&quot;文本&quot;</span>),</span><br><span class="line">    image(<span class="string">&quot;02&quot;</span>, <span class="string">&quot;图片&quot;</span>),</span><br><span class="line">    location(<span class="string">&quot;03&quot;</span>, <span class="string">&quot;定位&quot;</span>),</span><br><span class="line">    audio(<span class="string">&quot;04&quot;</span>, <span class="string">&quot;音频&quot;</span>),</span><br><span class="line">    video(<span class="string">&quot;05&quot;</span>, <span class="string">&quot;视频&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String messageType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ChatMessageType</span><span class="params">(String messageType, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.messageType = messageType;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@JsonValue</span>注释在枚举的属性上, 会转成该值, 注释在枚举的实例上, 会把该枚举属性值全部转换</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JsonValue</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessageType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> messageType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessageType</span><span class="params">(String messageType)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.messageType = messageType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDesc</span><span class="params">(String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解决MyBatis和枚举直接转换</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, ChatMessageType&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, ChatMessageType&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (ChatMessageType accountStatus : ChatMessageType.values()) &#123;</span><br><span class="line">            map.put(accountStatus.getMessageType(), accountStatus);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ChatMessageType <span class="title function_">getEnumByValue</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="定义枚举处理类"><a href="#定义枚举处理类" class="headerlink" title="定义枚举处理类"></a><font color=orange>定义枚举处理类</font></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.common.messageHandle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coppco.common.enums.message.ChatMessageType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyBatis 枚举处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatMessageTypeHandle</span> <span class="keyword">extends</span> <span class="title class_">BaseTypeHandler</span>&lt;ChatMessageType&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNonNullParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="type">int</span> i, ChatMessageType chatMessageType, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        preparedStatement.setString(i, chatMessageType.getMessageType());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ChatMessageType <span class="title function_">getNullableResult</span><span class="params">(ResultSet resultSet, String s)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> resultSet.getString(s);</span><br><span class="line"></span><br><span class="line">        <span class="type">ChatMessageType</span> <span class="variable">type</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!resultSet.wasNull()) &#123;</span><br><span class="line">            type = ChatMessageType.getEnumByValue(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ChatMessageType <span class="title function_">getNullableResult</span><span class="params">(ResultSet resultSet, <span class="type">int</span> i)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> resultSet.getString(i);</span><br><span class="line"></span><br><span class="line">        <span class="type">ChatMessageType</span> <span class="variable">type</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!resultSet.wasNull()) &#123;</span><br><span class="line">            type = ChatMessageType.getEnumByValue(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ChatMessageType <span class="title function_">getNullableResult</span><span class="params">(CallableStatement callableStatement, <span class="type">int</span> i)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> callableStatement.getString(i);</span><br><span class="line"></span><br><span class="line">        <span class="type">ChatMessageType</span> <span class="variable">type</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!callableStatement.wasNull()) &#123;</span><br><span class="line">            type = ChatMessageType.getEnumByValue(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注册自定义类型处理器"><a href="#注册自定义类型处理器" class="headerlink" title="注册自定义类型处理器"></a><font color=orange>注册自定义类型处理器</font></h5><ul><li>Spring MVC: 配置文件中添加<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 注册自定义类型处理器 --&gt;</span><br><span class="line">&lt;typeHandlers&gt;</span><br><span class="line">    &lt;typeHandler handler=&quot;twm.mybatisdemo.type.CityTestTypeHandler&quot; /&gt;</span><br><span class="line">&lt;/typeHandlers&gt;</span><br></pre></td></tr></table></figure></li><li>Spring Boot: <code>application.properties</code>中添加<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#配置自定义类型处理</span><br><span class="line">mybatis.type-handlers-package=com.coppco.common.messageHandle</span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring-Boot整合Dubbo"><a href="#Spring-Boot整合Dubbo" class="headerlink" title="Spring Boot整合Dubbo"></a><font color=orange>Spring Boot整合Dubbo</font></h2><p>目前Dubbo已经加入Apache开源组织, 现在处于孵化期.参考<a href="http://dubbo.apache.org">官方文档</a></p><h3 id="provider和consumer相关依赖"><a href="#provider和consumer相关依赖" class="headerlink" title=" provider和consumer相关依赖"></a><font color=orange> provider和consumer相关依赖</font></h3><table><thead><tr><th style="text-align:center">版本</th><th style="text-align:center">Java版本</th><th style="text-align:center">Spring Boot版本</th><th style="text-align:center">Dubbo版本</th></tr></thead><tbody><tr><td style="text-align:center">versions</td><td style="text-align:center">Java</td><td style="text-align:center">Spring Boot</td><td style="text-align:center">Dubbo</td></tr><tr><td style="text-align:center">0.2.0</td><td style="text-align:center">1.8+</td><td style="text-align:center">2.0.x</td><td style="text-align:center">2.6.2 +</td></tr><tr><td style="text-align:center">0.1.1</td><td style="text-align:center">1.7+</td><td style="text-align:center">1.5.x</td><td style="text-align:center">2.6.2 +</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--dubbo-springBoot依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="provider服务提供者配置"><a href="#provider服务提供者配置" class="headerlink" title=" provider服务提供者配置 "></a><font color=orange> provider服务提供者配置 </font></h3><h4 id="provider中application-properties配置"><a href="#provider中application-properties配置" class="headerlink" title=" provider中application.properties配置"></a><font color=orange> provider中<code>application.properties</code>配置</font></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 扫描Dubbo注解的包(@Service、@ Reference等)</span><br><span class="line">dubbo.scan.basePackages  = com.alibaba.boot.dubbo.demo.provider.service</span><br><span class="line"></span><br><span class="line">## 应用程序名称以及ID配置</span><br><span class="line">dubbo.application.id = provider</span><br><span class="line">dubbo.application.name = provider</span><br><span class="line"></span><br><span class="line">## 协议配置</span><br><span class="line">dubbo.protocol.id = dubbo</span><br><span class="line">dubbo.protocol.name = dubbo</span><br><span class="line">dubbo.protocol.port = 12345</span><br><span class="line"></span><br><span class="line">## 注册中心配置</span><br><span class="line">dubbo.registry.id = my-registry</span><br><span class="line">dubbo.registry.address = xxx.xxx.xxx.xxx</span><br><span class="line"></span><br><span class="line">##如果dubbo使用的注册中心是zookeeper, 上面注册中心的配置改成这样</span><br><span class="line">#dubbo.registry.id = zookeeper</span><br><span class="line">#dubbo.registry.address = xxx.xxx.xxx.xxx</span><br><span class="line">#dubbo.registry.port=2181</span><br><span class="line">#dubbo.registry.protocol=zookeeper</span><br></pre></td></tr></table></figure><h4 id="使用Dubbo注解标注发布的服务"><a href="#使用Dubbo注解标注发布的服务" class="headerlink" title=" 使用Dubbo注解标注发布的服务 "></a><font color=orange> 使用Dubbo注解标注发布的服务 </font></h4><ul><li>新建interface<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 用户相关接口</span><br><span class="line"> */</span><br><span class="line">public interface UserService &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 用户登录</span><br><span class="line">     * @param user</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public Result login(User user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>实现接口(<font color=red>注意这里的@Service不是Spring中的注解, 而是Dubbo中的注解</font>)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"></span><br><span class="line">@Service(</span><br><span class="line">        version = &quot;1.0.0&quot;,</span><br><span class="line">        application = &quot;$&#123;dubbo.application.id&#125;&quot;,</span><br><span class="line">        protocol = &quot;$&#123;dubbo.protocol.id&#125;&quot;,</span><br><span class="line">        registry = &quot;$&#123;dubbo.registry.id&#125;&quot;</span><br><span class="line">)</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Result login(User user) &#123;</span><br><span class="line">        //code</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="consumer服务消费者配置"><a href="#consumer服务消费者配置" class="headerlink" title=" consumer服务消费者配置 "></a><font color=orange> consumer服务消费者配置 </font></h3></li></ul><h4 id="consumer中application-properties配置"><a href="#consumer中application-properties配置" class="headerlink" title=" consumer中application.properties配置"></a><font color=orange> consumer中<code>application.properties</code>配置</font></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">#dubbo配置 ----  服务消费者</span><br><span class="line">## 应用程序配置</span><br><span class="line">dubbo.application.id = consumer</span><br><span class="line">dubbo.application.name = consumer</span><br><span class="line"></span><br><span class="line">## 协议配置</span><br><span class="line">dubbo.protocol.id = dubbo</span><br><span class="line">dubbo.protocol.name = dubbo</span><br><span class="line">dubbo.protocol.port = 12345</span><br><span class="line"></span><br><span class="line">##如果使用zookeeper作为注册中心, 需要添加下面配置</span><br><span class="line">#dubbo.registry.id = zookeeper</span><br><span class="line">#dubbo.registry.address = xxx.xxx.xxx.xxx</span><br><span class="line">#dubbo.registry.port = 2181</span><br><span class="line">#dubbo.registry.protocol = zookeeper</span><br></pre></td></tr></table></figure><h4 id="使用服务"><a href="#使用服务" class="headerlink" title=" 使用服务 "></a><font color=orange> 使用服务 </font></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    #使用zookeeper时, 需要去掉`url=xxxxx`</span><br><span class="line">    @Reference(version = &quot;1.0.0&quot;,</span><br><span class="line">            application = &quot;$&#123;dubbo.application.id&#125;&quot;,</span><br><span class="line">            url = &quot;dubbo://127.0.0.1:12345&quot;)</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/login&quot;)</span><br><span class="line">    public Result login(@RequestBody @Validated(value = &#123;UserValidRegistGroup.class, UserValidLoginGroup.class&#125;) User user) &#123;</span><br><span class="line">        return userService.login(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Boot整合Redis"><a href="#Spring-Boot整合Redis" class="headerlink" title="Spring Boot整合Redis"></a><font color=orange>Spring Boot整合Redis</font></h2><h3 id="添加相关依赖"><a href="#添加相关依赖" class="headerlink" title="添加相关依赖"></a><font color=orange>添加相关依赖</font></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;!--Spring Boot 1.4以前版本--&gt;  </span><br><span class="line">    &lt;!--&lt;artifactId&gt;spring-boot-starter-redis&lt;/artifactId&gt;--&gt;</span><br><span class="line">    &lt;!--Spring Boot 1.4以后版本--&gt;  </span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="Reids相关的配置文件"><a href="#Reids相关的配置文件" class="headerlink" title="Reids相关的配置文件"></a><font color=orange>Reids相关的配置文件</font></h3><p>在<code>application.properties</code>中添加redis相关配置, 以<code>spring.redis</code>开头<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Redis数据库索引（默认为0 redis有16个库）</span><br><span class="line">spring.redis.database=0</span><br><span class="line"># Redis服务器地址</span><br><span class="line">spring.redis.host=127.0.0.1</span><br><span class="line"># Redis服务器连接端口</span><br><span class="line">spring.redis.port=6379</span><br><span class="line"># Redis服务器连接密码（默认为空）</span><br><span class="line">spring.redis.password=</span><br><span class="line"># 连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-active=8</span><br><span class="line"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-wait=-1 </span><br><span class="line"># 连接池中的最大空闲连接</span><br><span class="line">spring.redis.pool.max-idle=8 </span><br><span class="line"># 连接池中的最小空闲连接</span><br><span class="line">spring.redis.pool.min-idle=0  </span><br><span class="line"># 连接超时时间（毫秒）</span><br><span class="line">spring.redis.timeout=2000</span><br></pre></td></tr></table></figure></p><h3 id="配置Redis"><a href="#配置Redis" class="headerlink" title="配置Redis"></a><font color=orange>配置Redis</font></h3><h3 id="Spring-Boot中Redis的自动配置"><a href="#Spring-Boot中Redis的自动配置" class="headerlink" title="Spring Boot中Redis的自动配置"></a><font color=orange>Spring Boot中Redis的自动配置</font></h3><p>Spring Boot默认使用<code>RedisAutoConfiguration</code>类加载<code>application.properties</code>中前缀为<code>spring.redis</code>的属性配置, 并提供了<code>RedisTemplate&lt;Object,Object&gt;</code>和<code>StringRedisTemplate</code>这种Bean.</p><ul><li>RedisTemplate&lt;Object,Object&gt;<ul><li>可以对Redis中key和value都为object类型的数据进行操作,默认会将对象使用JdkSerializationRedisSerializer进行序列化</li></ul></li><li>StringRedisTemplate<ul><li>可以对Redis中key和value都是String类型的数据进行操作</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/images/java/Spring_Boot_pic.jpg&quot; alt=&quot;hello&quot; style=&quot;width: 40%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;/&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是Spring-Boot&quot;&gt;&lt;a href=&quot;#什么是Spring-Boot&quot; class=&quot;headerlink&quot; title=&quot;什么是Spring Boot&quot;&gt;&lt;/a&gt;&lt;font color=orange&gt;什么是Spring Boot&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;随着动态语言的流行(Ruby、Groovy、Scala、Node.js、Python),Java开发显得格外笨重: 繁多的配置、低下的开发效率、复杂的部署流程.&lt;/p&gt;
&lt;p&gt;Spring Boot应用而生, 它使用”习惯优于配置”的理念可以快速的搭建一个项目.使用Spring Boot很容易创建一个独立运行的(运行jar、内嵌Servlet容器)、基于Spring的项目.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot#learn&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>WebScoket的使用</title>
    <link href="http://yoursite.com/2018/03/15/iOS/WebScoket%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/03/15/iOS/WebScoket的使用/</id>
    <published>2018-03-15T01:49:12.000Z</published>
    <updated>2023-06-25T07:56:45.743Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/images/java/moxie_WebSocket.jpg" alt="hello" style="width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"/></p><p>以往在Web项目中, 如果要实现和服务器实时通讯可以通过轮询、长轮询来实现, 此时即浪费带宽又消耗服务器资源.但是使用WebSocket可以很好的解决该问题, 如果你担心不同浏览器不支持WebSocket, 那么<a href="https://socket.io">socketio</a>是一个不错的选择, 它封装了WebSocket、轮询和其他一些实时通讯方式.<br><span id="more"></span></p><h2 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a><font color=orange>OSI参考模型</font></h2><p>七层模型，亦称OSI（Open System Interconnection）参考模型，是国际标准化组织（ISO）制定的一个用于计算机或通信系统间互联的标准体系。<br>它是一个七层的、抽象的模型体，不仅包括一系列抽象的术语或概念，也包括具体的协议。从上到下分别是应用层、表示层、会话层、传输层、网络层、数据链路层和物理层.<br>具体的网络通讯协议图, 请参考<a href="http://www.colasoft.com.cn/download/protocols_map.php">科来</a></p><h3 id="TCP-IP协议簇常见协议"><a href="#TCP-IP协议簇常见协议" class="headerlink" title="TCP/IP协议簇常见协议"></a><font color=orange>TCP/IP协议簇常见协议</font></h3><ul><li>应用层<ul><li>DHCP、FTP、HTTP、POP3、SMTP、TELNET、XMPP、SOAP、MSN、WebSocket</li></ul></li><li>表示层</li><li>会话层<ul><li>TLS、SSL、RPC</li></ul></li><li>传输层<ul><li>TCP、UDP</li></ul></li><li>网络层<ul><li>DNS、IP</li></ul></li><li>数据链路层<ul><li>ARP</li></ul></li><li>物理层</li></ul><h3 id="WebSocket、HTTP和TCP"><a href="#WebSocket、HTTP和TCP" class="headerlink" title="WebSocket、HTTP和TCP"></a><font color=orange>WebSocket、HTTP和TCP</font></h3><p>HTTP和WebSocket是应用层协议, 都是基于TCP协议来传输数据的, 只不过WebSocket必须依赖HTTP协议进行一次握手, 成功之后数据直接从TCP通道传输了.<br>HTTP是单向通讯, 而WebSocket是双向通讯.</p><h3 id="WebSocket和Socket"><a href="#WebSocket和Socket" class="headerlink" title="WebSocket和Socket"></a><font color=orange>WebSocket和Socket</font></h3><p>Socket(套接字)并不是一个协议, 它工作在OSI模型中的会话层. Socket实际上是一个编程接口(API), 是对TCP/IP的封装, 方便我们通过网络层传输数据, 通过Socket可以实现双向通讯.</p><p>WebSocket是一个应用层协议, 也可以实现双向通讯.</p><h3 id="WebSocket和HTML5"><a href="#WebSocket和HTML5" class="headerlink" title="WebSocket和HTML5"></a><font color=orange>WebSocket和HTML5</font></h3><p>WebSocket API 是 HTML5 标准的一部分， 但这并不代表 WebSocket 一定要用在 HTML 中，或者只能在基于浏览器的应用程序中使用。</p><ul><li>基于C的<a href="https://libwebsockets.org/git/libwebsockets">libwebsocket.org</a></li><li>基于Node.js的<a href="http://socket.io/">Socket.io</a></li><li>Java中Nett实现的<a href="https://github.com/mrniko/netty-socketio">netty-socketio</a></li><li>基于Python的<a href="https://github.com/Lawouach/WebSocket-for-Python">ws4py</a></li><li>基于C++的<a href="http://www.zaphoyd.com/websocketpp">WebSocket++</a></li><li>iOS实现的<a href="https://github.com/facebook/SocketRocket">SocketRocket</a>, <a href="https://link.jianshu.com/?t=https://github.com/tidwall/SwiftWebSocket">SwiftWebSocket</a></li><li>Tomcat7.0.47以上版本支持WebSocket</li><li>Spring4.x提供了以<code>STOMP</code>协议为基础的websocket通信实现, 对于不支持的浏览器, 使用<a href="https://github.com/sockjs/sockjs-client">sockjs</a>模拟websocket对象的办法来实现兼容.</li><li>Apache 对 WebSocket 的支持： <a href="http://httpd.apache.org/docs/2.4/mod/mod_proxy_wstunnel.html">Apache Module mod_proxy_wstunnel</a></li><li>Nginx 对 WebSockets 的支持： <a href="http://nginx.com/blog/websocket-nginx/">NGINX as a WebSockets Proxy</a> 、 <a href="NGINX Announces Support for WebSocket Protocol">NGINX Announces Support for WebSocket Protocol</a> 、<a href="http://nginx.org/en/docs/http/websocket.html">WebSocket proxying</a></li></ul><h2 id="Java实现WebSocket"><a href="#Java实现WebSocket" class="headerlink" title="Java实现WebSocket"></a><font color=orange>Java实现WebSocket</font></h2><h3 id="使用Tomcat实现WebSocket"><a href="#使用Tomcat实现WebSocket" class="headerlink" title="使用Tomcat实现WebSocket"></a><font color=orange>使用Tomcat实现WebSocket</font></h3><h4 id="Maven项目使用Tomcat实现WebSocket"><a href="#Maven项目使用Tomcat实现WebSocket" class="headerlink" title="Maven项目使用Tomcat实现WebSocket"></a><font color=orange>Maven项目使用Tomcat实现WebSocket</font></h4><ul><li>新建Maven项目, 需要添加Maven依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.coppco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Maven_Tomcat_WebSocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaee-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--只在编译和测试时使用, 部署到Tomcat时, Tomcat已经包含该包--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>Maven_Tomcat_WebSocket<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 资源文件拷贝插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置Tomcat插件 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写消息处理类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.websocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.*;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该注解用来指定一个URI，客户端可以通过这个URI来连接到WebSocket。类似Servlet的注解mapping。无需在web.xml中配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/websocket/&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态变量，用来记录当前在线连接数。应该把它设计成线程安全的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">onlineCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现服务端与单一客户端通信的话，可以使用Map来存放，其中Key可以为用户标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, WebSocket&gt; clients = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, WebSocket&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 与某个客户端的连接会话，需要通过它来给客户端发送数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接建立成功调用的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session session为与某个客户端的连接会话，需要通过它来给客户端发送数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onOpen</span><span class="params">(<span class="meta">@PathParam(&quot;username&quot;)</span> String username, Session session)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.session = session;</span><br><span class="line"></span><br><span class="line">        addOnlineCount();</span><br><span class="line">        clients.put(username, <span class="built_in">this</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;已连接&quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接关闭调用的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClose</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        clients.remove(username);</span><br><span class="line">        System.out.println(<span class="string">&quot;已断开&quot;</span> + username);</span><br><span class="line">        subOnlineCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到客户端消息后调用的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//这里可以根据业务逻辑决定群发或者单发</span></span><br><span class="line">        sendMessageAll(message);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发生错误时调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Session session, Throwable error)</span> &#123;</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单发消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> To</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessageTo</span><span class="params">(String message, String To)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// session.getBasicRemote().sendText(message);</span></span><br><span class="line">        <span class="comment">//session.getAsyncRemote().sendText(message);</span></span><br><span class="line">        <span class="keyword">for</span> (WebSocket item : clients.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.username.equals(To) )</span><br><span class="line">                item.session.getAsyncRemote().sendText(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 群发消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessageAll</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">for</span> (WebSocket item : clients.values()) &#123;</span><br><span class="line">            item.session.getAsyncRemote().sendText(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">getOnlineCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> onlineCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">addOnlineCount</span><span class="params">()</span> &#123;</span><br><span class="line">        WebSocket.onlineCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">subOnlineCount</span><span class="params">()</span> &#123;</span><br><span class="line">        WebSocket.onlineCount--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Map&lt;String, WebSocket&gt; <span class="title function_">getClients</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clients;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>Web客户端<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Java后端WebSocket的Tomcat实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Welcome<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;send()&quot;</span>&gt;</span>发送消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;closeWebSocket()&quot;</span>&gt;</span>关闭WebSocket连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> websocket = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//判断当前浏览器是否支持WebSocket</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (<span class="string">&#x27;WebSocket&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        websocket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:8080/websocket/&quot;</span> + <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">10</span>+<span class="number">1</span>));</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;当前浏览器 Not support websocket&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//连接发生错误的回调方法</span></span></span><br><span class="line"><span class="language-javascript">    websocket.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setMessageInnerHTML</span>(<span class="string">&quot;WebSocket连接发生错误&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//连接成功建立的回调方法</span></span></span><br><span class="line"><span class="language-javascript">    websocket.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setMessageInnerHTML</span>(<span class="string">&quot;WebSocket连接成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//接收到消息的回调方法</span></span></span><br><span class="line"><span class="language-javascript">    websocket.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setMessageInnerHTML</span>(event.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//连接关闭的回调方法</span></span></span><br><span class="line"><span class="language-javascript">    websocket.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setMessageInnerHTML</span>(<span class="string">&quot;WebSocket连接关闭&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onbeforeunload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">closeWebSocket</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//将消息显示在网页上</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">setMessageInnerHTML</span>(<span class="params">innerHTML</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;message&#x27;</span>).<span class="property">innerHTML</span> += innerHTML + <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//关闭WebSocket连接</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">closeWebSocket</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        websocket.<span class="title function_">close</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//发送消息</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">send</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> message = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;text&#x27;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        websocket.<span class="title function_">send</span>(message);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="Spring-Boot使用Tomcat实现WebSocket"><a href="#Spring-Boot使用Tomcat实现WebSocket" class="headerlink" title="Spring Boot使用Tomcat实现WebSocket"></a><font color=orange>Spring Boot使用Tomcat实现WebSocket</font></h4><p>使用Spring Boot项目配置稍微有点不一样, </p><ul><li>首先需要添加依赖<code>spring-boot-starter-websocket</code>, 如果是打成war部署在外部Tomcat时需要添加<code>javaee-api</code>的依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.coppco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcatwebsocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>tomcatwebsocket<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注意如果打成war部署在外部Tomcat时需要添加这个--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;groupId&gt;javax&lt;/groupId&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;artifactId&gt;javaee-api&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;version&gt;7.0&lt;/version&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;scope&gt;provided&lt;/scope&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 热部署 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>如果使用内置Tomcat时, 需要在<code>xxApplication中注入Bean</code>, 使用外部Tomcat时不需要添加.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TomcatwebsocketApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(TomcatwebsocketApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用内置Tomcat时需要注入ServerEndpointExporter的Bean, 它会自动注册使用了<span class="doctag">@ServerEndpoint</span>注解声明的Websocket endpoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServerEndpointExporter <span class="title function_">serverEndpointExporter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServerEndpointExporter</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编写消息处理类, 需要在处理类上添加<code>@Component</code>注解, 其他代码同上</li><li>Web客户端, 代码同上</li></ul><h3 id="Spring4-x实现WebSocket"><a href="#Spring4-x实现WebSocket" class="headerlink" title="Spring4.x实现WebSocket"></a><font color=orange>Spring4.x实现WebSocket</font></h3><ul><li>首先需要添加依赖<code>spring-boot-starter-websocket</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.coppco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springbootwebsocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springbootwebsocket<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 热部署 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executable</span>&gt;</span>true<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>xxxApplication</code>类上添加注解、实现接口、注入Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.coppco.interceptor.UsernameInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.coppco.messageHandle.WebSocketMessageHandle;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocket;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现WebSocketConfigurer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span> <span class="comment">//允许WebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootwebsocketApplication</span> <span class="keyword">implements</span> <span class="title class_">WebSocketConfigurer</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringbootwebsocketApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一个addHandler是对正常连接的配置，第二个是如果浏览器不支持websocket，使用socketjs模拟websocket的连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketHandlerRegistry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry webSocketHandlerRegistry)</span> &#123;</span><br><span class="line">        webSocketHandlerRegistry.addHandler(webSocketMessageHandle(), <span class="string">&quot;/websocket&quot;</span>).addInterceptors(<span class="keyword">new</span> <span class="title class_">UsernameInterceptor</span>());</span><br><span class="line">        webSocketHandlerRegistry.addHandler(webSocketMessageHandle(), <span class="string">&quot;/sockjs/webSocket&quot;</span>).addInterceptors(<span class="keyword">new</span> <span class="title class_">UsernameInterceptor</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息处理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebSocketMessageHandle <span class="title function_">webSocketMessageHandle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebSocketMessageHandle</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消息处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.messageHandle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.handler.TextWebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketMessageHandle</span> <span class="keyword">extends</span> <span class="title class_">TextWebSocketHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态变量，用来记录当前在线连接数。应该把它设计成线程安全的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">onlineCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现服务端与单一客户端通信的话，可以使用Map来存放，其中Key可以为用户标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, WebSocketSession&gt; clients = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, WebSocketSession&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接成功时候，会触发UI上onopen方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) session.getAttributes().get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        addOnlineCount();</span><br><span class="line">        System.out.println(<span class="string">&quot;已连接:  &quot;</span> + username + <span class="string">&quot;session: &quot;</span> + <span class="built_in">this</span>);</span><br><span class="line">        clients.put((String) session.getAttributes().get(<span class="string">&quot;username&quot;</span>), session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到文本消息时，会调用该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleTextMessage</span><span class="params">(WebSocketSession session, TextMessage message)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">send</span> <span class="operator">=</span> (String) session.getAttributes().get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        sendMessageAll(send, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出现错误时，会调用该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleTransportError</span><span class="params">(WebSocketSession session, Throwable exception)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">super</span>.handleTransportError(session, exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接时，会调用该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterConnectionClosed</span><span class="params">(WebSocketSession session, CloseStatus status)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) session.getAttributes().get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        clients.remove(username);</span><br><span class="line">        System.out.println(<span class="string">&quot;已断开: &quot;</span> + username);</span><br><span class="line">        subOnlineCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单发消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> To</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessageTo</span><span class="params">(TextMessage message, String To)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, WebSocketSession&gt; entry : clients.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.getKey().equals(To)) &#123;</span><br><span class="line">                entry.getValue().sendMessage(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 群发消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessageAll</span><span class="params">(String send, TextMessage message)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">for</span> (String key: clients.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!key.equals(send)) &#123;</span><br><span class="line">                clients.get(key).sendMessage(message);</span><br><span class="line">                System.out.println(<span class="string">&quot;&quot;</span> + send + <span class="string">&quot;发送消息给------&gt;&quot;</span> + key + <span class="string">&quot; : 内容  &quot;</span> + message.getPayload());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsPartialMessages</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.supportsPartialMessages();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">getOnlineCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> onlineCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">addOnlineCount</span><span class="params">()</span> &#123;</span><br><span class="line">        WebSocketMessageHandle.onlineCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">subOnlineCount</span><span class="params">()</span> &#123;</span><br><span class="line">        WebSocketMessageHandle.onlineCount--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Map&lt;String, WebSocketSession&gt; <span class="title function_">getClients</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clients;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>拦截器, 添加用户名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.HandshakeInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.rmi.CORBA.Util;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsernameInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandshakeInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">beforeHandshake</span><span class="params">(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Map&lt;String, Object&gt; map)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) map.get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (username == <span class="literal">null</span>) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;username&quot;</span>, <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterHandshake</span><span class="params">(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, <span class="meta">@Nullable</span> Exception e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Web客户端, 注意使用SockJS时地址是<code>http</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Java后端WebSocket的Tomcat实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Welcome<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;send()&quot;</span>&gt;</span>发送消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;closeWebSocket()&quot;</span>&gt;</span>关闭WebSocket连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/sockjs-0.3.min.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> websocket = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//判断当前浏览器是否支持WebSocket</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (<span class="string">&#x27;WebSocket&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        websocket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:8080/websocket&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;MozWebSocket&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        websocket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://localhost:8080/websocket&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        websocket = <span class="keyword">new</span> <span class="title class_">SockJS</span>(<span class="string">&quot;http://localhost:8080/sockjs/websocket&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//连接发生错误的回调方法</span></span></span><br><span class="line"><span class="language-javascript">    websocket.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setMessageInnerHTML</span>(<span class="string">&quot;WebSocket连接发生错误&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//连接成功建立的回调方法</span></span></span><br><span class="line"><span class="language-javascript">    websocket.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setMessageInnerHTML</span>(<span class="string">&quot;WebSocket连接成功&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//接收到消息的回调方法</span></span></span><br><span class="line"><span class="language-javascript">    websocket.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setMessageInnerHTML</span>(event.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//连接关闭的回调方法</span></span></span><br><span class="line"><span class="language-javascript">    websocket.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setMessageInnerHTML</span>(<span class="string">&quot;WebSocket连接关闭&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onbeforeunload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">closeWebSocket</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//将消息显示在网页上</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">setMessageInnerHTML</span>(<span class="params">innerHTML</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;message&#x27;</span>).<span class="property">innerHTML</span> += innerHTML + <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//关闭WebSocket连接</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">closeWebSocket</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        websocket.<span class="title function_">close</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//发送消息</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">send</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> message = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;text&#x27;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        websocket.<span class="title function_">send</span>(message);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="iOS使用SocketRocket实现WebSocket连接"><a href="#iOS使用SocketRocket实现WebSocket连接" class="headerlink" title="iOS使用SocketRocket实现WebSocket连接"></a><font color=orange>iOS使用SocketRocket实现WebSocket连接</font></h2><p>这里我使用的是<a href="https://github.com/facebook/SocketRocket">facebook/SocketRocket</a></p></li><li>首先使用Cocoapods导入相关库<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &#x27;SocketRocket&#x27;</span><br></pre></td></tr></table></figure></li><li>简单的示例<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ViewController.m</span></span><br><span class="line"><span class="comment">//  iOS-WebScoket</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by apple on 2018/6/16.</span></span><br><span class="line"><span class="comment">//  Copyright © 2018年 apple. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="string">&quot;ViewController.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;SocketRocket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">SRWebSocketDelegate</span>, <span class="title">UITableViewDelegate</span>, <span class="title">UITableViewDataSource</span>&gt;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> webSocket</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>)SRWebSocket *webSocket;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 显示消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>)<span class="built_in">UITableView</span> *tableView;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>)<span class="built_in">NSMutableArray</span> *messages;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 发送消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>)<span class="built_in">UITextField</span> *messageTF;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    <span class="keyword">self</span>.navigationItem.title = <span class="string">@&quot;使用SocketRocket&quot;</span>;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:<span class="keyword">self</span>.tableView];</span><br><span class="line">    [<span class="keyword">self</span>.webSocket open];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (SRWebSocket *)webSocket &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_webSocket) &#123;</span><br><span class="line">        _webSocket = (&#123;</span><br><span class="line">            SRWebSocket *object = [[SRWebSocket alloc] initWithURLRequest:[<span class="built_in">NSURLRequest</span> requestWithURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@&quot;ws://localhost:8080/websocket&quot;</span>]]];</span><br><span class="line">            object.delegate = <span class="keyword">self</span>;</span><br><span class="line">            object;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _webSocket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UITableView</span> *)tableView &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_tableView) &#123;</span><br><span class="line">        _tableView = (&#123;</span><br><span class="line">            <span class="built_in">UITableView</span> *object = [[<span class="built_in">UITableView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.bounds style:(<span class="built_in">UITableViewStylePlain</span>)];</span><br><span class="line">            [object registerClass:[<span class="built_in">UITableViewCell</span> <span class="keyword">class</span>] forCellReuseIdentifier:<span class="string">@&quot;cell&quot;</span>];</span><br><span class="line">            object.tableFooterView = [<span class="built_in">UIView</span> new];</span><br><span class="line">            object.delegate = <span class="keyword">self</span>;</span><br><span class="line">            object.dataSource = <span class="keyword">self</span>;</span><br><span class="line">            object;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _tableView;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">NSMutableArray</span> *)messages &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_messages) &#123;</span><br><span class="line">        _messages = (&#123;</span><br><span class="line">            <span class="built_in">NSMutableArray</span> *object = [[<span class="built_in">NSMutableArray</span> alloc] init];</span><br><span class="line">            object;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _messages;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UITextField</span> *)messageTF &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_messageTF) &#123;</span><br><span class="line">        _messageTF = (&#123;</span><br><span class="line">            <span class="built_in">UITextField</span> *object = [[<span class="built_in">UITextField</span> alloc] init];</span><br><span class="line">            object.tintColor = [<span class="built_in">UIColor</span> blueColor];</span><br><span class="line">            object.borderStyle = <span class="built_in">UITextBorderStyleRoundedRect</span>;</span><br><span class="line">            object.placeholder = <span class="string">@&quot;请输入发送内容&quot;</span>;</span><br><span class="line">            object.textColor = [<span class="built_in">UIColor</span> blackColor];</span><br><span class="line">            object.font = [<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">16</span>];</span><br><span class="line">            <span class="built_in">UIButton</span> *rightView = [<span class="built_in">UIButton</span> buttonWithType:(<span class="built_in">UIButtonTypeCustom</span>)];</span><br><span class="line">            [rightView addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(sendMessage) forControlEvents:(<span class="built_in">UIControlEventTouchUpInside</span>)];</span><br><span class="line">            [rightView setTitle:<span class="string">@&quot;   发送   &quot;</span> forState:(<span class="built_in">UIControlStateNormal</span>)];</span><br><span class="line">            [rightView setTitleColor:[<span class="built_in">UIColor</span> orangeColor] forState:(<span class="built_in">UIControlStateNormal</span>)];</span><br><span class="line">            [rightView sizeToFit];</span><br><span class="line">            object.rightView = rightView;</span><br><span class="line">            object.rightViewMode = <span class="built_in">UITextFieldViewModeAlways</span>;</span><br><span class="line">            object;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _messageTF;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="type">void</span>)sendMessage &#123;</span><br><span class="line">    [<span class="keyword">self</span>.webSocket send:<span class="keyword">self</span>.messageTF.text ? : <span class="string">@&quot;iOS&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> - mark UITableViewDelegate, UITableViewDataSource</span></span><br><span class="line">- (<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView heightForHeaderInSection:(<span class="built_in">NSInteger</span>)section &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">40</span>;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">UIView</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView viewForHeaderInSection:(<span class="built_in">NSInteger</span>)section &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.messageTF;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath &#123;</span><br><span class="line">    <span class="built_in">UITableViewCell</span> *cell = [tableView dequeueReusableCellWithIdentifier:<span class="string">@&quot;cell&quot;</span> forIndexPath:indexPath];</span><br><span class="line">    cell.textLabel.text = <span class="keyword">self</span>.messages[indexPath.row];</span><br><span class="line">    <span class="keyword">return</span> cell;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSInteger</span>)numberOfSectionsInTableView:(<span class="built_in">UITableView</span> *)tableView &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.messages.count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> - mark SRWebSocketDelegate</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 接收到消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="type">void</span>)webSocket:(SRWebSocket *)webSocket didReceiveMessage:(<span class="built_in">NSString</span> *)message &#123;</span><br><span class="line">    [<span class="keyword">self</span>.messages addObject:message];</span><br><span class="line">    [<span class="keyword">self</span> reload];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 连接时</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="type">void</span>)webSocketDidOpen:(SRWebSocket *)webSocket &#123;</span><br><span class="line">    [<span class="keyword">self</span>.messages addObject:<span class="string">@&quot;连接WebSocket成功&quot;</span>];</span><br><span class="line">    [<span class="keyword">self</span> reload];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 连接失败时</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="type">void</span>)webSocket:(SRWebSocket *)webSocket didFailWithError:(<span class="built_in">NSError</span> *)error &#123;</span><br><span class="line">    [<span class="keyword">self</span>.messages addObject:<span class="string">@&quot;连接WebSocket失败&quot;</span>];</span><br><span class="line">    [<span class="keyword">self</span> reload];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 关闭时</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="type">void</span>)webSocket:(SRWebSocket *)webSocket didCloseWithCode:(<span class="built_in">NSInteger</span>)code reason:(<span class="built_in">NSString</span> *)reason wasClean:(<span class="type">BOOL</span>)wasClean &#123;</span><br><span class="line">    [<span class="keyword">self</span>.messages addObject:<span class="string">@&quot;关闭WebSocket连接&quot;</span>];</span><br><span class="line">    [<span class="keyword">self</span> reload];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 接收到服务器的Pong时调用, 一般用作心跳</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="type">void</span>)webSocket:(SRWebSocket *)webSocket didReceivePong:(<span class="built_in">NSData</span> *)pongPayload &#123;</span><br><span class="line">    [<span class="keyword">self</span>.messages addObject:<span class="string">@&quot;收到心跳包&quot;</span>];</span><br><span class="line">    [<span class="keyword">self</span> reload];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 是否把 NSData 转成 NSString, 默认YES</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="type">BOOL</span>)webSocketShouldConvertTextFrameToString:(SRWebSocket *)webSocket &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)reload &#123;</span><br><span class="line">    [<span class="keyword">self</span>.tableView reloadData];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="Spring-Boot中使用netty-socketio"><a href="#Spring-Boot中使用netty-socketio" class="headerlink" title="Spring Boot中使用netty-socketio"></a><font color=orange>Spring Boot中使用netty-socketio</font></h2><p><a href="https://github.com/mrniko/netty-socketio">netty-socketio</a>是基于netty的<a href="https://github.com/socketio/socket.io">socket.io</a>服务实现，相对于javaee的原生websocket支持（@serverEndpoint）和spring-boot的MessageBroker(@messageMapping)，netty-socketio完整的实现了socket.io提供的监听前台事件、向指定客户端发送事件、将指定客户端加入指定房间、向指定房间广播事件、客户端从指定房间退出等操作。</p><h3 id="netty-socketio依赖"><a href="#netty-socketio依赖" class="headerlink" title="netty-socketio依赖"></a><font color=orange>netty-socketio依赖</font></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.corundumstudio.socketio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-socketio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="简单的例子"><a href="#简单的例子" class="headerlink" title=" 简单的例子 "></a><font color=orange> 简单的例子 </font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.chat.runner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.*;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.listener.ConnectListener;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.listener.DataListener;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.listener.DisconnectListener;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用CommandLineRunner, 在Application启动之后回调启动Socket.io</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@org</span>.springframework.context.annotation.Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatRunner</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(ChatRunner.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SocketIOServer server;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * ip</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        configuration.setHostname(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 端口</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        configuration.setPort(<span class="number">9090</span>);</span><br><span class="line"></span><br><span class="line">        configuration.setPingInterval(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        configuration.setPingTimeout(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置最大每帧处理数据的长度，防止他人利用大数据来攻击服务器</span></span><br><span class="line">        <span class="comment">//configuration.setMaxFramePayloadLength(1024 * 1024);</span></span><br><span class="line">        <span class="comment">//设置http交互最大内容长度</span></span><br><span class="line">        <span class="comment">//configuration.setMaxHttpContentLength(1024 * 1024);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 身份验证</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        configuration.setAuthorizationListener(<span class="keyword">new</span> <span class="title class_">AuthorizationListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAuthorized</span><span class="params">(HandshakeData handshakeData)</span> &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;授权成功&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        server = <span class="keyword">new</span> <span class="title class_">SocketIOServer</span>(configuration);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//事件监听, ChatObject是前端和后端发送的数据类型</span></span><br><span class="line">        server.addEventListener(<span class="string">&quot;chatevent&quot;</span>, ChatObject.class, <span class="keyword">new</span> <span class="title class_">DataListener</span>&lt;ChatObject&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onData</span><span class="params">(SocketIOClient socketIOClient, ChatObject object, AckRequest ackRequest)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">//广播</span></span><br><span class="line">                server.getBroadcastOperations().sendEvent(<span class="string">&quot;chatevent&quot;</span>, object);</span><br><span class="line">                logger.info(JSONUtils.toJSON(object));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连接</span></span><br><span class="line">        server.addConnectListener(<span class="keyword">new</span> <span class="title class_">ConnectListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onConnect</span><span class="params">(SocketIOClient socketIOClient)</span> &#123;</span><br><span class="line">                <span class="type">HandshakeData</span> <span class="variable">data</span> <span class="operator">=</span> socketIOClient.getHandshakeData();</span><br><span class="line">                logger.info(JSONUtils.toJSON(data) + <span class="string">&quot;上线了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//失去连接</span></span><br><span class="line">        server.addDisconnectListener(<span class="keyword">new</span> <span class="title class_">DisconnectListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDisconnect</span><span class="params">(SocketIOClient socketIOClient)</span> &#123;</span><br><span class="line">                <span class="type">HandshakeData</span> <span class="variable">data</span> <span class="operator">=</span> socketIOClient.getHandshakeData();</span><br><span class="line">                logger.info(JSONUtils.toJSON(data) + <span class="string">&quot;下线了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        server.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a><font color=orange>实际使用</font></h3><h4 id="创建一个Configuration类"><a href="#创建一个Configuration类" class="headerlink" title="创建一个Configuration类"></a><font color=orange>创建一个Configuration类</font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.socketio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.coppco.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.*;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.annotation.SpringAnnotationScanner;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * netty-socket.io的相关配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@org</span>.springframework.context.annotation.Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JCConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;justChat.service.hostname&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String hostname;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;justChat.service.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> port;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference(version = &quot;$&#123;consumer.version&#125;&quot;,</span></span><br><span class="line"><span class="meta">            application = &quot;$&#123;dubbo.application.id&#125;&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(JCConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SocketIOServer <span class="title function_">socketIOServer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置服务器ip以及端口</span></span><br><span class="line">        config.setHostname(hostname);</span><br><span class="line">        config.setPort(port);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置ping间隔以及超时时间</span></span><br><span class="line">        config.setPingInterval(<span class="number">5000</span>);</span><br><span class="line">        config.setPingTimeout(<span class="number">3000</span>);</span><br><span class="line">        config.setWorkerThreads(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置</span></span><br><span class="line">        <span class="type">SocketConfig</span> <span class="variable">socketConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SocketConfig</span>();</span><br><span class="line">        socketConfig.setReuseAddress(<span class="literal">true</span>);</span><br><span class="line">        config.setSocketConfig(socketConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置最大每帧处理数据的长度，防止他人利用大数据来攻击服务器</span></span><br><span class="line">        config.setMaxFramePayloadLength(<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line">        <span class="comment">//设置http交互最大内容长度</span></span><br><span class="line">        config.setMaxHttpContentLength(<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//授权</span></span><br><span class="line">        config.setAuthorizationListener(<span class="keyword">new</span> <span class="title class_">AuthorizationListener</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAuthorized</span><span class="params">(HandshakeData data)</span> &#123;</span><br><span class="line">                <span class="comment">//获取userId和token</span></span><br><span class="line">                <span class="comment">//String userIdString = data.getSingleUrlParam(&quot;userId&quot;);</span></span><br><span class="line">                <span class="comment">//String token = data.getSingleUrlParam(&quot;token&quot;);</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">SocketIOServer</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SocketIOServer</span>(config);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用netty-socket.io中的注解扫描</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> socketServer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SpringAnnotationScanner <span class="title function_">springAnnotationScanner</span><span class="params">(SocketIOServer socketServer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpringAnnotationScanner</span>(socketServer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建一个Runner在Application启动时开启Server"><a href="#创建一个Runner在Application启动时开启Server" class="headerlink" title="创建一个Runner在Application启动时开启Server"></a><font color=orange>创建一个Runner在Application启动时开启Server</font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.socketio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.SocketIOServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Socket.io执行类, 利用CommandLineRunner接口在Application启动之后的回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JCRunner</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SocketIOServer server;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">this</span>.server.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息处理类"><a href="#消息处理类" class="headerlink" title="消息处理类"></a><font color=orange>消息处理类</font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.coppco.socketio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.coppco.common.pojo.Message;</span><br><span class="line"><span class="keyword">import</span> com.coppco.common.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.coppco.service.MessageService;</span><br><span class="line"><span class="keyword">import</span> com.coppco.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.coppco.socketio.utils.SocketClientUtils;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.AckCallback;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.AckRequest;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.SocketIOClient;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.SocketIOServer;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.annotation.OnConnect;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.annotation.OnDisconnect;</span><br><span class="line"><span class="keyword">import</span> com.corundumstudio.socketio.annotation.OnEvent;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息和事件处理中心</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JCMessageEventHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(JCMessageEventHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SocketIOServer server;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference(version = &quot;$&#123;consumer.version&#125;&quot;,</span></span><br><span class="line"><span class="meta">            application = &quot;$&#123;dubbo.application.id&#125;&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference(version = &quot;$&#123;consumer.version&#125;&quot;,</span></span><br><span class="line"><span class="meta">            application = &quot;$&#123;dubbo.application.id&#125;&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> MessageService messageService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">sessionKey</span> <span class="operator">=</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接成功时</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnConnect</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onConnect</span><span class="params">(SocketIOClient client)</span> &#123;</span><br><span class="line">        <span class="comment">//获取用户id和token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userId</span> <span class="operator">=</span> client.getHandshakeData().getSingleUrlParam(<span class="string">&quot;userId&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> client.getHandshakeData().getSingleUrlParam(<span class="string">&quot;token&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findUserById(Long.parseLong(userId));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//保存已连接的用户</span></span><br><span class="line">            SocketClientUtils.put(userId, client.getSessionId());</span><br><span class="line"></span><br><span class="line">            client.set(sessionKey, user);</span><br><span class="line"></span><br><span class="line">            logger.info(user.getMobile() + <span class="string">&quot;: 连接成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            client.disconnect();</span><br><span class="line"></span><br><span class="line">            logger.error(user.getMobile() + <span class="string">&quot;: 获取信息失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 断开连接时</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnDisconnect</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">disConnect</span><span class="params">(SocketIOClient client)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> client.get(sessionKey);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != user) &#123;</span><br><span class="line">            SocketClientUtils.remove(user.getId() + <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            logger.info(user.getMobile() + <span class="string">&quot;: 断开连接&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 聊天</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> client</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ackRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnEvent(value = &quot;chat&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eventChat</span><span class="params">(SocketIOClient client, AckRequest ackRequest, Message message)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ack数据: 在TCP/IP协议中，如果接收方成功的接收到数据，那么会回复一个ACK数据。通常ACK信号有自己固定的格式,长度大小,由接收方回复给发送方。</span></span><br><span class="line">        <span class="keyword">if</span> (ackRequest.isAckRequested()) &#123;</span><br><span class="line">            ackRequest.sendAckData(<span class="string">&quot;服务器已经收到消息&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        messageService.saveMessage(message);</span><br><span class="line"></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">isGroupChat</span> <span class="operator">=</span> message.getChatType().equalsIgnoreCase(<span class="string">&quot;group&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">to_userId</span> <span class="operator">=</span> message.getRecipientUserId();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isGroupChat) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//在线</span></span><br><span class="line">            <span class="keyword">if</span> (SocketClientUtils.containsKey(to_userId + <span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">SocketIOClient</span> <span class="variable">targetClient</span> <span class="operator">=</span> server.getClient(SocketClientUtils.get(to_userId + <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">                targetClient.sendEvent(<span class="string">&quot;chat&quot;</span>, <span class="keyword">new</span> <span class="title class_">AckCallback</span>&lt;String&gt;(String.class) &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(String result)</span> &#123;</span><br><span class="line">                        logger.info(to_userId + <span class="string">&quot;已收到消息 ， ack 回复 ： &quot;</span> + result);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTimeout</span><span class="params">()</span> &#123;</span><br><span class="line">                        logger.info(to_userId + <span class="string">&quot;接受超时&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a><font color=orange>后记</font></h2><p>这里只是很简单的使用了一下WebSocket, 实际开发中不可能这么简单, 复杂的逻辑, 心跳机制、断线重连等问题, 以及图片、语音和视频的传输.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/images/java/moxie_WebSocket.jpg&quot; alt=&quot;hello&quot; style=&quot;width: 70%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;/&gt;&lt;/p&gt;
&lt;p&gt;以往在Web项目中, 如果要实现和服务器实时通讯可以通过轮询、长轮询来实现, 此时即浪费带宽又消耗服务器资源.但是使用WebSocket可以很好的解决该问题, 如果你担心不同浏览器不支持WebSocket, 那么&lt;a href=&quot;https://socket.io&quot;&gt;socketio&lt;/a&gt;是一个不错的选择, 它封装了WebSocket、轮询和其他一些实时通讯方式.&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="WebSocket" scheme="http://yoursite.com/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>iTunes Connect构建版本不显示</title>
    <link href="http://yoursite.com/2018/01/02/iOS/iTunes%20Connect%20%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E4%B8%8D%E6%98%BE%E7%A4%BA/"/>
    <id>http://yoursite.com/2018/01/02/iOS/iTunes Connect 构建版本不显示/</id>
    <published>2018-01-02T00:53:57.000Z</published>
    <updated>2019-04-29T08:39:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近稍微空闲了, 整理一下上传ipa到iTunes Connect时, 上传成功但是构建版本一直不显示的问题.</p><span id="more"></span><h2 id="问题说明"><a href="#问题说明" class="headerlink" title=" 问题说明 "></a><font color=orange> 问题说明 </font></h2><p>公司的主项目上App Store时间的较早, 大约在2015年上传的, 之后一直都是迭代迭代, 老项目上传iTunes Connect没有出现上传成功但是不显示的问题.</p><p>最近公司新项目需要上传, 申请邓白氏编码、Apple开发者账户、证书、在iTunes Connect上面新建App都没有问题.但是在Xcode打包上传到App Store后,在iTunes Connect构建版本中居然找不到构建版本~~~</p><p>这里注意的是使用Xcode或者Application Loader上传时, 上传结果明明是Successfull, 但是iTunes Connect中构建版本却没有构建版本.此时说明你上传了无效的ipa包.</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title=" 解决方法 "></a><font color=orange> 解决方法 </font></h2><p>大致原因主要有: </p><ul><li>苹果服务器经常性抽风, 多上传几次构建版本会出来</li><li>苹果关于App的政策发生变化, 导致上传无效的ipa包.</li></ul><p>第二种情况下, 使用Application Loader或其他途径上传iTunes Connect成功后, 如果是无效的ipa, 苹果可能会给你的开发者账号邮箱发送邮件, 可能由于<font color=red>使用了私有API</font>或者其他问题, 如<font color=red>从iOS10开始,苹果更加注重对用于隐私的保护,App 里边如果需要访问用户隐私,必须要做描述,所以要在 plist 文件中添加描述, 麦克风权限、相机权限和相册权限是必须添加的, 即使的你App没有用到这些功能</font>~~~~.</p><ul><li>私有API<ul><li>检查自己的代码, 发现有使用私有API的去掉</li><li>检查使用的第三方SDK, 咨询相关客服有没有使用私有API</li></ul></li><li>iOS 10以后权限<ul><li>在<code>Info.plist</code>中必须添加麦克风、相机和相册权限<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 麦克风 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSMicrophoneUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问麦克风<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 相机 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSCameraUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问相机<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 相册 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSPhotoLibraryUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问相册<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br></pre></td></tr></table></figure></li><li>其他权限视情况添加<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 位置 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSLocationUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问位置<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 在使用期间访问位置 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSLocationWhenInUseUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要在使用期间访问位置<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 始终访问位置 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSLocationAlwaysUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要始终访问位置<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 日历 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSCalendarsUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问日历<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 提醒事项 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSRemindersUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问提醒事项<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 运动与健身 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSMotionUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> <span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问运动与健身<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 健康更新 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSHealthUpdateUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问健康更新 <span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 健康分享 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSHealthShareUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问健康分享<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 蓝牙 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSBluetoothPeripheralUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问蓝牙<span class="tag">&lt;/<span class="name">string</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 媒体资料库 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>NSXXXleMusicUsageDescription<span class="tag">&lt;/<span class="name">key</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>XXX需要访问媒体资料库<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title=" 其他 "></a><font color=orange> 其他 </font></h2><p>通过Application Loader上传ipa过慢, 解决方法:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~      </span><br><span class="line">mv .itmstransporter/ .old_itmstransporter/      </span><br><span class="line">&quot;/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/itms/bin/iTMSTransporter&quot;  </span><br></pre></td></tr></table></figure></p><p>上传ipa包, 除了使用Application Loader和Xcode, 还可以使用 Appuploader和fastlane等.</p><h2 id="后记"><a href="#后记" class="headerlink" title=" 后记 "></a><font color=orange> 后记 </font></h2><p>在添加完麦克风、相机和相册的权限信息之后, 重新打包上传成功后果然在iTunes Connect中出现了构建版本, 心中一万个草泥马路过…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近稍微空闲了, 整理一下上传ipa到iTunes Connect时, 上传成功但是构建版本一直不显示的问题.&lt;/p&gt;
    
    </summary>
    
    
      <category term="资料整理" scheme="http://yoursite.com/tags/%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="坑点" scheme="http://yoursite.com/tags/%E5%9D%91%E7%82%B9/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>使用Gitlab-CI实现iOS的可持续集成</title>
    <link href="http://yoursite.com/2017/11/29/iOS/%E4%BD%BF%E7%94%A8Gitlab-CI%E5%AE%9E%E7%8E%B0iOS%E7%9A%84%E5%8F%AF%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    <id>http://yoursite.com/2017/11/29/iOS/使用Gitlab-CI实现iOS的可持续集成/</id>
    <published>2017-11-29T07:51:46.000Z</published>
    <updated>2023-06-25T07:39:59.916Z</updated>
    
    <content type="html"><![CDATA[<p>持续集成(Continuous Integration)是一种软件开发实践，即团队开发成员经常集成他们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</p><p><img src="/assets/images/iOS/gitlab-ci-iOS.jpg" alt="hello" style="width: 50%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"/></p><span id="more"></span><h1 id="常见持续集成框架"><a href="#常见持续集成框架" class="headerlink" title=" 常见持续集成框架 "></a><font color=orange> 常见持续集成框架 </font></h1><ul><li><font color=red>Jenkins</font>: 基于Java语言开发的持续构建/部署开源免费的持续集成框架, 目前使用最多的持续集成框架.</li><li><font color= red>Buildbot</font>: 基于Python开发而成的项目.</li><li><font color= red>Travis CI</font>: 开源项目免费使用, 使用Travis Pro需要付费.</li><li><font color= red>Gitlab-CI</font>: 是Gitlab提供的一个持续集成套件, 在8.x以后版本已经集成进Gitlab中, 使用时配置Gitlab-runner即可.</li></ul><h1 id="Gitlab-CI"><a href="#Gitlab-CI" class="headerlink" title=" Gitlab-CI "></a><font color=orange> Gitlab-CI </font></h1><h2 id="安装Gitalb"><a href="#安装Gitalb" class="headerlink" title=" 安装Gitalb "></a><font color=orange> 安装Gitalb </font></h2><h3 id="安装"><a href="#安装" class="headerlink" title=" 安装 "></a><font color=green> 安装 </font></h3><p>使用Gitlab-CI需要首先需要使用<a href="https://www.gitlab.com">Gitlab</a>或者自己<a href="/2017/07/07/Java Web/CentOS 7搭建GitLab/index.html">安装Gitlab</a>到自己的服务器, 从8.0版本开始, Gitlab默认已经集成Gitlab-CI.</p><h3 id="汉化"><a href="#汉化" class="headerlink" title=" 汉化 "></a><font color= green> 汉化 </font></h3><ul><li>Gitlab v8.8以及之前的版本汉化<ul><li><a href="https://gitlab.com/larryli/gitlab.git">https://gitlab.com/larryli/gitlab.git</a></li></ul></li><li>Gitlab v8.8之后的汉化<ul><li><a href="https://gitlab.com/xhang/gitlab.git">https://gitlab.com/xhang/gitlab.git</a></li><li>该项目延续了larryli的汉化.</li></ul></li></ul><h2 id="配置Gitlab-runner"><a href="#配置Gitlab-runner" class="headerlink" title=" 配置Gitlab-runner "></a><font color=orange> 配置Gitlab-runner </font></h2><h3 id="Gitlab-CI和Gitlab-runner的区别"><a href="#Gitlab-CI和Gitlab-runner的区别" class="headerlink" title=" Gitlab-CI和Gitlab-runner的区别 "></a><font color= green> Gitlab-CI和Gitlab-runner的区别 </font></h3><ul><li>Gitlab-CI<ul><li>它安装在Gitlab服务器</li><li>用来管理各个项目的各个runner</li></ul></li><li>Gitlab-runner<ul><li>它可安装在不同的操作系统</li><li>基于不同IDE、编译环境</li></ul></li></ul><h3 id="安装Gitlab-runner"><a href="#安装Gitlab-runner" class="headerlink" title=" 安装Gitlab-runner "></a><font color= green> 安装Gitlab-runner </font></h3><font color=red>从Gitlab-runner 10.0开始, <code>gitlab-ci-multi-runner</code>重新命名为<code>gitlab-runner</code>, 安装时需要注意!</font><h5 id="GitLab-Runner和Gitlab版本支持情况"><a href="#GitLab-Runner和Gitlab版本支持情况" class="headerlink" title=" GitLab Runner和Gitlab版本支持情况 "></a><font color= green> GitLab Runner和Gitlab版本支持情况 </font></h5><table><thead><tr><th style="text-align:center">GitLab Runner / GitLab</th><th style="text-align:center">9.0.x (03.2017)</th><th style="text-align:center">9.1.x (04.2017)</th><th style="text-align:center">9.2.x (05.2017)</th><th style="text-align:center">9.3.x (06.2017)</th><th style="text-align:center">9.4.x (07.2017)</th><th style="text-align:center">9.5.x (08.2017)</th><th style="text-align:center">10.0.x (09.2017)</th></tr></thead><tbody><tr><td style="text-align:center">v1.10.x</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✗</td></tr><tr><td style="text-align:center">v1.11.x</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✗</td></tr><tr><td style="text-align:center">v9.0.x</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">v9.1.x</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">v9.2.x</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">v9.3.x</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">v9.4.x</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">v9.5.x</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td></tr><tr><td style="text-align:center">v10.0.x</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td></tr></tbody></table><h5 id="不同系统安装gitlab-runner"><a href="#不同系统安装gitlab-runner" class="headerlink" title=" 不同系统安装gitlab-runner "></a><font color= green> 不同系统安装gitlab-runner </font></h5><ul><li><a href="https://docs.gitlab.com/runner/install/linux-repository.html">Install using GitLab’s repository for Debian/Ubuntu/CentOS/RedHat (preferred)</a></li><li><a href="https://docs.gitlab.com/runner/install/linux-manually.html">Install on GNU/Linux manually (advanced) </a></li><li><a href="https://docs.gitlab.com/runner/install/osx.html">Install on macOS (preferred) </a></li><li><a href="https://docs.gitlab.com/runner/install/windows.html">Install on Windows (preferred) </a></li><li><a href="https://docs.gitlab.com/runner/install/docker.html">Install as a Docker Service </a></li><li><a href="https://docs.gitlab.com/runner/install/autoscaling.html">Install in Auto-scaling mode using Docker machine </a></li><li><a href="https://docs.gitlab.com/runner/install/freebsd.html">Install on FreeBSD </a></li><li><a href="https://docs.gitlab.com/runner/install/kubernetes.html">Install on Kubernetes </a></li><li><a href="https://docs.gitlab.com/runner/install/bleeding-edge.html">Install the nightly binary manually (development) </a></li></ul><h5 id="Mac下安装gitlab-runner"><a href="#Mac下安装gitlab-runner" class="headerlink" title=" Mac下安装gitlab-runner "></a><font color= green> Mac下安装gitlab-runner </font></h5><p>以下是官网10.0以后版本安装步骤:</p><ul><li>下载可执行文件: <code>sudo curl --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-darwin-amd64</code><ul><li>(由于墙的原因安装速度比较慢), 也可以下载该文件然后拷贝到<code>/usr/local/bin</code>目录中, 并且重命名为: <code>gitlab-runner</code>或者<code>gitlab-ci-multi-runner</code></li></ul></li><li>更改权限: <code>sudo chmod +x /usr/local/bin/gitlab-runner</code></li></ul><h5 id="Linux下安装gitlab-runner"><a href="#Linux下安装gitlab-runner" class="headerlink" title=" Linux下安装gitlab-runner "></a><font color= green> Linux下安装gitlab-runner </font></h5><p>由于墙的原因下载很慢, 对于<code>ubuntu</code>、<code>debian</code>和<code>centOS</code>等Linux系统可以使用<a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ci-multi-runner/">清华大学开源软件镜像站</a>来进行安装, 它里面现在更新到了9.x版本的gitlab-runner.</p><p>如CentOS下使用yum安装:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#1、创建`gitlab-ci-multi-runner.repo`</span><br><span class="line">vi /etc/yum.repos.d/gitlab-ci-multi-runner.repo</span><br><span class="line"></span><br><span class="line">#2、将下面的内容写入并保存</span><br><span class="line">[gitlab-ci-multi-runner]</span><br><span class="line">name=gitlab-ci-multi-runner</span><br><span class="line">baseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ci-multi-runner/yum/el7</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packages.gitlab.com/gpg.key</span><br><span class="line"></span><br><span class="line">#3、运行命令</span><br><span class="line">sudo yum makecache</span><br><span class="line">sudo yum install gitlab-ci-multi-runner</span><br></pre></td></tr></table></figure></p><h4 id="注册Gitlab-runner"><a href="#注册Gitlab-runner" class="headerlink" title=" 注册Gitlab-runner "></a><font color=green> 注册Gitlab-runner </font></h4><p>安装好gitlab-runner以后, 可以根据操作系统来注册runner(注意gitlab-runner版本不同, 命令也不同): </p><ul><li>Linux和Mac在终端中运行命令: <code>sudo gitlab-runner register</code></li><li><p>Windows需要<code>以管理员身份</code>打开cmd然后运行: <code>./gitlab-runner.exe register</code> </p></li><li><p>第一步输入Gitlab CI地址: 例如: 可以在<code>Gitlab管理区域中Runners中</code>查看url或者在<code>单个项目中的Runners中</code>查看url.</p></li><li>第二步输入项目CI或者共享Token: 决定该Runner是Shared Runner还是针对单个项目的Specific Runner, 可以在<code>Gitlab管理区域中Runners中</code>查看Token或者在<code>单个项目中的Runners中</code>查看Token. </li><li>第三步输入runner描述: runner的描述.</li><li>第四部输入runner标签: 可以有多个,使用逗号隔开</li><li>v10.0及以后版本才有配置(是否在没有tag时执行任务): 可以在Gitlab UI界面中更改. </li><li>v10.0及以后版本配置(是否锁定当前runner, 当当前项目执行该runner时): 可以在Gitlab UI界面中更改. </li><li>第五步输入runner的执行语言: 可以是<code>ssh</code>, <code>docker+machine</code>, <code>docker-ssh+machine</code>, <code>kubernetes</code>, <code>docker</code>, <code>parallels</code>, <code>virtualbox</code>, <code>docker-ssh</code>, <code>shell</code>.</li><li>最后在Gitlab中就会有一个runner. </li><li>查看当前机器的runner状态: <code>sudo gitlab-ci-multi-runner list</code></li></ul><h4 id="安装服务并启动gitlab-runner"><a href="#安装服务并启动gitlab-runner" class="headerlink" title=" 安装服务并启动gitlab-runner "></a><font color=green> 安装服务并启动gitlab-runner </font></h4><ul><li>Windows<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gitlab-runner install</span><br><span class="line">gitlab-runner start</span><br></pre></td></tr></table></figure></li><li>Linux和Mac<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">gitlab-runner install</span><br><span class="line">gitlab-runner start</span><br></pre></td></tr></table></figure></li></ul><h3 id="在项目根目录配置-gitlab-ci-yml"><a href="#在项目根目录配置-gitlab-ci-yml" class="headerlink" title=" 在项目根目录配置.gitlab-ci.yml "></a><font color=orange> 在项目根目录配置<code>.gitlab-ci.yml</code> </font></h3><p>当安装好Gitlab、Gitlab-CI以及注册好Gitlab-runner之后, 我们要做的事情就是在项目根目录中添加 <code>.gitlab-ci.yml</code> 文件配置构建任务。当我们添加了 <code>.gitlab-ci.yml</code> 了之后，每次提交代码或者合并 master 都会自动运行构建任务了。它使用<code>YAML</code>文件进行配置, 缩进时使用空格, 不要使用<code>tab</code>键.</p><ul><li><p><a href="https://docs.gitlab.com/ee/ci/yaml/README.html#configuration-of-your-jobs-with-gitlab-ci-yml">英文文档</a></p></li><li><p>Stages: 阶段<br><code>.gitlab-ci.yml</code>中可以包含很多阶段: 安装依赖、运行测试、编译、部署测试服务器、部署生产服务器等流程。使用<code>stages</code>来定义,如下定义了<code>build</code>和<code>test</code>两个阶段: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stages:</span><br><span class="line">  - build</span><br><span class="line">  - test</span><br></pre></td></tr></table></figure><ul><li>特点<ul><li>所有Stages会按照顺序运行，即当一个Stage完成后，下一个Stage才会开始</li><li>只有当所有Stages完成后，该构建任务才会成功</li><li>如果任何一个Stage失败，那么后面的Stages不会执行，该构建任务失败</li></ul></li></ul></li><li><p>Job: 工作(工作名唯一, 并且不能为关键字)<br>Jobs 表示构建工作，表示某个Stage里面执行的工作。我们可以在Stages里面定义多个Jobs.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">build_project:</span><br><span class="line">  stage: build</span><br><span class="line">  script:</span><br><span class="line">    - xcodebuild clean -project ProjectName.xcodeproj -scheme SchemeName | xcpretty</span><br><span class="line">    - xcodebuild test -project ProjectName.xcodeproj -scheme SchemeName -destination &#x27;platform=iOS Simulator,name=iPhone 6s,OS=9.2&#x27; | xcpretty -s</span><br><span class="line">  tags:</span><br><span class="line">    - ios_9-2</span><br><span class="line">    - xcode_7-2</span><br><span class="line">    - osx_10-11</span><br><span class="line"></span><br><span class="line">archive_project:</span><br><span class="line">  stage: archive</span><br><span class="line">  script:</span><br><span class="line">    - xcodebuild clean archive -archivePath build/ProjectName -scheme SchemeName</span><br><span class="line">    - xcodebuild -exportArchive -exportFormat ipa -archivePath &quot;build/ProjectName.xcarchive&quot; -exportPath &quot;build/ProjectName.ipa&quot; -exportProvisioningProfile &quot;ProvisioningProfileName&quot;</span><br><span class="line">  only:</span><br><span class="line">    - master</span><br><span class="line">  artifacts:</span><br><span class="line">    paths:</span><br><span class="line">      - build/ProjectName.ipa</span><br><span class="line">  tags:</span><br><span class="line">    - ios_9-2</span><br><span class="line">    - xcode_7-2</span><br><span class="line">    - osx_10-11</span><br></pre></td></tr></table></figure><ul><li>Job中的<code>stage</code>: 表示所属的阶段</li><li>Job中的<code>script</code>: 定义由Runner执行的脚本</li><li>Job中的<code>only</code>: 表示只在 <code>分支/标签/触发器</code> 才会执行job</li><li>Job中的<code>except</code>: 表示除了<code>分支/标签/触发器</code>才会执行job</li><li>Job中的<code>tag</code>: 定义用于选择Runner的标签列表</li><li>Job中的<code>artifacts</code>: 定义Job中生成的附件</li><li>特点<ul><li>相同Stage中的Jobs会并行执行</li><li>相同Stage中的Jobs都执行成功时，该Stage才会成功</li><li>如果任何一个Job失败，那么该Stage失败，即该构建任务失败</li></ul></li></ul></li></ul><h2 id="iOS相关编译、打包命令"><a href="#iOS相关编译、打包命令" class="headerlink" title=" iOS相关编译、打包命令 "></a><font color=orange> iOS相关编译、打包命令 </font></h2><p>持续集成无论是使用Gitlab-CI还是Jenkins, 对于iOS来说都需要知道底层的打包、编译、上传App Store、蒲公英的一些底层命令.</p><h3 id="xcodebuild命令"><a href="#xcodebuild命令" class="headerlink" title=" xcodebuild命令 "></a><font color=orange> xcodebuild命令 </font></h3><p>xcodebuild 是苹果提供的打包项目或者工程的命令，了解该命令最好的方式就是终端使用<code>man xcodebuild</code>命令查看, <a href="https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html">官方文档</a>.</p><h5 id="使用注意"><a href="#使用注意" class="headerlink" title=" 使用注意 "></a><font color=green> 使用注意 </font></h5><ul><li>需要在包含<code>*.xcodeproj</code>的目录中执行<code>xcodebuild</code>目录, 如果该目录下有多个 projects，那么需要使用<code>-project</code>指定需要编译的项目。</li><li>不指定编译的target时, 默认会编译项目下第一个target.</li><li>当编译worspace时需要同时指定<code>-workspace</code>和<code>-scheme</code>参数, scheme参数决定哪个targets会被编译以及编译方式.</li><li><code>-list</code>、<code>-showBuildSetting</code>和<code>-showsdks</code>可以查看项目或者工程的信息.</li></ul><h5 id="常用xcodebuild命令"><a href="#常用xcodebuild命令" class="headerlink" title=" 常用xcodebuild命令 "></a><font color= green> 常用xcodebuild命令 </font></h5><ul><li>查看Xcode所有可用的SDKs: <blockquote><p>   xcodebuild -showsdks</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">iOS SDKs:</span><br><span class="line">iOS 11.0                      -sdk iphoneos11.0</span><br><span class="line"></span><br><span class="line">iOS Simulator SDKs:</span><br><span class="line">Simulator - iOS 11.0          -sdk iphonesimulator11.0</span><br><span class="line"></span><br><span class="line">macOS SDKs:</span><br><span class="line">macOS 10.13                   -sdk macosx10.13</span><br><span class="line"></span><br><span class="line">tvOS SDKs:</span><br><span class="line">tvOS 11.0                     -sdk appletvos11.0</span><br><span class="line"></span><br><span class="line">tvOS Simulator SDKs:</span><br><span class="line">Simulator - tvOS 11.0         -sdk appletvsimulator11.0</span><br><span class="line"></span><br><span class="line">watchOS SDKs:</span><br><span class="line">watchOS 4.0                   -sdk watchos4.0</span><br><span class="line"></span><br><span class="line">watchOS Simulator SDKs:</span><br><span class="line">Simulator - watchOS 4.0       -sdk watchsimulator4.0</span><br></pre></td></tr></table></figure><ul><li><p>查看当前工程或项目build setting配置参数: </p><blockquote><p>   xcodebuild -showBuildSettings [-project xxx.xcodeproj | [-workspace xxx.xcworkspace -scheme schemename]]</p></blockquote></li><li><p>查看当前工程或项目的target、configurations或workspace中的schemes:</p><blockquote><p>   xcodebuild -list [-project xxx.xcodeproj | -workspace xxx.xcworkspace]</p></blockquote></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Information about project &quot;HelloWorld&quot;:</span><br><span class="line">    Targets:</span><br><span class="line">        HelloWorld</span><br><span class="line">        HelloWorldTests</span><br><span class="line">        HelloWorldUITests</span><br><span class="line"></span><br><span class="line">    Build Configurations:</span><br><span class="line">        Debug</span><br><span class="line">        Release</span><br><span class="line"></span><br><span class="line">    If no build configuration is specified and -scheme is not passed then &quot;Release&quot; is used.</span><br><span class="line"></span><br><span class="line">    Schemes:</span><br><span class="line">        HelloWorld</span><br></pre></td></tr></table></figure><ul><li><p>编译、测试、分析、archive等: </p><ul><li><p>使用Cocoapods管理项目, 会生成xcworkspace文件, 使用该方式: </p><blockquote><p>   xcodebuild -workspace name.xcworkspace -scheme schemename [[-destination destinationspecifier] …] [-destination-timeout value] [-configuration configurationname] [-sdk [sdkfullpath | sdkname]] [action …] [buildsetting=value …] [-userdefault=value …]</p></blockquote></li><li><p>对于使用<code>xxx.xcodeproj</code>的项目, 使用该方式: </p><blockquote><p>   xcodebuild [-project name.xcodeproj] [[-target targetname] … | -alltargets] [-configuration configurationname] [-sdk [sdkfullpath | sdkname]] [action …] [buildsetting=value …] [-userdefault=value …]</p></blockquote></li><li>其中<code>action</code>对应的有(如果没有指定, 默认值是build): <ul><li><code>build</code>: 编译</li><li><code>analyze</code>: 分析</li><li><code>archive</code>: archive路径<ul><li>还需要配置<ul><li><code>-archivePath</code>: archive包存储路径</li><li><code>CODE_SIGN_IDENTITY</code>: 证书名称(Xcode8可以不配置,自动选择, 在钥匙串-证书中查看(类似: <code>Phone Distribution: Company name Co. Ltd (xxxxxxxx)</code>))</li><li><code>PROVISIONING_PROFILE</code>: 描述文件UUID(Xcode8可以不配置, 自动选择)</li></ul></li></ul></li><li><code>test</code>: 测试</li><li><code>installsrc</code>: </li><li><code>install</code>: 安装</li><li><code>clean</code>: 清理</li></ul></li><li>其中<code>-configuration</code>对应的值有(如果没有指定, 默认是Release): <ul><li><code>Debug</code>: 开发环境</li><li><code>Release</code>: 生产环境</li></ul></li><li>其中<code>-sdk</code>可以通过<code>xcodebuild -showsdks</code>获取</li><li>其中<code>-configuration</code>和<code>-target</code>可以通过<code>xcodebuild -list</code>获取</li></ul></li><li><p>打ipa包</p><ul><li>xcodebuild + xcrun的<code>PackageApplication</code>打包已经被废弃了, 不推荐使用</li><li><p>可以使用xcodebuild的方式</p><blockquote><p>   xcodebuild -exportArchive -archivePath xcarchivepath -exportPath destinationpath -exportOptionsPlist path</p></blockquote><ul><li><code>exportOptionsPlist</code>参数: 是一个plist文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">    &lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class="line">  &lt;dict&gt;</span><br><span class="line">    &lt;key&gt;teamID&lt;/key&gt;</span><br><span class="line">      &lt;string&gt;xxxxxxxx&lt;/string&gt; //TeamID</span><br><span class="line">    &lt;key&gt;method&lt;/key&gt;</span><br><span class="line">      &lt;string&gt;ad-hoc&lt;/string&gt; //ad-hoc打包</span><br><span class="line">    &lt;key&gt;compileBitcode&lt;/key&gt; //是否编译bitcode</span><br><span class="line">      &lt;false/&gt;</span><br><span class="line">  &lt;/dict&gt;</span><br><span class="line">&lt;/plist&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;持续集成(Continuous Integration)是一种软件开发实践，即团队开发成员经常集成他们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/iOS/gitlab-ci-iOS.jpg&quot; alt=&quot;hello&quot; style=&quot;width: 50%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;/&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="持续集成" scheme="http://yoursite.com/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="Xcode" scheme="http://yoursite.com/tags/Xcode/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="Gitlab" scheme="http://yoursite.com/tags/Gitlab/"/>
    
  </entry>
  
  <entry>
    <title>JS跨域问题</title>
    <link href="http://yoursite.com/2017/10/19/Java%20Web/JS%E8%B7%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2017/10/19/Java Web/JS跨域/</id>
    <published>2017-10-19T02:14:16.000Z</published>
    <updated>2019-04-29T08:39:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript不能再不同的主机名、端口和协议之间进行数据传输或者通讯, 此时称为JS跨域, 解决方法有很多, 这里介绍下使用Jsonp的方式.</p><span id="more"></span><h2 id="跨域解决方法"><a href="#跨域解决方法" class="headerlink" title=" 跨域解决方法 "></a><font color=orange> 跨域解决方法 </font></h2><h3 id="Jsonp"><a href="#Jsonp" class="headerlink" title=" Jsonp "></a><font color=orange> Jsonp </font></h3><p>JavaScript不能跨域访问, 但是可以引入不同域上面的js文件, Jsonp正是利用此特性来实现的.Jsonp返回的是一个JS文件, 返回的JS文件的时候会立即执行回调函数, 并且会把数据作为函数参数.</p><p>Jsonp需要前后端进行配合.</p><p>例如:<br>xxx.html中跨域请求<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#普通写法</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function hangler(jsondata) &#123;</span><br><span class="line">        //code</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;http://example.com/login/callback=handler&quot; /&gt;</span><br><span class="line"></span><br><span class="line">#JQuery其他写法, 默认参数名称callback</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url : &quot;http://example.com/login&quot;,</span><br><span class="line">    dataType : &quot;jsonp&quot;,</span><br><span class="line">    type : &quot;GET&quot;,</span><br><span class="line">    success : function(data)&#123;</span><br><span class="line">        //code</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>callback是回调的参数名, 也可以是其他的名称, handle是回调的函数名, 当请求完成时回执行该方法, 使用jQuery时<code>$.getJSON</code>方法会自动判断是否跨域，不跨域的话，就调用普通的ajax方法；跨域的话，则会以异步加载js文件的形式来调用jsonp的回调函数。</p><p>后台:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//指定请求路径、方法以及返回值类型</span><br><span class="line">@RequestMapping(value = &quot;/token/&#123;token&#125;&quot;, method = RequestMethod.GET,produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line">//返回JSON</span><br><span class="line">@ResponseBody</span><br><span class="line">//@PathVariable从请求地址中绑定数据</span><br><span class="line">//callback为Jsonp请求时的函数名</span><br><span class="line">public String getUserByToken(@PathVariable String token, String callback) &#123;</span><br><span class="line">    Result result = userService.getUserByToken(token);</span><br><span class="line">    //Jsonp请求返回js文件</span><br><span class="line">    if (StringUtils.isNoneBlank(callback)) &#123;</span><br><span class="line">        return callback + &quot;(&quot; + JsonUtils.objectToJson(result) + &quot;)&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return JsonUtils.objectToJson(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Spring4.1版本以后还可以:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/token/&#123;token&#125;&quot;, method = RequestMethod.GET)</span><br><span class="line">@ResponseBody</span><br><span class="line">public Object getUserByToken(@PathVariable String token, String callback) &#123;</span><br><span class="line">    Result result = userService.getUserByToken(token);</span><br><span class="line">    if (StringUtils.isNoneBlank(callback)) &#123;</span><br><span class="line">        MappingJacksonValue value = new MappingJacksonValue(result);</span><br><span class="line">        //设置回调方法</span><br><span class="line">        value.setJsonpFunction(callback);</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript不能再不同的主机名、端口和协议之间进行数据传输或者通讯, 此时称为JS跨域, 解决方法有很多, 这里介绍下使用Jsonp的方式.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="JavaScript跨域" scheme="http://yoursite.com/tags/JavaScript%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="Jsonp" scheme="http://yoursite.com/tags/Jsonp/"/>
    
  </entry>
  
  <entry>
    <title>Shell脚本学习</title>
    <link href="http://yoursite.com/2017/09/15/Shell%E5%AD%A6%E4%B9%A0/Shell%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/09/15/Shell学习/Shell学习/</id>
    <published>2017-09-15T06:37:55.000Z</published>
    <updated>2023-06-25T07:54:34.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><font color=orange>前言</font></h2><p>最近希望可以一键自动打包iOS App Store上传的ipa包, 所有来学习一下Shell脚本.</p><p><img src="/assets/images/others/shell_top.jpg" alt="hello" style="width: 50%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"/></p><span id="more"></span><h2 id="Shell"><a href="#Shell" class="headerlink" title=" Shell "></a><font color=orange> Shell </font></h2><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。<br>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。<br>Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。</p><h3 id="Shell-脚本"><a href="#Shell-脚本" class="headerlink" title=" Shell 脚本"></a><font color=orange> Shell 脚本</font></h3><p>Shell 脚本（shell script），是一种为 shell 编写的脚本程序。<br>业界所说的 shell 通常都是指 <code>shell 脚本</code>，但是要知道，shell 和 shell script 是两个不同的概念。<font color=red>本文出现的 “shell编程” 都是指 shell 脚本编程，不是指开发 shell 自身。</font>. 它有点像Windows系统下面的<code>.bat</code>批处理文件.</p><h3 id="Shell-环境"><a href="#Shell-环境" class="headerlink" title=" Shell 环境"></a><font color=orange> Shell 环境</font></h3><p>Shell 编程跟 java、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。</p><ul><li>Linux 的 Shell 种类众多，常见的有:<ul><li>Bourne Shell（/usr/bin/sh或/bin/sh）</li><li>Bourne Again Shell（/bin/bash）</li><li>C Shell（/usr/bin/csh）</li><li>K Shell（/usr/bin/ksh）</li><li>Shell for Root（/sbin/sh）</li></ul></li></ul><p>由于Bourne Again Shell的易用性和免费，Bash 在日常工作中被广泛使用。同时，Bash 也是大多数Linux 系统默认的 Shell。<br>在一般情况下，人们并不区分 Bourne Shell 和 Bourne Again Shell，所以，像 <code>#!/bin/sh</code>，它同样也可以改为 <code>#!/bin/bash</code>。</p><h3 id="第一个-Shell-脚本"><a href="#第一个-Shell-脚本" class="headerlink" title="第一个 Shell 脚本"></a><font color=orange>第一个 Shell 脚本</font></h3><p>打开文本编辑器(可以使用 vi/vim 命令来创建文件)，新建一个文件 test.sh，扩展名为 sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;Hello World!&quot;</span><br></pre></td></tr></table></figure><ul><li><code>#!</code>: 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序。</li><li><code>echo</code>: 命令用于向窗口输出文本。</li></ul><h4 id="运行-Shell-脚本有两种方法："><a href="#运行-Shell-脚本有两种方法：" class="headerlink" title="运行 Shell 脚本有两种方法："></a><font color=green>运行 Shell 脚本有两种方法：</font></h4><ul><li>作为可执行程序<br>进入test.sh所在的目录, 运行下面的代码</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./test.sh  #使脚本具有执行权限</span><br><span class="line">./test.sh  #执行脚本</span><br></pre></td></tr></table></figure><ul><li>作为解释器参数<br>这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。如: </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh test.sh</span><br></pre></td></tr></table></figure><h3 id="Shell-变量"><a href="#Shell-变量" class="headerlink" title=" Shell 变量"></a><font color=orange> Shell 变量</font></h3><h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a><font color=green>定义变量</font></h4><ul><li><p>定义变量时，变量名不加美元符号（$，PHP语言中变量需要），如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">homepage=&quot;coppco.github.io&quot;</span><br></pre></td></tr></table></figure><ul><li><font color=red>注意事项</font><ul><li>变量名和等号之间不能有空格</li><li>首个字符必须为字母（a-z，A-Z）。</li><li>中间不能有空格，可以使用下划线_。</li><li>不能使用标点符号。</li><li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li></ul></li></ul></li><li><p>除了显式地直接赋值，还可以用语句给变量赋值，如：</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for skill in Ada Coffe Action Java; do</span><br><span class="line">echo &quot;I am good at $&#123;skill&#125;Script&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a><font color=green>使用变量</font></h4><p>使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo $homepage</span><br><span class="line">echo $&#123;skill&#125;</span><br></pre></td></tr></table></figure><ul><li><font color=red>注意事项</font><ul><li>单独使用时可以不添加花括号</li><li>在上例中, 必须带花括号用来识别变量的边界, 如<code>echo &quot;I am good at $&#123;skill&#125;Script&quot;</code>, 如果不加花括号<code>echo &quot;I am good at $skillScript&quot;</code>, 那么会把$skillScript当做变量来处理.</li><li>已经定义的变量, 可以被重新定义</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">homepage=&quot;coppco.github.io&quot;</span><br><span class="line">echo homepage</span><br><span class="line">homepage=&quot;https://coppco.github.io&quot;</span><br><span class="line">echo homepage</span><br></pre></td></tr></table></figure><h4 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a><font color=green>只读变量</font></h4><p>使用 <code>readonly</code> 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">readonly homepage=&quot;coppco.github.io&quot;</span><br><span class="line"></span><br><span class="line">version=&quot;1.0.0&quot;</span><br><span class="line">readonly version</span><br><span class="line">version=&quot;1.0.1&quot;</span><br></pre></td></tr></table></figure><p>再次修改命令行会提示: <font color=red><code>version: readonly variable</code></font></p><h4 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a><font color=green>删除变量</font></h4><p>使用 unset 命令可以删除变量。语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset 变量名</span><br></pre></td></tr></table></figure><ul><li><font color=red>注意事项</font><ul><li>变量被删除后不能再次使用</li><li>unset 命令不能删除只读变量。</li></ul></li></ul><h4 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a><font color=green>变量类型</font></h4><ol><li>局部变量: 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</li><li>环境变量: 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</li><li>shell变量: shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</li></ol><h3 id="Shell-字符串"><a href="#Shell-字符串" class="headerlink" title="Shell 字符串"></a><font color=orange>Shell 字符串</font></h3><h4 id="字符串定义"><a href="#字符串定义" class="headerlink" title="字符串定义"></a><font color=green>字符串定义</font></h4><p>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。</p><ul><li><font color=red>注意事项</font><ul><li>单引号字符串的限制：<ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li><li>单引号字串中不能出现单引号（对单引号使用转义符后也不行）。</li></ul></li><li>单双引号的优点：<ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul></li><li>反引号``<ul><li>反引号是命令替换, Shell可以先执行``中的命令, 将结果保存起来, 在适当的地方输出.</li></ul></li></ul></li></ul><h4 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a><font color=green>拼接字符串</font></h4><p>可以在双引号字符串中使用变量, 变量也可以使用双引号括起来:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">https_prefix=&quot;https://&quot;</span><br><span class="line">http_prefix=&quot;http://&quot;</span><br><span class="line">url=&quot;coppco.github.io&quot;</span><br><span class="line">baidu_http=&quot;$http_prefix&quot;$url&quot;&quot;</span><br><span class="line">baidu_https=&quot;$https_prefix$&#123;url&#125;&quot;</span><br><span class="line"></span><br><span class="line">echo $baidu_http</span><br><span class="line">echo $baidu_https</span><br><span class="line">echo &quot;$http_prefix$url&quot;</span><br><span class="line">echo &quot;$http_prefix&quot;$&#123;url&#125;&quot;&quot;</span><br></pre></td></tr></table></figure><h4 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a><font color=green>获取字符串长度</font></h4><ul><li>格式: <code>$&#123; #变量名 &#125;</code>, <font color=red>这里有一个bug, 如果#和{或者}连在会出错.</font></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=&quot;abcd&quot;</span><br><span class="line">echo $&#123;#string&#125; #输出 4</span><br></pre></td></tr></table></figure><h4 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a><font color=green>提取子字符串</font></h4><ul><li><p><code># 号截取</code>: 删除左边字符，保留右边字符。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;var#*子字符串&#125;</span><br></pre></td></tr></table></figure><p>说明: 其中 var 是变量名，# 号是运算符，<code>*子字符串</code> 表示从左边开始删除第一个 <code>子字符串</code> 及左边的所有字符</p></li><li><p><code>## 号截取</code>: 删除左边字符，保留右边字符。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;var##*子字符串&#125;</span><br></pre></td></tr></table></figure><p>说明: 表示从左边开始删除最后（最右边）一个 <code>子字符串</code> 号及左边的所有字符</p></li><li><p><code>%号截取</code>: 删除右边字符，保留左边字符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;var%子字符串*&#125;</span><br></pre></td></tr></table></figure><p>说明: 表示从右边开始，删除第一个 <code>子字符串</code> 号及右边的字符</p></li><li><code>%% 号截取</code>: 删除右边字符，保留左边字符<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;var%%子字符串*&#125;</span><br></pre></td></tr></table></figure>说明: 表示从右边开始，删除最后（最左边）一个 <code>子字符串</code> 号及右边的字符</li><li>从左边第几个字符开始，及字符的个数 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;var:0:5&#125;</span><br></pre></td></tr></table></figure>说明: 其中的 0 表示左边第一个字符开始，5 表示字符的总个数。</li><li>从左边第几个字符开始，一直到结束。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;var:7&#125;</span><br></pre></td></tr></table></figure>说明: 其中的 7 表示左边第8个字符开始，一直到结束。</li><li>从右边第几个字符开始，及字符的个数<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;var:0-7:3&#125;</span><br></pre></td></tr></table></figure>说明: 其中的 0-7 表示右边算起第七个字符开始，3 表示字符的个数。</li><li>从右边第几个字符开始，一直到结束。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;var:0-7&#125;</span><br></pre></td></tr></table></figure>说明: 表示从右边第七个字符开始，一直到结束。</li></ul><h4 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串"></a><font color=green>查找子字符串</font></h4><p>下面脚本中 “`” 是反引号，而不是单引号 “‘“，不要看错了哦。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=&quot;runoob is a great company&quot;</span><br><span class="line">echo `expr index &quot;$string&quot; is`  # 输出 8</span><br></pre></td></tr></table></figure><h3 id="Shell-数组"><a href="#Shell-数组" class="headerlink" title="Shell 数组"></a><font color=orange>Shell 数组</font></h3><p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。数组元素的下标由0开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于0。</p><h4 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a><font color=green>定义数组</font></h4><p>在Shell中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名=(值1 值2 ... 值n)</span><br></pre></td></tr></table></figure><p>还可以单独定义数组的各个分量:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array[0]=0</span><br><span class="line">array[1]=1</span><br><span class="line">array[2]=2</span><br></pre></td></tr></table></figure></p><h4 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a><font color=green>读取数组</font></h4><p>读取数组中一个元素值的一般格式是：<code>$&#123;数组名[下标]&#125;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;array[0]&#125;</span><br></pre></td></tr></table></figure><p>使用@符号可以获取数组中的所有元素: <code>$&#123;数组名[@]&#125;</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;array[@]&#125;</span><br></pre></td></tr></table></figure></p><h4 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a><font color=green>获取数组的长度</font></h4><ul><li>获取数组的长度<br>格式: <code>$&#123; #数组名[@] &#125;</code>或者<code>$&#123; #数组名[*] &#125;</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123; #arrays[@] &#125;</span><br></pre></td></tr></table></figure><ul><li>获取单个元素的长度<br>格式: <code>$&#123; #数组名[下标] &#125;</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123; #arrays[0] &#125;</span><br></pre></td></tr></table></figure><h3 id="Shell-注释"><a href="#Shell-注释" class="headerlink" title="Shell 注释"></a><font color=orange>Shell 注释</font></h3><p>以”#”开头的行就是注释，会被解释器忽略。sh中没有多行注释, 需要每行都添加#才可以。每一行加个#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。</p><h3 id="Shell-传递参数"><a href="#Shell-传递参数" class="headerlink" title="Shell 传递参数"></a><font color=orange>Shell 传递参数</font></h3><p>我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">echo &quot;Shell 传递参数实例！&quot;;</span><br><span class="line">echo &quot;执行的文件名：$0&quot;;</span><br><span class="line">echo &quot;第一个参数为：$1&quot;;</span><br><span class="line">echo &quot;第二个参数为：$2&quot;;</span><br><span class="line">echo &quot;第三个参数为：$3&quot;;</span><br></pre></td></tr></table></figure><p>执行该sh文件传递三个参数:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x test.sh </span><br><span class="line">$ ./test.sh 1 2 3</span><br><span class="line">Shell 传递参数实例！</span><br><span class="line">执行的文件名：./test.sh</span><br><span class="line">第一个参数为：1</span><br><span class="line">第二个参数为：2</span><br><span class="line">第三个参数为：3</span><br></pre></td></tr></table></figure></p><table><thead><tr><th style="text-align:center">参数处理</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">$n</td><td style="text-align:center">n表示数字, 从1开始表示第一个参数</td></tr><tr><td style="text-align:center">$#</td><td style="text-align:center">传递到脚本的参数个数</td></tr><tr><td style="text-align:center">$*</td><td style="text-align:center">以一个单字符串显示所有向脚本传递的参数。如”$*”用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td></tr><tr><td style="text-align:center">$$</td><td style="text-align:center">脚本运行的当前进程ID号</td></tr><tr><td style="text-align:center">$!</td><td style="text-align:center">后台运行的最后一个进程的ID号</td></tr><tr><td style="text-align:center">$@</td><td style="text-align:center">与$*相同，但是使用时加引号，并在引号中返回每个参数。如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。</td></tr><tr><td style="text-align:center">$-</td><td style="text-align:center">显示Shell使用的当前选项，与set命令功能相同。</td></tr><tr><td style="text-align:center">$?</td><td style="text-align:center">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><h3 id="Shell-基本运算符"><a href="#Shell-基本运算符" class="headerlink" title="Shell 基本运算符"></a><font color=orange>Shell 基本运算符</font></h3><p>Shell 和其他编程语言一样，支持多种运算符，包括：</p><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a><font color=green>算术运算符</font></h4><ul><li>注意事项<ul><li>条件表达式要放在方括号之间，并且要有空格，例如: [$a==$b] 是错误的，必须写成 [ $a == $b ]。</li><li>乘号(<code>*</code>)前边必须加反斜杠(<code>\</code>)才能实现乘法运算；</li><li>在 MAC 中 shell 的 expr 语法是：$((表达式))，此处表达式中的 “*“ 不需要转义符号 “\” , Mac中如 <code>$(( $a != $b ))</code>、<code>$(($a*$b))</code><br>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</li></ul></li></ul><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">说明</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加法</td><td style="text-align:center">`expr $a + $b` 结果为 30。</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减法</td><td style="text-align:center">`expr $a - $b` 结果为 -10。</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘法</td><td style="text-align:center">`expr $a \* $b` 结果为  200。</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除法</td><td style="text-align:center">`expr $b / $a` 结果为 2。</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">取余</td><td style="text-align:center">`expr $b % $a` 结果为 0。</td></tr><tr><td style="text-align:center">=</td><td style="text-align:center">赋值</td><td style="text-align:center">a=$b 将把变量 b 的值赋给 a。</td></tr><tr><td style="text-align:center">==</td><td style="text-align:center">相等。用于比较两个数字，相同则返回 true。</td><td style="text-align:center">[ $a == $b ] 返回 false。</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">不相等。用于比较两个数字，不相同则返回 true。</td><td style="text-align:center">[ $a != $b ] 返回 true。</td></tr></tbody></table><p>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 <code>awk</code> 和 <code>expr</code>，expr 最常用。expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p><p>例如，两个数相加(注意使用的是反引号 ` 而不是单引号 ‘)：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">val=`expr 2 + 2`</span><br><span class="line">echo &quot;两数之和为 : $val&quot;</span><br></pre></td></tr></table></figure></p><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a><font color=green>关系运算符</font></h4><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。<br>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">说明</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">-eq</td><td style="text-align:center">检测两个数是否相等，相等返回 true。</td><td style="text-align:center">[ $a -eq $b ] 返回 false。</td></tr><tr><td style="text-align:center">-ne</td><td style="text-align:center">检测两个数是否相等，不相等返回 true。</td><td style="text-align:center">[ $a -ne $b ] 返回 true。</td></tr><tr><td style="text-align:center">-gt</td><td style="text-align:center">检测左边的数是否大于右边的，如果是，则返回 true。</td><td style="text-align:center">[ $a -gt $b ] 返回 false。</td></tr><tr><td style="text-align:center">-lt</td><td style="text-align:center">检测左边的数是否小于右边的，如果是，则返回 true。</td><td style="text-align:center">[ $a -lt $b ] 返回 true。</td></tr><tr><td style="text-align:center">-ge</td><td style="text-align:center">检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td style="text-align:center">[ $a -ge $b ] 返回 false。</td></tr><tr><td style="text-align:center">-le</td><td style="text-align:center">检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td style="text-align:center">[ $a -le $b ] 返回 true。</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=100</span><br><span class="line">b=200</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">对于数字下面两个都可以</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="keyword">if</span> [ <span class="variable">$a</span> -eq <span class="variable">$b</span> ]</span></span><br><span class="line">if [ $a == $b ]</span><br><span class="line">then</span><br><span class="line">echo &quot;$a -eq $b : a 等于 b&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;$a -eq $b: a 不等于 b&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a><font color=green>布尔运算符</font></h4><p>下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">说明</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">!</td><td style="text-align:center">非运算，表达式为 true 则返回 false，否则返回 true。</td><td style="text-align:center">[ ! false ] 返回 true。</td></tr><tr><td style="text-align:center">-o</td><td style="text-align:center">或运算，有一个表达式为 true 则返回 true。</td><td style="text-align:center">[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td></tr><tr><td style="text-align:center">-a</td><td style="text-align:center">与运算，两个表达式都为 true 才返回 true。</td><td style="text-align:center">[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td></tr></tbody></table><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a><font color=green>逻辑运算符</font></h4><p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:<br>(ll在表格中显示有问题, 实际上是<code>enter</code>上面的符号). <font color=red>它和布尔运算符有区别,  它需要外面有两个[]括住.</font></p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">说明</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">逻辑的 AND</td><td style="text-align:center">[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td></tr><tr><td style="text-align:center">ll</td><td style="text-align:center">逻辑的 OR</td><td style="text-align:center">[[ $a -lt 100 ll $b -gt 100 ]] 返回 true</td></tr></tbody></table><h4 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a><font color=green>字符串运算符</font></h4><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">说明</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">检测两个字符串是否相等，相等返回 true。</td><td style="text-align:center">[ $a = $b ] 返回 false。</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">检测两个字符串是否相等，不相等返回 true。</td><td style="text-align:center">[ $a != $b ] 返回 true。</td></tr><tr><td style="text-align:center">-z</td><td style="text-align:center">检测字符串长度是否为0，为0返回 true。</td><td style="text-align:center">[ -z $a ] 返回 false。</td></tr><tr><td style="text-align:center">-n</td><td style="text-align:center">检测字符串长度是否为0，不为0返回 true。</td><td style="text-align:center">[ -n $a ] 返回 true。</td></tr><tr><td style="text-align:center">$字符串</td><td style="text-align:center">检测字符串是否为空，不为空返回 true。</td><td style="text-align:center">[ $a ] 返回 true。</td></tr></tbody></table><h4 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a><font color=green>文件测试运算符</font></h4><p>文件测试运算符用于检测 Unix 文件的各种属性。</p><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">说明</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">-b file</td><td style="text-align:center">检测文件是否是块设备文件，如果是，则返回 true。</td><td style="text-align:center">[ -b $file ] 返回 false。</td></tr><tr><td style="text-align:center">-c file</td><td style="text-align:center">检测文件是否是字符设备文件，如果是，则返回 true。</td><td style="text-align:center">[ -c $file ] 返回 false。</td></tr><tr><td style="text-align:center">-d file</td><td style="text-align:center">检测文件是否是目录，如果是，则返回 true。</td><td style="text-align:center">[ -d $file ] 返回 false。</td></tr><tr><td style="text-align:center">-f file</td><td style="text-align:center">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td style="text-align:center">[ -f $file ] 返回 true。</td></tr><tr><td style="text-align:center">-g file</td><td style="text-align:center">检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td style="text-align:center">[ -g $file ] 返回 false。</td></tr><tr><td style="text-align:center">-k file</td><td style="text-align:center">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。    [ -k $file ] 返回 false。</td></tr><tr><td style="text-align:center">-p file</td><td style="text-align:center">检测文件是否是有名管道，如果是，则返回 true。</td><td style="text-align:center">[ -p $file ] 返回 false。</td></tr><tr><td style="text-align:center">-u file</td><td style="text-align:center">检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td style="text-align:center">[ -u $file ] 返回 false。</td></tr><tr><td style="text-align:center">-r file</td><td style="text-align:center">检测文件是否可读，如果是，则返回 true。</td><td style="text-align:center">[ -r $file ] 返回 true。</td></tr><tr><td style="text-align:center">-w file</td><td style="text-align:center">检测文件是否可写，如果是，则返回 true。</td><td style="text-align:center">[ -w $file ] 返回 true。</td></tr><tr><td style="text-align:center">-x file</td><td style="text-align:center">检测文件是否可执行，如果是，则返回 true。</td><td style="text-align:center">[ -x $file ] 返回 true。</td></tr><tr><td style="text-align:center">-s file</td><td style="text-align:center">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td><td style="text-align:center">[ -s $file ] 返回 true。</td></tr><tr><td style="text-align:center">-e file</td><td style="text-align:center">检测文件（包括目录）是否存在，如果是，则返回 true。</td><td style="text-align:center">[ -e $file ] 返回 true。</td></tr></tbody></table><h3 id="Shell-echo命令"><a href="#Shell-echo命令" class="headerlink" title="Shell echo命令"></a><font color=orange>Shell echo命令</font></h3><p>用于字符串的输出。命令格式：<code>echo string</code>, 支持字符串常量、变量、转义字符串等输出.</p><h4 id="显示普通字符串"><a href="#显示普通字符串" class="headerlink" title="显示普通字符串"></a><font color=green>显示普通字符串</font></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;It is a test&quot;</span><br></pre></td></tr></table></figure><p>说明: 这里的双引号完全可以省略，以下命令与上面实例效果一致</p><h4 id="显示转义字符"><a href="#显示转义字符" class="headerlink" title="显示转义字符"></a><font color=green>显示转义字符</font></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;\&quot;It is a test\&quot;&quot;</span><br></pre></td></tr></table></figure><p>说明: 这里的双引号也可以省略</p><h4 id="显示变量"><a href="#显示变量" class="headerlink" title="显示变量"></a><font color=green>显示变量</font></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name &quot;Are you OK ?&quot; </span><br><span class="line">echo $name</span><br></pre></td></tr></table></figure><h4 id="显示换行"><a href="#显示换行" class="headerlink" title="显示换行"></a><font color=green>显示换行</font></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;OK! \n&quot; # -e 开启转义</span><br><span class="line">echo &quot;It it a test&quot;</span><br></pre></td></tr></table></figure><h4 id="显示不换行"><a href="#显示不换行" class="headerlink" title="显示不换行"></a><font color=green>显示不换行</font></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;OK! \c&quot; # -e 开启转义 \c 不换行</span><br><span class="line">echo &quot;It is a test&quot;</span><br></pre></td></tr></table></figure><h4 id="显示结果定向至文件"><a href="#显示结果定向至文件" class="headerlink" title="显示结果定向至文件"></a><font color=green>显示结果定向至文件</font></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;It is a test&quot; &gt; myfile</span><br></pre></td></tr></table></figure><h4 id="原样输出字符串，不进行转义或取变量-用单引号"><a href="#原样输出字符串，不进行转义或取变量-用单引号" class="headerlink" title="原样输出字符串，不进行转义或取变量(用单引号)"></a><font color=green>原样输出字符串，不进行转义或取变量(用单引号)</font></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;$name\&quot;&#x27;</span><br></pre></td></tr></table></figure><h4 id="显示命令执行结果"><a href="#显示命令执行结果" class="headerlink" title="显示命令执行结果"></a><font color=green>显示命令执行结果</font></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo `date`</span><br></pre></td></tr></table></figure><h3 id="Shell-printf-命令"><a href="#Shell-printf-命令" class="headerlink" title="Shell printf 命令"></a><font color=orange>Shell printf 命令</font></h3><p>printf 命令模仿 C 程序库（library）里的 printf() 程序。<br>标准所定义，因此使用printf的脚本比使用echo移植性好。<br>printf 使用引用文本或空格分隔的参数，外面可以在printf中使用格式化字符串，还可以制定字符串的宽度、左右对齐方式等。默认printf不会像 echo 自动添加换行符，我们可以手动添加 \n。<br>它的格式: <code>printf  format-string  [arguments...]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf &quot;%-10s %-8s %-4.2f\n&quot; 郭靖 男 66.1234 </span><br></pre></td></tr></table></figure><p>%d: Decimal 十进制整数 – 对应位置参数必须是十进制整数<br>%s: String 字符串 – 对应位置参数必须是字符串或者字符型<br>%c: Char 字符 – 对应位置参数必须是字符串或者字符型<br>%f: Float 浮点 – 对应位置参数必须是数字型<br>%-10s 指一个宽度为10个字符（-表示左对齐，没有则表示右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。<br>%-4.2f 指格式化为小数，其中.2指保留2位小数</p><h4 id="printf的转义序列"><a href="#printf的转义序列" class="headerlink" title="printf的转义序列"></a><font color=green>printf的转义序列</font></h4><table><thead><tr><th style="text-align:center">序列</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">\a</td><td style="text-align:center">警告字符，通常为ASCII的BEL字符</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">后退</td></tr><tr><td style="text-align:center">\c</td><td style="text-align:center">抑制（不显示）输出结果中任何结尾的换行字符（只在%b格式指示符控制下的参数字符串中有效），而且，任何留在参数里的字符、任何接下来的参数以及任何留在格式字符串中的字符，都被忽略</td></tr><tr><td style="text-align:center">\f</td><td style="text-align:center">换页（formfeed）</td></tr><tr><td style="text-align:center">\n</td><td style="text-align:center">换行</td></tr><tr><td style="text-align:center">\r</td><td style="text-align:center">回车（Carriage return）</td></tr><tr><td style="text-align:center">\t</td><td style="text-align:center">水平制表符</td></tr><tr><td style="text-align:center">\v</td><td style="text-align:center">垂直制表符</td></tr><tr><td style="text-align:center">\</td><td style="text-align:center">一个字面上的反斜杠字符</td></tr><tr><td style="text-align:center">\ddd</td><td style="text-align:center">表示1到3位数八进制值的字符。仅在格式字符串中有效</td></tr><tr><td style="text-align:center">\0ddd</td><td style="text-align:center">表示1到3位的八进制值字符</td></tr></tbody></table><h3 id="Shell-test-命令"><a href="#Shell-test-命令" class="headerlink" title="Shell test 命令"></a><font color=orange>Shell test 命令</font></h3><p>Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</p><h4 id="数值测试"><a href="#数值测试" class="headerlink" title="数值测试"></a><font color=green>数值测试</font></h4><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">-eq</td><td style="text-align:center">等于则为真</td></tr><tr><td style="text-align:center">-ne</td><td style="text-align:center">不等于则为真</td></tr><tr><td style="text-align:center">-gt</td><td style="text-align:center">大于则为真</td></tr><tr><td style="text-align:center">-ge</td><td style="text-align:center">大于等于则为真</td></tr><tr><td style="text-align:center">-lt</td><td style="text-align:center">小于则为真</td></tr><tr><td style="text-align:center">-le</td><td style="text-align:center">小于等于则为真</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num1=100</span><br><span class="line">num2=100</span><br><span class="line">if test $[num1] -eq $[num2]</span><br><span class="line">then</span><br><span class="line">    echo &#x27;两个数相等！&#x27;</span><br><span class="line">else</span><br><span class="line">    echo &#x27;两个数不相等！&#x27;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">结果为: 两个数不相等!</span></span><br></pre></td></tr></table></figure><p>代码中的 [] 执行基本的算数运算，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">a=5</span><br><span class="line">b=6</span><br><span class="line">result=$[a+b] # 注意等号两边不能有空格</span><br><span class="line">echo &quot;result 为： $result&quot;</span><br></pre></td></tr></table></figure><h4 id="字符串测试"><a href="#字符串测试" class="headerlink" title="字符串测试"></a><font color=green>字符串测试</font></h4><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">等于则为真</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">不相等则为真</td></tr><tr><td style="text-align:center">-z 字符串</td><td style="text-align:center">字符串的长度为零则为真</td></tr><tr><td style="text-align:center">-n 字符串</td><td style="text-align:center">字符串的长度不为零则为真</td></tr></tbody></table><h4 id="文件测试"><a href="#文件测试" class="headerlink" title="文件测试"></a><font color=green>文件测试</font></h4><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">-e 文件名</td><td style="text-align:center">如果文件存在则为真</td></tr><tr><td style="text-align:center">-r 文件名</td><td style="text-align:center">如果文件存在且可读则为真</td></tr><tr><td style="text-align:center">-w 文件名</td><td style="text-align:center">如果文件存在且可写则为真</td></tr><tr><td style="text-align:center">-x 文件名</td><td style="text-align:center">如果文件存在且可执行则为真</td></tr><tr><td style="text-align:center">-s 文件名</td><td style="text-align:center">如果文件存在且至少有一个字符则为真</td></tr><tr><td style="text-align:center">-d 文件名</td><td style="text-align:center">如果文件存在且为目录则为真</td></tr><tr><td style="text-align:center">-f 文件名</td><td style="text-align:center">如果文件存在且为普通文件则为真</td></tr><tr><td style="text-align:center">-c 文件名</td><td style="text-align:center">如果文件存在且为字符型特殊文件则为真</td></tr><tr><td style="text-align:center">-b 文件名</td><td style="text-align:center">如果文件存在且为块特殊文件则为真</td></tr></tbody></table><h3 id="Shell-流程控制"><a href="#Shell-流程控制" class="headerlink" title="Shell 流程控制"></a><font color=orange>Shell 流程控制</font></h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a><font color=green>if</font></h4><p>在sh/bash里可不能这么写，如果else分支没有语句执行，就不要写这个else。</p><p>if 语句语法格式：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN </span><br><span class="line">fi</span><br></pre></td></tr></table></figure><br>写成一行（适用于终端命令提示符）：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if [ $(ps -ef | grep -c &quot;ssh&quot;) -gt 1 ]; then echo &quot;true&quot;; fi</span><br></pre></td></tr></table></figure></p><h4 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a><font color=green>if-else</font></h4><p>if-else 语句语法格式：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    command1 </span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">else</span><br><span class="line">    command</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><h4 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if else-if else"></a><font color=green>if else-if else</font></h4><p>if else-if else 语法格式：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if condition1</span><br><span class="line">then</span><br><span class="line">    command1</span><br><span class="line">elif condition2 </span><br><span class="line">then </span><br><span class="line">    command2</span><br><span class="line">else</span><br><span class="line">    commandN</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a><font color=green>for 循环</font></h4><p>for循环一般格式为：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for var in item1 item2 ... itemN</span><br><span class="line">do</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">done</span><br></pre></td></tr></table></figure><br>写成一行：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for var in item1 item2 ... itemN; do command1; command2… done;</span><br></pre></td></tr></table></figure></p><h4 id="while-循环"><a href="#while-循环" class="headerlink" title=" while 循环"></a><font color=green> while 循环</font></h4><p>while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。其格式为：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><br>当条件是true或者<code>:</code>时, 是无限循环</p><h4 id="until-循环"><a href="#until-循环" class="headerlink" title="until 循环"></a><font color=green>until 循环</font></h4><p>until循环执行一系列命令直至条件为真时停止。<br>until循环与while循环在处理方式上刚好相反。<br>一般while循环优于until循环，但在某些时候—也只是极少数情况下，until循环更加有用。<br>until 语法格式:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line">do</span><br><span class="line">    command</span><br><span class="line">done</span><br></pre></td></tr></table></figure><br>条件可为任意测试条件，测试发生在循环末尾，因此循环至少执行一次—请注意这一点。</p><h4 id="case"><a href="#case" class="headerlink" title="case"></a><font color=green>case</font></h4><p>Shell case语句为多选择语句。可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。case语句格式如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">case 值 in</span><br><span class="line">模式1)</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line">模式2）</span><br><span class="line">    command1</span><br><span class="line">    command2</span><br><span class="line">    ...</span><br><span class="line">    commandN</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></p><p>case工作方式如上所示。取值后面必须为单词in，每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。<br>取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。</p><h3 id="跳出循环"><a href="#跳出循环" class="headerlink" title="跳出循环"></a><font color=orange>跳出循环</font></h3><p>在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell使用两个命令来实现该功能：break和continue。</p><h4 id="break命令"><a href="#break命令" class="headerlink" title="break命令"></a><font color=green>break命令</font></h4><p>break命令允许跳出所有循环（终止执行后面的所有循环）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">while :</span><br><span class="line">do</span><br><span class="line">    echo -n &quot;输入 1 到 5 之间的数字:&quot;</span><br><span class="line">    read aNum</span><br><span class="line">    case $aNum in</span><br><span class="line">        1|2|3|4|5) echo &quot;你输入的数字为 $aNum!&quot;</span><br><span class="line">        ;;</span><br><span class="line">        *) echo &quot;你输入的数字不是 1 到 5 之间的! 游戏结束&quot;</span><br><span class="line">            break</span><br><span class="line">        ;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="continue命令"><a href="#continue命令" class="headerlink" title=" continue命令"></a><font color=green> continue命令</font></h4><p>continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">while :</span><br><span class="line">do</span><br><span class="line">    echo -n &quot;输入 1 到 5 之间的数字: &quot;</span><br><span class="line">    read aNum</span><br><span class="line">    case $aNum in</span><br><span class="line">        1|2|3|4|5) echo &quot;你输入的数字为 $aNum!&quot;</span><br><span class="line">        ;;</span><br><span class="line">        *) echo &quot;你输入的数字不是 1 到 5 之间的!&quot;</span><br><span class="line">            continue</span><br><span class="line">            echo &quot;游戏结束&quot;</span><br><span class="line">        ;;</span><br><span class="line">    esac</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><h4 id="esac命令"><a href="#esac命令" class="headerlink" title=" esac命令"></a><font color=green> esac命令</font></h4><p>case的语法和C family语言差别很大，它需要一个esac（就是case反过来）作为结束标记，每个case分支用右圆括号，用两个分号表示break。</p><h3 id="Shell-函数"><a href="#Shell-函数" class="headerlink" title="Shell 函数"></a><font color=orange>Shell 函数</font></h3><h4 id="函数定义"><a href="#函数定义" class="headerlink" title=" 函数定义"></a><font color=green> 函数定义</font></h4><p>linux shell 可以用户定义函数，然后在shell脚本中可以随便调用。<br>shell中函数的定义格式如下：[]中内容可以省略<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ function ] funname [()]</span><br><span class="line">&#123;</span><br><span class="line">    action;</span><br><span class="line">    [return int;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><font color=red>注意事项</font><ul><li>函数返回值在调用该函数后通过 $? 来获得。</li><li>所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</li><li>可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。</li><li>参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255)</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">funWithReturn()&#123;</span><br><span class="line">    echo &quot;这个函数会对输入的两个数字进行相加运算...&quot;</span><br><span class="line">    echo &quot;输入第一个数字: &quot;</span><br><span class="line">    read aNum</span><br><span class="line">    echo &quot;输入第二个数字: &quot;</span><br><span class="line">    read anotherNum</span><br><span class="line">    echo &quot;两个数字分别为 $aNum 和 $anotherNum !&quot;</span><br><span class="line">    return $(($aNum+$anotherNum))</span><br><span class="line">&#125;</span><br><span class="line">funWithReturn</span><br><span class="line">echo &quot;输入的两个数字之和为 $? !&quot;</span><br></pre></td></tr></table></figure><h4 id="函数参数"><a href="#函数参数" class="headerlink" title=" 函数参数"></a><font color=green> 函数参数</font></h4><p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…<br>基本和<code>Shell 传递参数</code>中一样.</p><h3 id="Shell-输入-输出重定向"><a href="#Shell-输入-输出重定向" class="headerlink" title="Shell 输入/输出重定向"></a><font color=orange>Shell 输入/输出重定向</font></h3><p>大多数 UNIX 系统命令从你的终端接受输入并将所产生的输出发送回​​到您的终端。一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。<br>重定向命令列表如下：</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">command &gt; file</td><td style="text-align:center">将输出重定向到 file。</td></tr><tr><td style="text-align:center">command &lt; file</td><td style="text-align:center">将输入重定向到 file。</td></tr><tr><td style="text-align:center">command &gt;&gt; file</td><td style="text-align:center">将输出以追加的方式重定向到 file。</td></tr><tr><td style="text-align:center">n &gt; file</td><td style="text-align:center">将文件描述符为 n 的文件重定向到 file。</td></tr><tr><td style="text-align:center">n &gt;&gt; file</td><td style="text-align:center">将文件描述符为 n 的文件以追加的方式重定向到 file。</td></tr><tr><td style="text-align:center">n &gt;&amp; m</td><td style="text-align:center">将输出文件 m 和 n 合并。</td></tr><tr><td style="text-align:center">n &lt;&amp; m</td><td style="text-align:center">将输入文件 m 和 n 合并。</td></tr><tr><td style="text-align:center">&lt;&lt; tag</td><td style="text-align:center">将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td></tr></tbody></table><h3 id="Shell-文件包含"><a href="#Shell-文件包含" class="headerlink" title="Shell 文件包含"></a><font color=orange>Shell 文件包含</font></h3><p>和其他语言一样，Shell 也可以包含外部脚本。这样可以很方便的封装一些公用的代码作为一个独立的文件。被包含的文件不需要可执行权限。<br>Shell 文件包含的语法格式如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">. filename   # 注意点号(.)和文件名中间有一空格</span><br><span class="line">或</span><br><span class="line">source filename</span><br></pre></td></tr></table></figure></p><h3 id="Shell中命令替换"><a href="#Shell中命令替换" class="headerlink" title="Shell中命令替换"></a><font color=orange>Shell中命令替换</font></h3><p>使用两个倒导引号``把命令包起来, Shell会先执行该命令,其结果输出代替用倒引号括起来的文本.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in `ls`; do</span><br><span class="line">echo $i</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="文件或者文件夹名称有空格的情况"><a href="#文件或者文件夹名称有空格的情况" class="headerlink" title="文件或者文件夹名称有空格的情况"></a><font color=orange>文件或者文件夹名称有空格的情况</font></h2><p>对于文件或者文件夹有空格的时候, 当我们使用<code>ls</code>命令的时候会出现, 文件或者文件夹名称被分割的情况, 此时我们可以使用下面的方式, 先将空格替换成<code>\?</code>, 使用的时候再把<code>\?</code>替换成空格。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">source=xxxxx</span><br><span class="line">distance=xxxx</span><br><span class="line">for file in `ls &quot;$(pwd)&quot; | tr &quot; &quot; &quot;\?&quot;`; do</span><br><span class="line">if [[ -d $file ]]; then</span><br><span class="line">for i in `ls &quot;$source/$file&quot; | tr &quot; &quot; &quot;\?&quot;`; do</span><br><span class="line">if [[ -d &quot;$source/$file/$i&quot; ]]; then</span><br><span class="line">cp -R &quot;$source/$file/$i&quot; &quot;$distance&quot;</span><br><span class="line">else</span><br><span class="line">i=`tr &quot;\?&quot; &quot; &quot;&lt;&lt;&lt;$i`</span><br><span class="line">cp -R &quot;$source/$file/$i&quot; &quot;$distance&quot;</span><br><span class="line">fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;font color=orange&gt;前言&lt;/font&gt;&lt;/h2&gt;&lt;p&gt;最近希望可以一键自动打包iOS App Store上传的ipa包, 所有来学习一下Shell脚本.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/others/shell_top.jpg&quot; alt=&quot;hello&quot; style=&quot;width: 50%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;/&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>一张图片引发的血案</title>
    <link href="http://yoursite.com/2017/09/13/iOS/%E4%B8%80%E5%BC%A0%E5%9B%BE%E7%89%87%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%A1%88/"/>
    <id>http://yoursite.com/2017/09/13/iOS/一张图片引发的血案/</id>
    <published>2017-09-13T06:42:19.000Z</published>
    <updated>2023-06-25T07:41:20.646Z</updated>
    
    <content type="html"><![CDATA[<p>最近线上版本出现了一个严重的Bug, iOS系统版本在9.1、9.2.1系统上面崩溃, 而在其他版本上面都没有任何问题, 并且对于直接通过Xcode打包安装、蒲公英安装都没有任何问题, 只对于从App Store上面下载的才会崩溃.<br><img src="/assets/images/iOS/errorforp3.jpg" alt="hello" style="width: 50%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"/><br><span id="more"></span></p><h2 id="解决崩溃"><a href="#解决崩溃" class="headerlink" title="解决崩溃"></a>解决崩溃</h2><h3 id="崩溃原因"><a href="#崩溃原因" class="headerlink" title="崩溃原因"></a>崩溃原因</h3><ul><li>bugtags奔溃原因是: <code>Signal 10 was raised. SIGBUS</code></li><li>umeng奔溃原因是: <code>Application received signal SIGSEV</code>, 但是又找不到具体的原因</li></ul><p>在Xcode 8中，当你资源文件中[含有16位图]或者[图片显示模式γ值为’P3’], 如允许该App的系统为iOS 9.1或者iOS 9.2.1, 那么基本上都会崩溃, 通过崩溃时的参数可以看出来, 基本都是内存吃紧.</p><h3 id="找到出问题的图片"><a href="#找到出问题的图片" class="headerlink" title="找到出问题的图片"></a>找到出问题的图片</h3><ul><li>打包ipa包</li><li>解压ipa包(右键—打开方式—归档使用工具), 找到<code>Payload</code>中的项目包</li><li>右键—显示包内容—找到<code>Assets.car</code><ul><li>也可以使用命令</li><li><code>cd 项目所在的位置</code></li><li><code>find . -name &#39;Assets.car&#39;</code>查找</li></ul></li><li>使用 assetutil 命令找到任何包含着 16-bit or P3 的资源文件<ul><li><code>sudo xcrun --sdk iphoneos assetutil --info Assets.car路径 &gt; xxx.json</code></li></ul></li><li>查找该文件中包含下面字段的图片名称<ul><li><code>&quot;DisplayGamut&quot;: &quot;P3&quot;</code></li><li><code>&quot;BitsPerSample&quot;: 16</code></li></ul></li></ul><center><br><img src="/assets/images/iOS/testflight_image.png" alt="问题图片和图片名称" style="width: 70%; text-align: center; display: block;"/><br></center>    <h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>找到这些图片, 删除或者替换它们.</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>由于通过Xcode直接打包, 或者上传蒲公英进行分下测试时, 运行在相关崩溃系统的手机上时不会崩溃, 所有这里需要使用苹果自带的测试工具<font color=red> TestFlight </font>, TestFlight上面会保留上传到App Store上面的ipa包90天.</p><h3 id="需要测试手机安装TestFlight"><a href="#需要测试手机安装TestFlight" class="headerlink" title="需要测试手机安装TestFlight"></a>需要测试手机安装<code>TestFlight</code></h3><p>测试手机需要从App Store安装TestFlight, 并登陆需要添加测试人的Apple ID.</p><h3 id="上传新版本"><a href="#上传新版本" class="headerlink" title="上传新版本"></a>上传新版本</h3><p>在<a href="https://itunesconnect.apple.com">itunesconnect</a>中登录你的开发者账号, 在<code>我的App</code>——<code>TestFlight</code>中可以看到<code>构建版本</code>和<code>测试员和群组</code>.</p><p>这里可以看到, 能测试的版本只能是构建版本, 所以需要新构建一个版本, 上传ipa包</p><center><br><img src="/assets/images/iOS/testFlight_01.png" alt="查看可测试的包和测试人员" style="width: 70%; text-align: center; display: block;"/><br></center>    <h3 id="添加测试人员"><a href="#添加测试人员" class="headerlink" title="添加测试人员"></a>添加测试人员</h3><p>测试人员可以在<a href="https://itunesconnect.apple.com/WebObjects/iTunesConnect.woa/ra/ng/users_roles">用户和职能</a>中添加.</p><ul><li>iTunes Connect 用户<ul><li>它可以管理的账户或者相关功能, 管理、财务、App 管理、开发人员、营销、销售、客户支持、报告</li></ul></li><li>TestFlight Beta 版测试员<ul><li>该功能快要移除了, 现在在具体的项目中添加测试人员</li></ul></li><li><p>沙箱技术测试员</p><ul><li>沙箱技术测试员可让您在向用户提供 Apple Pay 交易、App 内购买项目、Game Center 功能及本地化版本之前进行测试。</li></ul></li><li><p>也可以在具体的App目录下的TestFlight中添加测试人员</p><ul><li>首先需要添加群组</li><li>然后再该群组中添加测试人员</li></ul></li></ul><center><br><img src="/assets/images/iOS/testFlight_02.png" alt="查看可测试的包和测试人员" style="width: 70%; text-align: center; display: block;"/><br></center>    <h3 id="邀请测试"><a href="#邀请测试" class="headerlink" title="邀请测试"></a>邀请测试</h3><h4 id="iTunes-Connect-用户"><a href="#iTunes-Connect-用户" class="headerlink" title="iTunes Connect 用户"></a>iTunes Connect 用户</h4><p>如果是<code>iTunes Connect 用户</code>, 可以在<code>iTunes Connect 用户</code>中选中人员, 然后对应的邮箱会收到邀请邮件, 里面有一个链接, 点击后会获取到一个验证码, 打开手机上面的<code>TestFlight</code>, 输入该验证码就会看到测试的App, 还可以选择不同的版本.</p><h4 id="自定义群组和里面的测试人员"><a href="#自定义群组和里面的测试人员" class="headerlink" title="自定义群组和里面的测试人员"></a>自定义群组和里面的测试人员</h4><p>您可以将任何人添加至此群组，被添加的人将可使用 TestFlight App 测试构建版本。构建版本可能需要通过 Beta 版 App 审核, 并且需要提供用户名和密码, 构建成功之后该群组中的测试人员或收到邀请邮件.</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>最新更新, 现在从TestFlight安装测试版App更加方便, 外部链接无需被邀请人的邮箱, 直接发送链接给测试人通过testFlight的App安装, 但是外部链接生成前, 需要通过beta版本的审核, 大约需要1个工作日左右, 相比较而言, 测试安装更加便捷了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近线上版本出现了一个严重的Bug, iOS系统版本在9.1、9.2.1系统上面崩溃, 而在其他版本上面都没有任何问题, 并且对于直接通过Xcode打包安装、蒲公英安装都没有任何问题, 只对于从App Store上面下载的才会崩溃.&lt;br&gt;&lt;img src=&quot;/assets/images/iOS/errorforp3.jpg&quot; alt=&quot;hello&quot; style=&quot;width: 50%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;/&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="坑点" scheme="http://yoursite.com/tags/%E5%9D%91%E7%82%B9/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>使自己的Github项目支持Cocoapods以及私有远程Repo仓库</title>
    <link href="http://yoursite.com/2017/08/12/iOS/%E4%BD%BF%E8%87%AA%E5%B7%B1%E7%9A%84Github%E9%A1%B9%E7%9B%AE%E6%94%AF%E6%8C%81Cocoapods/"/>
    <id>http://yoursite.com/2017/08/12/iOS/使自己的Github项目支持Cocoapods/</id>
    <published>2017-08-12T09:27:17.000Z</published>
    <updated>2023-06-25T07:40:27.379Z</updated>
    
    <content type="html"><![CDATA[<p>很早之前就想做的事情之一, 刚好最近有个新功能需要添加到项目中, 于是就想顺便上传到github, 使用Cocoapods来管理.<br><img src="/assets/images/iOS/github_cocoapods.jpg" alt="hello" style="width: 50%; text-align: center; display: block; margin-top:30px; margin-bottom:30px"/><br><span id="more"></span></p><h1 id="项目支持Cocoapods"><a href="#项目支持Cocoapods" class="headerlink" title="项目支持Cocoapods"></a><font color=orange>项目支持Cocoapods</font></h1><p>这里演示的是Githu项目, 可以视自己的情况时有Coding、开源中国等Git服务器.</p><h2 id="准备-安装Cocoapods和注册trunk"><a href="#准备-安装Cocoapods和注册trunk" class="headerlink" title="准备(安装Cocoapods和注册trunk)"></a>准备(安装Cocoapods和注册trunk)</h2><p>现在Cocoapods使用trunk方式, 并且需要版本在0.33以上.</p><ul><li>安装: <code>sudo gem install cocoapods</code></li><li>查看版本: <code>pod --version</code></li><li>注册trunk, 执行下面命令, 邮箱会收到验证链接, 打开链接注册成功<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk register xxxx@qq.com &#x27;用户名&#x27;  --verbose</span><br></pre></td></tr></table></figure></li><li>成功之后查询自己的信息: <code>pod trunk me</code></li></ul><h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h2><p>在Github上面新建一个仓库, 免费的用户只能创建<code>Public</code>类型的仓库, 任何人都可以clone该仓库. 创建的同时可以根据开发语言选择忽略文件, 选择开源协议.</p><h2 id="克隆仓库到本地"><a href="#克隆仓库到本地" class="headerlink" title="克隆仓库到本地"></a>克隆仓库到本地</h2><ul><li>克隆命令(替换你的用户名和项目名)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/你的用户名/你的项目名.git</span><br></pre></td></tr></table></figure></li></ul><h2 id="将你的代码拷贝到该仓库中"><a href="#将你的代码拷贝到该仓库中" class="headerlink" title="将你的代码拷贝到该仓库中"></a>将你的代码拷贝到该仓库中</h2><p>将你的项目添加到仓库中, 或者使用下面命令创建新项目</p><blockquote><p>pod lib create 项目名称</p></blockquote><h2 id="配置-podspec文件"><a href="#配置-podspec文件" class="headerlink" title="配置 .podspec文件"></a>配置 .podspec文件</h2><p>使用上一步的命令创建的项目会自动创建<code>xxx.podspec</code>, 如果是自己新建的项目则没有, 需要自己创建。</p><ul><li>在仓库中新建配置文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec create 项目名称</span><br></pre></td></tr></table></figure><ul><li>配置文件中字段说明, <a href="http://guides.cocoapods.org/syntax/podspec.html">官方文档</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">Pod::Spec.new do |s|</span><br><span class="line"></span><br><span class="line"># 名称 使用的时候pod search [name]</span><br><span class="line">s.name = &quot;WhatKeyboard&quot;</span><br><span class="line"></span><br><span class="line"># 代码库的版本, 需要和代码仓库中的tag值一致</span><br><span class="line">s.version = &quot;1.0.0&quot;</span><br><span class="line"></span><br><span class="line"># 简介</span><br><span class="line">s.summary = &quot;自定义密码安全键盘&quot;</span><br><span class="line"></span><br><span class="line">s.description  = &lt;&lt;-DESC</span><br><span class="line">                        这是一个自定义密码安全键盘.</span><br><span class="line">                        DESC</span><br><span class="line"></span><br><span class="line"># 主页</span><br><span class="line">s.homepage = &quot;https://github.com/coppco/WhatKeyboard&quot;</span><br><span class="line"></span><br><span class="line"># 许可证书类型，要和仓库的LICENSE 的类型一致</span><br><span class="line">s.license = &quot;MIT&quot;</span><br><span class="line"></span><br><span class="line"># 作者名称 和 邮箱</span><br><span class="line">s.author = &#123; &quot;coppco&quot; =&gt; &quot;coppco@qq.com&quot; &#125;</span><br><span class="line"></span><br><span class="line"># 作者主页</span><br><span class="line">s.social_media_url =&quot;https://coppco.github.io&quot;</span><br><span class="line"></span><br><span class="line"># 代码库最低支持的版本</span><br><span class="line">s.platform = :ios, &quot;7.0&quot;</span><br><span class="line"></span><br><span class="line"># 代码的Clone 地址 和 tag 版本</span><br><span class="line">s.source = &#123; :git =&gt; &quot;https://github.com/coppco/WhatKeyboard.git&quot;, :tag =&gt; &quot;#&#123;s.version&#125;&quot; &#125;</span><br><span class="line"></span><br><span class="line">#新建目录, 如果有多个表示可以分库, 引入时也可以单独引入分库</span><br><span class="line">s.default_subspec = &#x27;Core&#x27;</span><br><span class="line"></span><br><span class="line">s.subspec &#x27;Core&#x27; do |ss|</span><br><span class="line">ss.source_files = &#x27;WhatKeyboard/classes/*.&#123;h,m&#125;&#x27;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">#框架被其他工程引入时, 导入的.h和.m等  **/*表示目录及其子目录下所有文件, 如果多个目录, 用逗号分开。.&#123;&#125;限定导入的格式</span><br><span class="line">#s.source_files = &quot;WhatKeyboardDemo/WhatKeyboardDemo/WhatKeyboard/classes/**/*.&#123;h,m&#125;&quot;</span><br><span class="line">#s.source_files = &quot;WhatKeyboardDemo/WhatKeyboardDemo/WhatKeyboard/**/*.&#123;h,m&#125;&quot;</span><br><span class="line"></span><br><span class="line">#框架被其他工程引入时, 导入的资源包括图片、bundle、xib、storyboard等</span><br><span class="line">s.resources = &quot;WhatKeyboard/resource/*.&#123;bundle&#125;&quot;, &quot;WhatKeyboard/classes/*.&#123;xib,storyboard,nib&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 框架是否使用的ARC</span><br><span class="line">s.requires_arc = true</span><br><span class="line"></span><br><span class="line">#框架依赖的framework</span><br><span class="line">#s.framework    = &#x27;CoreData&#x27;</span><br><span class="line"></span><br><span class="line">#框架依赖的其他第三方库</span><br><span class="line">#s.dependency &#x27;MagicalRecord&#x27;, :git =&gt; &#x27;https://github.com/iiiyu/MagicalRecord.git&#x27;, :tag =&gt; &#x27;sumiGridDiary2.1&#x27;</span><br><span class="line">#s.dependency &#x27;MBProgressHUD&#x27;</span><br><span class="line"></span><br><span class="line">#框架公开的头文件</span><br><span class="line">#s.public_header_files = &#x27;WhatKeyboardDemo/WhatKeyboardDemo/WhatKeyboard/**/*.h&#x27;</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li>验证配置文件是否正确<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#本地验证</span><br><span class="line">pod lib lint xxx.podspec</span><br><span class="line">#远程验证</span><br><span class="line">pod spec lint xxx.podspec</span><br></pre></td></tr></table></figure>如果提示<code>WhatKeyboard passed validation</code>, 即表示正确.</li></ul><h2 id="打tag-上传到github"><a href="#打tag-上传到github" class="headerlink" title="打tag, 上传到github"></a>打tag, 上传到github</h2><ul><li>首先需要打一个tag, 这个tag需要是<code>.podspec</code>文件中的version值.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag &#x27;1.0.0&#x27; </span><br></pre></td></tr></table></figure></li><li>然后上传到github<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &#x27;提交内容&#x27;</span><br><span class="line">git push --tags </span><br></pre></td></tr></table></figure></li><li><font color=red size=20>通过trunk上传你的podspec文件</font>, 在仓库目录执行下面的命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk push 你的podspec文件名</span><br></pre></td></tr></table></figure></li><li>删除指定tag的Cocoapod支持<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk delete WhatKeyboard 1.0.0</span><br></pre></td></tr></table></figure>出现下面结果, 表示成功了<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">🎉  Congrats</span><br><span class="line"></span><br><span class="line">🚀  WhatKeyboard (1.0.0) successfully published</span><br><span class="line">📅  September 13th, 00:33</span><br><span class="line">🌎  https://cocoapods.org/pods/WhatKeyboard</span><br><span class="line">👍  Tell your friends!</span><br></pre></td></tr></table></figure></li><li>测试: <code>pod search WhatKeyboard</code>, 如果没有成功, 可以先更新一下本地依赖库<code>pod setup</code></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>图片问题<br>图片建议新建一个<code>Settings Bundle</code>, 将图片放入该bundle中, 加载图片时使用<code>[UIImage imageNamed:@&quot;xxx.bundle/xxxx&quot;]</code></li><li>xib等加载问题<br>不能再使用<code>[NSBudle mainBundle]</code>了, 需要改成下面的方式: <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[NSBundle bundleForClass:[self class]] loadNibNamed:NSStringFromClass(self) owner:nil options:nil].firstObject;</span><br></pre></td></tr></table></figure></li><li>注意事项<br>Cocoapods是根据仓库中的tag值进行安装的, 所以必须打tag, <code>.podspec</code>文件中的version也必须和tag值一样.</li><li>更新<ul><li>需要上传代码到github仓库, 然后打一个新tag.</li><li>上传<code>.podspec</code>文件到trunk上面<ul><li>在仓库中运行: <code>pod trunk push 你的podspec文件名</code></li></ul></li></ul></li><li>取消对Cocoapods的支持, WhatKeyboard是项目名称, 1.0.0是对应的tag值<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk delete WhatKeyboard 1.0.0</span><br></pre></td></tr></table></figure></li></ul><h1 id="搭建远程私有Repo库"><a href="#搭建远程私有Repo库" class="headerlink" title="搭建远程私有Repo库"></a><font color=orange>搭建远程私有Repo库</font></h1><p>有时候公司有多个项目, 每个项目都用到相同的组件, 但是我们又不希望开源这些组件, 我们可以创建私有远程Repo库, 它有点类似于Maven私服.</p><ul><li>1、创建一个远程私有Spec库, 可以在远程的git服务器上</li><li>2、将远程私有Spec库的git地址加入repo, 注意修改xxx名称<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo add xxx 远程私有repo的git地址</span><br></pre></td></tr></table></figure><ul><li>执行完之后会在<code>/Users/用户名/.cocoapods/repos/</code>下会生成<code>xxx</code>文件夹.<ul><li>验证是否正确: 在<code>/Users/用户名/.cocoapods/repos/xxx</code>目录下运行: <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod repo lint .</span><br></pre></td></tr></table></figure></li><li>如果出现<code>All the specs passed validation.</code>即表示添加成功.</li><li>显示本地repo列表: <code>pod repo list</code></li><li>删除本地私有repo: <code>pod repo remove xxx</code></li><li>更新某个repo: <code>pod repo update xxx</code></li></ul></li></ul></li><li>3、创建一个代码git仓库, 并克隆到本地, 然后在代码仓库中运行<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec create 你的项目名</span><br></pre></td></tr></table></figure><ul><li>修改<code>你的项目名.podspec</code>文件, 根据实际情况修改<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Pod::Spec.new do |s|</span><br><span class="line">    #搜索时名称</span><br><span class="line">    s.name                = &#x27;WhatKeyboard&#x27;</span><br><span class="line">    #tag值</span><br><span class="line">    s.version             = &#x27;1.1.2&#x27;</span><br><span class="line">    #描述</span><br><span class="line">    s.summary          = &#x27;自定义密码输入键盘&#x27;</span><br><span class="line">    #主页</span><br><span class="line">    s.homepage         = &#x27;https://github.com/coppco/WhatKeyboard&#x27;</span><br><span class="line">    #开源协议</span><br><span class="line">    s.license              = &#x27;MIT&#x27;</span><br><span class="line">    #作者和邮箱</span><br><span class="line">    s.author               = &#123; &#x27;coppco&#x27; =&gt; &#x27;coppco@qq.com&#x27; &#125;      </span><br><span class="line">    #支持的系统和最低版本</span><br><span class="line">    s.platform           = :ios, &#x27;7.1&#x27;</span><br><span class="line">    #git地址和tag值</span><br><span class="line">    s.source               = &#123; :git =&gt; &#x27;https://github.com/coppco/WhatKeyboard.git&#x27;, :tag =&gt; s.version&#125;</span><br><span class="line">    #默认目录</span><br><span class="line">    s.default_subspec = &#x27;Core&#x27;</span><br><span class="line">    #分目录</span><br><span class="line">    s.subspec &#x27;Core&#x27; do |ss|</span><br><span class="line">        #代码路径</span><br><span class="line">        ss.source_files = &#x27;WhatKeyboard-master/*.&#123;h,m&#125;&#x27;</span><br><span class="line">    end</span><br><span class="line">    #资源路径</span><br><span class="line">    s.resources           = &#x27;WhatKeyboard-master/*.&#123;xib,storyboard,nib,bundle&#125;&#x27;</span><br><span class="line">    #是否ARC</span><br><span class="line">    s.requires_arc      = true</span><br><span class="line">    #依赖的其他库</span><br><span class="line">    #s.dependency  &#x27;AFNetworking&#x27;,&#x27;3.1.0&#x27;</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li></ul></li><li>4、验证你的podspec文件<ul><li>本地验证<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint 项目名.podspec --verbose --use-libraries --allow-warnings</span><br></pre></td></tr></table></figure></li><li>远程验证<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec lint 项目名.podspec --verbose --use-libraries --allow-warnings</span><br></pre></td></tr></table></figure></li><li><code>--verbose</code>: 查看详细的验证过程</li><li><code>--use-libraries</code>: 如果你的库使用了静态库或者引用的三方库使用了静态库, 验证无法通过</li><li><code>--allow-warnings</code>: 允许警告</li></ul></li><li>5、推送podspec文件到远程私有Cocoapods库<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#名字xx必须和第二步名字一样</span><br><span class="line">pod repo push xxx spec文件名称.podspec</span><br></pre></td></tr></table></figure><ul><li>推送成功之后, 远程的repo仓库会添加<code>/spec文件名称/tag/spec文件名称.podspec</code>文件夹和文件.</li></ul></li><li>6、修改工程podfile文件, 引入远程私有repo库的git地址<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">source &#x27;https://xxx.xxx.xxx/xxx/xxx.git</span><br><span class="line">source &#x27;https://github.com/CocoaPods/Specs.git&#x27;</span><br><span class="line"></span><br><span class="line">platform :ios, &#x27;9.0&#x27;</span><br><span class="line"></span><br><span class="line">target &#x27;Example&#x27; do</span><br><span class="line">pod &#x27;xxx&#x27;</span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>7、后期更新远程私有repo<ul><li>代码仓库打tag, 并推送到远程代码库</li><li>修改podspec文件, 将<code>s.version</code>改为代码仓库的tag值</li><li>验证podspec文件</li><li>podspec文件验证通过, 更新本地远程私有仓库</li></ul></li></ul><h1 id="上传podspec到github时报错"><a href="#上传podspec到github时报错" class="headerlink" title="上传podspec到github时报错"></a><font color=orange>上传podspec到github时报错</font></h1><p>今天更新项目的github时, 报如下错误: </p><blockquote><p>Encountered an unknown error (/usr/bin/xcrun simctl list -j devices<br>xcrun: error: unable to find utility “simctl”, not a developer tool or in PATH<br>) during validation.</p></blockquote><ul><li>解决办法<blockquote><p><code>Xcode</code>——–<code>Command + ,</code>——–<code>Locations</code>——–<code>Command Line Tools</code>设置一下即可</p></blockquote></li></ul><h1 id="CocoaPods和SVN配合使用"><a href="#CocoaPods和SVN配合使用" class="headerlink" title=" CocoaPods和SVN配合使用 "></a><font color=orange> CocoaPods和SVN配合使用 </font></h1><p>2019年, 新入职公司代码控制工具使用的是SVN, 所以又研究了一下CocoaPods和SVN结合使用。</p><ul><li>1、首先在SVN服务器创建项目目录<ul><li>需要包含正确的目录: <code>branches</code>、<code>tags</code>、<code>trunk</code></li></ul></li><li>2、在<code>trunk</code>目录中添加项目以及<code>xxx.podspec</code><ul><li>也可以使用<code>pod lib create xxx</code>自动生成</li></ul></li><li><p>3、添加代码并配置好<code>xxx.podspec</code></p><ul><li>这里需要注意的是<code>xxx.podspec</code>里面的配置<blockquote><p>Pod::Spec.new do |s|<br>s.name         = “xxx”<br>#<font color=red>注意这里的version必须是SVN中该项目存在的tag值</font><br>s.version      = “1.0.0”<br>s.summary      = “封装xxx”<br>s.homepage     = “<a href="http://www.xxx.com&quot;">http://www.xxx.com&quot;</a><br>s.license      = “MIT”<br>s.author             = { “xxx” =&gt; “<a href="mailto:xxx@xxx.com">xxx@xxx.com</a>“ }<br>s.ios.deployment_target = “7.0”<br>s.platform           = :ios, ‘7.0’</p><p>#<font color=red>这里需要修改为你项目所在SVN的地址</font><br>s.source       = { :git =&gt; “<a href="http://192.168.1.100/iOSComponent/xxx&quot;">http://192.168.1.100/iOSComponent/xxx&quot;</a>, :tag =&gt; “#{s.version}” }</p><p>s.public_header_files = ‘xxx/*.h’</p><p>s.source_files = ‘xxx/*.{h,m}’</p><p>s.requires_arc      = true</p><p>end</p></blockquote></li></ul></li><li><p>4、代码提交到SVN服务器</p></li><li>5、选中<code>trunk</code>文件夹, 添加tag<ul><li>添加完成之后, 会在<code>tags</code>文件夹下面自动生成对应的tag文件夹</li></ul></li><li>6、在<code>Profile</code>文件中添加私有库的引用<blockquote><p>#<font color=red>这里注意SVN地址是项目所在的SVN地址,tag就是项目中已经添加的tag</font><br>pod ‘xxx’,:svn =&gt;’<a href="http://192.168.1.100/iOSComponent/xxx&#39;,:tag">http://192.168.1.100/iOSComponent/xxx&#39;,:tag</a> =&gt;’1.0.0’</p></blockquote></li><li>7、执行<code>pod install</code>完成导入<ul><li><font color=red>这里需要注意的是: 由于SVN一般有权限, 所以在第一次执行之前需要我们手动<code>svn check</code>一次, 然后输入有该项目权限的用户名和密码</font></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很早之前就想做的事情之一, 刚好最近有个新功能需要添加到项目中, 于是就想顺便上传到github, 使用Cocoapods来管理.&lt;br&gt;&lt;img src=&quot;/assets/images/iOS/github_cocoapods.jpg&quot; alt=&quot;hello&quot; style=&quot;width: 50%; text-align: center; display: block; margin-top:30px; margin-bottom:30px&quot;/&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="资料整理" scheme="http://yoursite.com/tags/%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Cocoapods" scheme="http://yoursite.com/tags/Cocoapods/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>软件逆向工程之Delphi</title>
    <link href="http://yoursite.com/2017/08/09/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E4%B9%8BDelphi/"/>
    <id>http://yoursite.com/2017/08/09/逆向工程/软件逆向工程之Delphi/</id>
    <published>2017-08-09T04:16:08.000Z</published>
    <updated>2023-06-25T07:38:49.193Z</updated>
    
    <content type="html"><![CDATA[<p>最近以前的同事问我能不能破解一个桌面软件(当然是一个比较简单的小程序), 当时夸下开口说可以, 于是乎私下研究了下逆向工程.</p><span id="more"></span><h2 id="什么是逆向工程"><a href="#什么是逆向工程" class="headerlink" title="什么是逆向工程?"></a><font color=orange>什么是逆向工程?</font></h2><p>&emsp;&emsp;逆向工程（又称逆向技术），是一种产品设计技术再现过程，即对一项目标产品进行逆向分析及研究，从而演绎并得出该产品的处理流程、组织结构、功能特性及技术规格等设计要素，以制作出功能相近，但又不完全一样的产品。逆向工程源于商业及军事领域中的硬件分析。其主要目的是在不能轻易获得必要的生产信息的情况下，直接从成品分析，推导出产品的设计原理.<br>&emsp;&emsp;逆向工程在工业设计中很早就有应用. 举个栗子, 关注军事的同学都知道, 我国第一艘航空母舰——辽宁号航空母舰, 它的前身是上个世纪80年代中后期，于乌克兰建造时遭逢苏联解体建造工程中断，完成度68%的瓦良格号. 从购买到真正抵达大连期间总共历时3年多的时间花费了大量人力、物力和财力. 再比如中国的山寨之王——企鹅, 大家印象最深的应该就是市面上刚刚有个产品火了, 不到两个月腾讯肯定有相关的产品问世, 从QQ、拍拍、财付通、QQ校友、Q飞车、QQ炫舞、QQ电脑管家、CF、微信等等, 不过难得微信的小程序被支付宝山寨了一次.</p><h2 id="合法性"><a href="#合法性" class="headerlink" title="合法性"></a><font color=orange>合法性</font></h2><p>&emsp;&emsp;在2007年初，我国相关的法律为逆向工程正名，承认了逆向技术用于学习研究的合法性。根据有关法律，对于任何计算机方面的逆向工程，只要不用于商业用途都不违法。比如对商业软件的反编译，代码分析等</p><p>&emsp;&emsp;我国虽然在计算机软件保护方面已制定了《计算机软件保护条例》、《计算机软件著作权登记条例》等法律法规，但都未涉及软件反向工程问题，这一点应尽早引起立法机关的重视，正是由于我国法律对有关软件反向工程的问题没有规定，因此诸如微软之类的公司在其软件产品的最终用户使用协议中都规定：“禁止对该软件产品进行反向工程，如果当地法律允许反向工程则除外。”</p><h2 id="逆向工程需要什么"><a href="#逆向工程需要什么" class="headerlink" title="逆向工程需要什么?"></a><font color=orange>逆向工程需要什么?</font></h2><ul><li>一些基础的语言如: C、C++(很多游戏、嵌入式使用)</li><li>汇编语言</li><li>一些逆向工程常见的软件(这很重要): 如静态反汇编IDA pro和动态调试器OllyDbg还有内核调试winDbg</li><li>掌握外壳原理和技巧，熟悉常见的加解密算法、反调试技巧</li></ul><h2 id="Delphi的反编译"><a href="#Delphi的反编译" class="headerlink" title="Delphi的反编译"></a><font color=orange>Delphi的反编译</font></h2><h3 id="明确目标软件的编程语言和加壳情况"><a href="#明确目标软件的编程语言和加壳情况" class="headerlink" title="明确目标软件的编程语言和加壳情况"></a>明确目标软件的编程语言和加壳情况</h3><p>&emsp;&emsp;PEiD是一款著名的查壳工具，其功能强大，现在有软件很多都加了壳，给破解汉化带来非常大的不便，PEiD几乎可以侦测出所有的壳，其数量已超过470 种PE文档 的加壳类型和签名，另外还可识别出EXE文件是用什么语言编写的，比如：VC++、Delphi、VB或Delphi等.<br>其他查壳工具还有: <code>Fi</code>、<code>GetTyp</code>和<code>pe-scan</code>等.</p><center><br><img src="/assets/images/others/peid.png" alt="使用PEiD查壳" style="width: 70%; text-align: center; display: block;"/><br></center>    <p>运气比较好, 如上图所示这个exe文件是没有壳的,而且是使用Delhpi编写的, 如果红圈里面是<code>Not Found</code>就是加过壳的, 如果后面有[Overlay]可能是加了伪装成对应语言的壳.</p><h4 id="去壳"><a href="#去壳" class="headerlink" title="去壳"></a>去壳</h4><p>不同的壳有不同的去壳方式, 高手都是自己脱壳, 对于不会的人可以先尝试脱壳工具, 不一定能成功.</p><p><a href="https://down.52pojie.cn/Tools/Unpackers/">常见的脱壳工具</a></p><h5 id="常见的壳"><a href="#常见的壳" class="headerlink" title="常见的壳"></a>常见的壳</h5><ul><li>压缩壳<ul><li>ASPack</li><li>UPX</li><li>PeCompact</li><li>NsPack(国产北斗壳)</li></ul></li><li>加密壳<ul><li>ASProtect加密壳</li><li>Armadillo加密壳</li><li>EXECryptor加密壳</li><li>Themida加密壳</li><li>VM Protect </li><li>Code Virtualizer</li><li>EncryptPE</li><li>PE-Armor </li></ul></li></ul><h3 id="反编译和反汇编"><a href="#反编译和反汇编" class="headerlink" title="反编译和反汇编"></a>反编译和反汇编</h3><font color=green>反汇编得到的是汇编代码</font><br/><br><font color=green>反编译得到的是所用语言的源代码</font><h3 id="反编译软件的选择"><a href="#反编译软件的选择" class="headerlink" title="反编译软件的选择"></a>反编译软件的选择</h3><h4 id="微软开发平台"><a href="#微软开发平台" class="headerlink" title="微软开发平台"></a>微软开发平台</h4><p>对于微软开发平台开发出来的软件，我们通常使用.NET Reflector.</p><h4 id="Borland-Delphi"><a href="#Borland-Delphi" class="headerlink" title="Borland Delphi"></a>Borland Delphi</h4><p>常用的软件有DeDe</p><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>常用的有Java Decompiler.</p><h3 id="开始破解"><a href="#开始破解" class="headerlink" title="开始破解"></a>开始破解</h3><p>我使用的是由<a href="http://www.52pojie.cn">52破解</a>提供的汉化版的<a href="https://pan.baidu.com/s/1skMYbQd">ollydbg</a>, 提取密码: acrq</p><h4 id="将可执行文件拖入软件或者从文件菜单打开"><a href="#将可执行文件拖入软件或者从文件菜单打开" class="headerlink" title="将可执行文件拖入软件或者从文件菜单打开"></a>将可执行文件拖入软件或者从文件菜单打开</h4><center><br><img src="/assets/images/others/ollydbg_main.png" alt="ollydbg主目录" style="width: 70%; text-align: center; display: block;"/><br></center>    <h4 id="通过查找-所有参考文本字符串快速查找"><a href="#通过查找-所有参考文本字符串快速查找" class="headerlink" title="通过查找------所有参考文本字符串快速查找"></a>通过<code>查找------所有参考文本字符串</code>快速查找</h4><center><br><img src="/assets/images/others/ollydbg_search.png" alt="快速查找" style="width: 70%; text-align: center; display: block;"/><br></center>    <h4 id="在汇编窗口查看-双击该字符串行或者选择反汇编窗口中跟随"><a href="#在汇编窗口查看-双击该字符串行或者选择反汇编窗口中跟随" class="headerlink" title="在汇编窗口查看, 双击该字符串行或者选择反汇编窗口中跟随"></a>在汇编窗口查看, 双击该字符串行或者选择<code>反汇编窗口中跟随</code></h4><center><br><img src="/assets/images/others/ollydbg_search.png" alt="快速查找" style="width: 70%; text-align: center; display: block;"/><br></center>    <center><br><img src="/assets/images/others/ollydbg_search2.png" alt="反汇编窗口查看" style="width: 70%; text-align: center; display: block;"/><br></center>    <h4 id="修改汇编语言以及相关文字"><a href="#修改汇编语言以及相关文字" class="headerlink" title="修改汇编语言以及相关文字"></a>修改汇编语言以及相关文字</h4><ul><li>修改汇编语言, 双击汇编区域的一行<center><br><img src="/assets/images/others/ollydbg_edtingCode.png" alt="修改汇编语言" style="width: 70%; text-align: center; display: block;"/><br></center></li><li>修改文字, <code>右键</code>——<code>数据窗口中跟随</code>——<code>选择</code><center><br><img src="/assets/images/others/ollydbg_edtingWord.png" alt="修改文字1" style="width: 70%; text-align: center; display: block;"/><br></center><br>双击<code>HEX数据</code>中的数据位置, 即可更改文字, 需要注意的是: <font color=red>保持大小</fong>需要勾选.<br><center><br><img src="/assets/images/others/ollydbg_edting_word2.png" alt="修改文字2" style="width: 70%; text-align: center; display: block;"/><br></center></li></ul><h4 id="保存修改保存到可执行文件"><a href="#保存修改保存到可执行文件" class="headerlink" title="保存修改保存到可执行文件"></a>保存修改保存到可执行文件</h4><p><code>右键</code>——<code>复制到壳执行文件</code>——<code>全部复制</code>——<code>新窗口右键</code>——<code>保存</code></p><center><br><img src="/assets/images/others/ollydbg_saving1.png" alt="保存" style="width: 70%; text-align: center; display: block;"/><br></center><br><center><br><img src="/assets/images/others/ollydbg_saving2.png" alt="全部复制" style="width: 70%; text-align: center; display: block;"/><br></center><br><center><br><img src="/assets/images/others/ollydbg_saving3.png" alt="保存到文字即可" style="width: 70%; text-align: center; display: block;"/><br></center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近以前的同事问我能不能破解一个桌面软件(当然是一个比较简单的小程序), 当时夸下开口说可以, 于是乎私下研究了下逆向工程.&lt;/p&gt;
    
    </summary>
    
    
      <category term="逆向工程" scheme="http://yoursite.com/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="Delphi" scheme="http://yoursite.com/tags/Delphi/"/>
    
  </entry>
  
</feed>
